
G474RE_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08008650  08008650  00018650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c7c  08008c7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c84  08008c84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  08008e6c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008e6c  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b1e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002260  00000000  00000000  00031d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279ba  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010542  00000000  00000000  0005d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015cc  00000000  00000000  0006da14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016efe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d70  00000000  00000000  0016f030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008638 	.word	0x08008638

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08008638 	.word	0x08008638

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b0c8      	sub	sp, #288	; 0x120
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int selectedled= 0; //1 e 2
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint32_t timer = HAL_GetTick();
 8000fac:	f000 feae 	bl	8001d0c <HAL_GetTick>
 8000fb0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

	uint32_t timersensornew = timer + 200;
 8000fb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fb8:	33c8      	adds	r3, #200	; 0xc8
 8000fba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t timervoltagenew = timer + 350;
 8000fbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fc2:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8000fc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fe3a 	bl	8001c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f9c9 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fb3d 	bl	8001650 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd6:	f000 fa11 	bl	80013fc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fda:	f000 faed 	bl	80015b8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000fde:	f000 fa85 	bl	80014ec <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch (state){
 8000fe2:	4bd1      	ldr	r3, [pc, #836]	; (8001328 <main+0x388>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f000 812b 	beq.w	8001242 <main+0x2a2>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	f300 81b4 	bgt.w	800135a <main+0x3ba>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <main+0x5c>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d028      	beq.n	800104c <main+0xac>
 8000ffa:	e1ae      	b.n	800135a <main+0x3ba>
	 case 0: //WAITING STATE
		 ;
		 char msg[100]="Board in waiting state - please press the emrgency button\r\n";
 8000ffc:	4bcb      	ldr	r3, [pc, #812]	; (800132c <main+0x38c>)
 8000ffe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001002:	461d      	mov	r5, r3
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001018:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800101c:	2228      	movs	r2, #40	; 0x28
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fc1f 	bl	8005864 <memset>
		 HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 8001026:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8f8 	bl	8000220 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	48bc      	ldr	r0, [pc, #752]	; (8001330 <main+0x390>)
 800103e:	f003 fd9d 	bl	8004b7c <HAL_UART_Transmit>
		 HAL_Delay(500);
 8001042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001046:	f000 fe6d 	bl	8001d24 <HAL_Delay>
		 break;
 800104a:	e186      	b.n	800135a <main+0x3ba>

	 case 1: //RUNNING STATE
		 if(timer>timersensornew){
 800104c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001054:	429a      	cmp	r2, r3
 8001056:	d94b      	bls.n	80010f0 <main+0x150>
		 	//SENSOR
			// Read analog value of sensor
		 	HAL_ADC_Start(&hadc1);
 8001058:	48b6      	ldr	r0, [pc, #728]	; (8001334 <main+0x394>)
 800105a:	f001 fa77 	bl	800254c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800105e:	f04f 31ff 	mov.w	r1, #4294967295
 8001062:	48b4      	ldr	r0, [pc, #720]	; (8001334 <main+0x394>)
 8001064:	f001 fb56 	bl	8002714 <HAL_ADC_PollForConversion>
			float value = HAL_ADC_GetValue(&hadc1) * 0.0008056640625 ;
 8001068:	48b2      	ldr	r0, [pc, #712]	; (8001334 <main+0x394>)
 800106a:	f001 fc59 	bl	8002920 <HAL_ADC_GetValue>
 800106e:	4603      	mov	r3, r0
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa6f 	bl	8000554 <__aeabi_ui2d>
 8001076:	a3a6      	add	r3, pc, #664	; (adr r3, 8001310 <main+0x370>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fae4 	bl	8000648 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fdb6 	bl	8000bf8 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
*/

			//Read digital value of sensor
			GPIO_PinState state;
			state = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f002 fcb1 	bl	8003a00 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			int val;
			if(state == GPIO_PIN_SET){
 80010a4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d103      	bne.n	80010b4 <main+0x114>
				val=1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80010b2:	e002      	b.n	80010ba <main+0x11a>
			}
			else{
				val=0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			}

			//Print of digital value
			sprintf(msg, "State: %d\r\n", val);
 80010ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010c2:	499d      	ldr	r1, [pc, #628]	; (8001338 <main+0x398>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f83f 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 80010ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f8a6 	bl	8000220 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	4893      	ldr	r0, [pc, #588]	; (8001330 <main+0x390>)
 80010e2:	f003 fd4b 	bl	8004b7c <HAL_UART_Transmit>


		 	//Set new step
			timersensornew=timer + 200;
 80010e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010ea:	33c8      	adds	r3, #200	; 0xc8
 80010ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		 }
		 if(timer>timervoltagenew){
 80010f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f240 812d 	bls.w	8001358 <main+0x3b8>
	 		//VOLTAGE
		 	//Read the input voltage
		 	HAL_ADC_Start(&hadc2);
 80010fe:	488f      	ldr	r0, [pc, #572]	; (800133c <main+0x39c>)
 8001100:	f001 fa24 	bl	800254c <HAL_ADC_Start>
		 	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	488c      	ldr	r0, [pc, #560]	; (800133c <main+0x39c>)
 800110a:	f001 fb03 	bl	8002714 <HAL_ADC_PollForConversion>
		 	float value = HAL_ADC_GetValue(&hadc2) * 0.0008056640625;
 800110e:	488b      	ldr	r0, [pc, #556]	; (800133c <main+0x39c>)
 8001110:	f001 fc06 	bl	8002920 <HAL_ADC_GetValue>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa1c 	bl	8000554 <__aeabi_ui2d>
 800111c:	a37c      	add	r3, pc, #496	; (adr r3, 8001310 <main+0x370>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa91 	bl	8000648 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd63 	bl	8000bf8 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		 	char msg[50];
		 	sprintf(msg, "Voltage: %.2f V\r\n", value);
 8001138:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	1d38      	adds	r0, r7, #4
 8001146:	497e      	ldr	r1, [pc, #504]	; (8001340 <main+0x3a0>)
 8001148:	f004 fffe 	bl	8006148 <siprintf>
		 	HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f866 	bl	8000220 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	1d39      	adds	r1, r7, #4
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	4874      	ldr	r0, [pc, #464]	; (8001330 <main+0x390>)
 8001160:	f003 fd0c 	bl	8004b7c <HAL_UART_Transmit>

		 	//Check the value of led
		 	if(value>2.7){
 8001164:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001168:	f7ff fa16 	bl	8000598 <__aeabi_f2d>
 800116c:	a36a      	add	r3, pc, #424	; (adr r3, 8001318 <main+0x378>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fcf9 	bl	8000b68 <__aeabi_dcmpgt>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <main+0x1ea>
		 		//Danger state led 1
		 		selectedled=1;
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		 		state=2;
 8001182:	4b69      	ldr	r3, [pc, #420]	; (8001328 <main+0x388>)
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e021      	b.n	80011ce <main+0x22e>
		 	}else{
		 		//Reset of led 1
		 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 fc4c 	bl	8003a30 <HAL_GPIO_WritePin>

		 		//Print info of led 1
		 		char msg[100]="led 1 off\r\n";
 8001198:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <main+0x3a4>)
 800119a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119e:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011a8:	2258      	movs	r2, #88	; 0x58
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fb59 	bl	8005864 <memset>
		 		HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 80011b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f832 	bl	8000220 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	4859      	ldr	r0, [pc, #356]	; (8001330 <main+0x390>)
 80011ca:	f003 fcd7 	bl	8004b7c <HAL_UART_Transmit>
		 	}if(value<1.8){
 80011ce:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80011d2:	f7ff f9e1 	bl	8000598 <__aeabi_f2d>
 80011d6:	a352      	add	r3, pc, #328	; (adr r3, 8001320 <main+0x380>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fca6 	bl	8000b2c <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <main+0x254>
		 		selectedled=2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		 		state=2;
 80011ec:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <main+0x388>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e01f      	b.n	8001234 <main+0x294>
		 	}
		 	else{
		 		//Reset of led 2
		 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	4853      	ldr	r0, [pc, #332]	; (8001348 <main+0x3a8>)
 80011fa:	f002 fc19 	bl	8003a30 <HAL_GPIO_WritePin>

		 		//Print info of led 2
		 		char msg[100]="led 2 off\r\n";
 80011fe:	4a53      	ldr	r2, [pc, #332]	; (800134c <main+0x3ac>)
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	ca07      	ldmia	r2, {r0, r1, r2}
 8001206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800120a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800120e:	2258      	movs	r2, #88	; 0x58
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fb26 	bl	8005864 <memset>
		 		HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 8001218:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ffff 	bl	8000220 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <main+0x390>)
 8001230:	f003 fca4 	bl	8004b7c <HAL_UART_Transmit>
		 	}

		 	//Set new step
		 	timervoltagenew=timer + 350;
 8001234:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001238:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800123c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		 }
		 break;
 8001240:	e08a      	b.n	8001358 <main+0x3b8>

	 case 2: //DANGER STATE
		 if(selectedled==1){
 8001242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12b      	bne.n	80012a2 <main+0x302>
			 //Set of led 1
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f002 fbec 	bl	8003a30 <HAL_GPIO_WritePin>

			 //Print info of led 1
			 char msg[100]="Danger state sovratensione, led 1 acceso\r\n";
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <main+0x3b0>)
 800125a:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	c403      	stmia	r4!, {r0, r1}
 800126e:	8022      	strh	r2, [r4, #0]
 8001270:	3402      	adds	r4, #2
 8001272:	0c13      	lsrs	r3, r2, #16
 8001274:	7023      	strb	r3, [r4, #0]
 8001276:	f107 03c7 	add.w	r3, r7, #199	; 0xc7
 800127a:	2239      	movs	r2, #57	; 0x39
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 faf0 	bl	8005864 <memset>
			 HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 8001284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffc9 	bl	8000220 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	4825      	ldr	r0, [pc, #148]	; (8001330 <main+0x390>)
 800129c:	f003 fc6e 	bl	8004b7c <HAL_UART_Transmit>
 80012a0:	e02c      	b.n	80012fc <main+0x35c>
		 }
		 else if(selectedled==2){
 80012a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d128      	bne.n	80012fc <main+0x35c>
			 //Set of led 2
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	4826      	ldr	r0, [pc, #152]	; (8001348 <main+0x3a8>)
 80012b0:	f002 fbbe 	bl	8003a30 <HAL_GPIO_WritePin>

			 //Print info of led 2
			 char msg[100]="Danger state sottotensione, led 2 acceso\r\n";
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <main+0x3b4>)
 80012b6:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80012ba:	461d      	mov	r5, r3
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c8:	c403      	stmia	r4!, {r0, r1}
 80012ca:	8022      	strh	r2, [r4, #0]
 80012cc:	3402      	adds	r4, #2
 80012ce:	0c13      	lsrs	r3, r2, #16
 80012d0:	7023      	strb	r3, [r4, #0]
 80012d2:	f107 03c7 	add.w	r3, r7, #199	; 0xc7
 80012d6:	2239      	movs	r2, #57	; 0x39
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fac2 	bl	8005864 <memset>
			 HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 80012e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff9b 	bl	8000220 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <main+0x390>)
 80012f8:	f003 fc40 	bl	8004b7c <HAL_UART_Transmit>
		}
		 selectedled=0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		 state=1;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <main+0x388>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
		break;
 8001308:	e027      	b.n	800135a <main+0x3ba>
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	66666666 	.word	0x66666666
 8001314:	3f4a6666 	.word	0x3f4a6666
 8001318:	9999999a 	.word	0x9999999a
 800131c:	40059999 	.word	0x40059999
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	3ffccccc 	.word	0x3ffccccc
 8001328:	20000000 	.word	0x20000000
 800132c:	08008670 	.word	0x08008670
 8001330:	200002d4 	.word	0x200002d4
 8001334:	200001fc 	.word	0x200001fc
 8001338:	08008650 	.word	0x08008650
 800133c:	20000268 	.word	0x20000268
 8001340:	0800865c 	.word	0x0800865c
 8001344:	080086d4 	.word	0x080086d4
 8001348:	48000400 	.word	0x48000400
 800134c:	08008738 	.word	0x08008738
 8001350:	0800879c 	.word	0x0800879c
 8001354:	08008800 	.word	0x08008800
		 break;
 8001358:	bf00      	nop
	 }
	timer = HAL_GetTick();
 800135a:	f000 fcd7 	bl	8001d0c <HAL_GetTick>
 800135e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	 switch (state){
 8001362:	e63e      	b.n	8000fe2 <main+0x42>

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	; 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2238      	movs	r2, #56	; 0x38
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fa76 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001386:	2000      	movs	r0, #0
 8001388:	f002 fb82 	bl	8003a90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013a2:	2304      	movs	r3, #4
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013a6:	2355      	movs	r3, #85	; 0x55
 80013a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fc0c 	bl	8003bd8 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013c6:	f000 f9e3 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2303      	movs	r3, #3
 80013d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2104      	movs	r1, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 ff10 	bl	8004208 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013ee:	f000 f9cf 	bl	8001790 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2220      	movs	r2, #32
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fa25 	bl	8005864 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800141c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001424:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001444:	2204      	movs	r2, #4
 8001446:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001456:	2201      	movs	r2, #1
 8001458:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_ADC1_Init+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001484:	4817      	ldr	r0, [pc, #92]	; (80014e4 <MX_ADC1_Init+0xe8>)
 8001486:	f000 fe9f 	bl	80021c8 <HAL_ADC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001490:	f000 f97e 	bl	8001790 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_ADC1_Init+0xe8>)
 80014a0:	f001 ff14 	bl	80032cc <HAL_ADCEx_MultiModeConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014aa:	f000 f971 	bl	8001790 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_ADC1_Init+0xec>)
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b2:	2306      	movs	r3, #6
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ba:	237f      	movs	r3, #127	; 0x7f
 80014bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014be:	2304      	movs	r3, #4
 80014c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_ADC1_Init+0xe8>)
 80014cc:	f001 fa36 	bl	800293c <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014d6:	f000 f95b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	; 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001fc 	.word	0x200001fc
 80014e8:	04300002 	.word	0x04300002

080014ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2220      	movs	r2, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 f9b3 	bl	8005864 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <MX_ADC2_Init+0xc4>)
 8001502:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001506:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800150a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <MX_ADC2_Init+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <MX_ADC2_Init+0xc0>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001526:	2204      	movs	r2, #4
 8001528:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <MX_ADC2_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001538:	2201      	movs	r2, #1
 800153a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_ADC2_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_ADC2_Init+0xc0>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_ADC2_Init+0xc0>)
 800155a:	2200      	movs	r2, #0
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001568:	f000 fe2e 	bl	80021c8 <HAL_ADC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001572:	f000 f90d 	bl	8001790 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_ADC2_Init+0xc8>)
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800157a:	2306      	movs	r3, #6
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001582:	237f      	movs	r3, #127	; 0x7f
 8001584:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001586:	2304      	movs	r3, #4
 8001588:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_ADC2_Init+0xc0>)
 8001594:	f001 f9d2 	bl	800293c <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800159e:	f000 f8f7 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000268 	.word	0x20000268
 80015b0:	50000100 	.word	0x50000100
 80015b4:	08600004 	.word	0x08600004

080015b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <MX_USART2_UART_Init+0x94>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART2_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_USART2_UART_Init+0x90>)
 8001602:	f003 fa6b 	bl	8004adc <HAL_UART_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 f8c0 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001610:	2100      	movs	r1, #0
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_USART2_UART_Init+0x90>)
 8001614:	f004 f832 	bl	800567c <HAL_UARTEx_SetTxFifoThreshold>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800161e:	f000 f8b7 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001622:	2100      	movs	r1, #0
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <MX_USART2_UART_Init+0x90>)
 8001626:	f004 f867 	bl	80056f8 <HAL_UARTEx_SetRxFifoThreshold>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001630:	f000 f8ae 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_USART2_UART_Init+0x90>)
 8001636:	f003 ffe8 	bl	800560a <HAL_UARTEx_DisableFifoMode>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 f8a6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200002d4 	.word	0x200002d4
 800164c:	40004400 	.word	0x40004400

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <MX_GPIO_Init+0x104>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <MX_GPIO_Init+0x104>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <MX_GPIO_Init+0x104>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <MX_GPIO_Init+0x104>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <MX_GPIO_Init+0x104>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <MX_GPIO_Init+0x104>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <MX_GPIO_Init+0x104>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <MX_GPIO_Init+0x104>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_GPIO_Init+0x104>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f002 f9ba 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <MX_GPIO_Init+0x108>)
 80016c2:	f002 f9b5 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <MX_GPIO_Init+0x10c>)
 80016de:	f002 f80d 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f001 ffff 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f001 ffef 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171e:	2320      	movs	r3, #32
 8001720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4619      	mov	r1, r3
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <MX_GPIO_Init+0x108>)
 8001736:	f001 ffe1 	bl	80036fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2028      	movs	r0, #40	; 0x28
 8001740:	f001 ffa7 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001744:	2028      	movs	r0, #40	; 0x28
 8001746:	f001 ffbe 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800

08001760 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	if(state!=0)state=0;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_GPIO_EXTI_Callback+0x2c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_EXTI_Callback+0x1a>
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
	else state=1;
}
 8001778:	e002      	b.n	8001780 <HAL_GPIO_EXTI_Callback+0x20>
	else state=1;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_GPIO_EXTI_Callback+0x2c>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	20000000 	.word	0x20000000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_MspInit+0x44>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_MspInit+0x44>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_MspInit+0x44>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x44>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x44>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x44>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0a0      	sub	sp, #128	; 0x80
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	2254      	movs	r2, #84	; 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f004 f82d 	bl	8005864 <memset>
  if(hadc->Instance==ADC1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001812:	d13e      	bne.n	8001892 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001818:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800181a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800181e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	4618      	mov	r0, r3
 8001826:	f002 ff0b 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001830:	f7ff ffae 	bl	8001790 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a39      	ldr	r2, [pc, #228]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 800183c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10b      	bne.n	800185e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_ADC_MspInit+0x140>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <HAL_ADC_MspInit+0x140>)
 800184c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_ADC_MspInit+0x140>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_ADC_MspInit+0x140>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a30      	ldr	r2, [pc, #192]	; (8001924 <HAL_ADC_MspInit+0x140>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_ADC_MspInit+0x140>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001876:	2301      	movs	r3, #1
 8001878:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187a:	2303      	movs	r3, #3
 800187c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f001 ff36 	bl	80036fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001890:	e042      	b.n	8001918 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_ADC_MspInit+0x144>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d13d      	bne.n	8001918 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800189c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fec7 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80018b8:	f7ff ff6a 	bl	8001790 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 80018c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_ADC_MspInit+0x13c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10b      	bne.n	80018e6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_ADC_MspInit+0x140>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018fe:	2302      	movs	r3, #2
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001902:	2303      	movs	r3, #3
 8001904:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f001 fef2 	bl	80036fc <HAL_GPIO_Init>
}
 8001918:	bf00      	nop
 800191a:	3780      	adds	r7, #128	; 0x80
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000364 	.word	0x20000364
 8001924:	40021000 	.word	0x40021000
 8001928:	50000100 	.word	0x50000100

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b09e      	sub	sp, #120	; 0x78
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2254      	movs	r2, #84	; 0x54
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f003 ff89 	bl	8005864 <memset>
  if(huart->Instance==USART2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_UART_MspInit+0xa8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d136      	bne.n	80019ca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fe69 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001974:	f7ff ff0c 	bl	8001790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019a8:	230c      	movs	r3, #12
 80019aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b8:	2307      	movs	r3, #7
 80019ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 fe99 	bl	80036fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3778      	adds	r7, #120	; 0x78
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f95e 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a38:	f002 f812 	bl	8003a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5a:	f003 fed9 	bl	8005810 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
	return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
	}

return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
	}
	return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f003 fe3e 	bl	8005810 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20020000 	.word	0x20020000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	20000368 	.word	0x20000368
 8001bc8:	20000380 	.word	0x20000380

08001bcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c1a:	f7ff ffd7 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f003 fdfd 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c22:	f7ff f9bd 	bl	8000fa0 <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
  ldr   r0, =_estack
 8001c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c34:	08008c8c 	.word	0x08008c8c
  ldr r2, =_sbss
 8001c38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c3c:	20000380 	.word	0x20000380

08001c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_2_IRQHandler>

08001c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f001 fd15 	bl	800367c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f80e 	bl	8001c74 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	e001      	b.n	8001c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c64:	f7ff fd9a 	bl	800179c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c68:	79fb      	ldrb	r3, [r7, #7]

}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_InitTick+0x68>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d022      	beq.n	8001cce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_InitTick+0x6c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_InitTick+0x68>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fd20 	bl	80036e2 <HAL_SYSTICK_Config>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	d809      	bhi.n	8001cc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb6:	f001 fcec 	bl	8003692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_InitTick+0x70>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e004      	b.n	8001cd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e001      	b.n	8001cd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	20000004 	.word	0x20000004
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x20>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_IncTick+0x1c>)
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	2000036c 	.word	0x2000036c
 8001d08:	2000000c 	.word	0x2000000c

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	2000036c 	.word	0x2000036c

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d004      	beq.n	8001d48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_Delay+0x40>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d48:	bf00      	nop
 8001d4a:	f7ff ffdf 	bl	8001d0c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d8f7      	bhi.n	8001d4a <HAL_Delay+0x26>
  {
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000000c 	.word	0x2000000c

08001d68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3360      	adds	r3, #96	; 0x60
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <LL_ADC_SetOffset+0x44>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	03fff000 	.word	0x03fff000

08001e18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3360      	adds	r3, #96	; 0x60
 8001e26:	461a      	mov	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b087      	sub	sp, #28
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3360      	adds	r3, #96	; 0x60
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	615a      	str	r2, [r3, #20]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3330      	adds	r3, #48	; 0x30
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	211f      	movs	r1, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0e9b      	lsrs	r3, r3, #26
 8001f6a:	f003 011f 	and.w	r1, r3, #31
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3314      	adds	r3, #20
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	0e5b      	lsrs	r3, r3, #25
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	0d1b      	lsrs	r3, r3, #20
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2107      	movs	r1, #7
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0d1b      	lsrs	r3, r3, #20
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d10a      	bne.n	800200a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002008:	e00a      	b.n	8002020 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	407f0000 	.word	0x407f0000

08002030 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6093      	str	r3, [r2, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800209c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <LL_ADC_IsEnabled+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_ADC_IsEnabled+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002162:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d101      	bne.n	8002192 <LL_ADC_REG_IsConversionOngoing+0x18>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1af      	b.n	8002542 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff faf7 	bl	80017e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff3f 	bl	800208c <LL_ADC_IsDeepPowerDownEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff25 	bl	8002068 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff5a 	bl	80020dc <LL_ADC_IsInternalRegulatorEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff3e 	bl	80020b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002238:	4b9f      	ldr	r3, [pc, #636]	; (80024b8 <HAL_ADC_Init+0x2f0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	4a9f      	ldr	r2, [pc, #636]	; (80024bc <HAL_ADC_Init+0x2f4>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800224c:	e002      	b.n	8002254 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff3c 	bl	80020dc <LL_ADC_IsInternalRegulatorEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff75 	bl	800217a <LL_ADC_REG_IsConversionOngoing>
 8002290:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 8148 	bne.w	8002530 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8144 	bne.w	8002530 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022b0:	f043 0202 	orr.w	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff35 	bl	800212c <LL_ADC_IsEnabled>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d141      	bne.n	800234c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d0:	d004      	beq.n	80022dc <HAL_ADC_Init+0x114>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <HAL_ADC_Init+0x2f8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d10f      	bne.n	80022fc <HAL_ADC_Init+0x134>
 80022dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022e0:	f7ff ff24 	bl	800212c <LL_ADC_IsEnabled>
 80022e4:	4604      	mov	r4, r0
 80022e6:	4876      	ldr	r0, [pc, #472]	; (80024c0 <HAL_ADC_Init+0x2f8>)
 80022e8:	f7ff ff20 	bl	800212c <LL_ADC_IsEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4323      	orrs	r3, r4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e012      	b.n	8002322 <HAL_ADC_Init+0x15a>
 80022fc:	4871      	ldr	r0, [pc, #452]	; (80024c4 <HAL_ADC_Init+0x2fc>)
 80022fe:	f7ff ff15 	bl	800212c <LL_ADC_IsEnabled>
 8002302:	4604      	mov	r4, r0
 8002304:	4870      	ldr	r0, [pc, #448]	; (80024c8 <HAL_ADC_Init+0x300>)
 8002306:	f7ff ff11 	bl	800212c <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	431c      	orrs	r4, r3
 800230e:	486f      	ldr	r0, [pc, #444]	; (80024cc <HAL_ADC_Init+0x304>)
 8002310:	f7ff ff0c 	bl	800212c <LL_ADC_IsEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	4323      	orrs	r3, r4
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d012      	beq.n	800234c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232e:	d004      	beq.n	800233a <HAL_ADC_Init+0x172>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a62      	ldr	r2, [pc, #392]	; (80024c0 <HAL_ADC_Init+0x2f8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x176>
 800233a:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_ADC_Init+0x308>)
 800233c:	e000      	b.n	8002340 <HAL_ADC_Init+0x178>
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_ADC_Init+0x30c>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f7ff fd0e 	bl	8001d68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7f5b      	ldrb	r3, [r3, #29]
 8002350:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002356:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800235c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002362:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	045b      	lsls	r3, r3, #17
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_ADC_Init+0x310>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fed1 	bl	800217a <LL_ADC_REG_IsConversionOngoing>
 80023d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fede 	bl	80021a0 <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d17f      	bne.n	80024ec <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d17c      	bne.n	80024ec <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002432:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800243c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6911      	ldr	r1, [r2, #16]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002452:	e013      	b.n	800247c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002462:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002474:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002478:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002482:	2b01      	cmp	r3, #1
 8002484:	d12a      	bne.n	80024dc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024a8:	430a      	orrs	r2, r1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e019      	b.n	80024ec <HAL_ADC_Init+0x324>
 80024b8:	20000004 	.word	0x20000004
 80024bc:	053e2d63 	.word	0x053e2d63
 80024c0:	50000100 	.word	0x50000100
 80024c4:	50000400 	.word	0x50000400
 80024c8:	50000500 	.word	0x50000500
 80024cc:	50000600 	.word	0x50000600
 80024d0:	50000300 	.word	0x50000300
 80024d4:	50000700 	.word	0x50000700
 80024d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10c      	bne.n	800250e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f023 010f 	bic.w	r1, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
 800250c:	e007      	b.n	800251e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 020f 	bic.w	r2, r2, #15
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	65da      	str	r2, [r3, #92]	; 0x5c
 800252e:	e007      	b.n	8002540 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002540:	7ffb      	ldrb	r3, [r7, #31]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop

0800254c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255c:	d004      	beq.n	8002568 <HAL_ADC_Start+0x1c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a67      	ldr	r2, [pc, #412]	; (8002700 <HAL_ADC_Start+0x1b4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_ADC_Start+0x20>
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_ADC_Start+0x1b8>)
 800256a:	e000      	b.n	800256e <HAL_ADC_Start+0x22>
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_ADC_Start+0x1bc>)
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fd5e 	bl	8002030 <LL_ADC_GetMultimode>
 8002574:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fdfd 	bl	800217a <LL_ADC_REG_IsConversionOngoing>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80b4 	bne.w	80026f0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Start+0x4a>
 8002592:	2302      	movs	r3, #2
 8002594:	e0af      	b.n	80026f6 <HAL_ADC_Start+0x1aa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fe0c 	bl	80031bc <ADC_Enable>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 809b 	bne.w	80026e6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4d      	ldr	r2, [pc, #308]	; (8002700 <HAL_ADC_Start+0x1b4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_ADC_Start+0x96>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_ADC_Start+0x1c0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d002      	beq.n	80025de <HAL_ADC_Start+0x92>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_Start+0x9a>
 80025de:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_ADC_Start+0x1c4>)
 80025e0:	e001      	b.n	80025e6 <HAL_ADC_Start+0x9a>
 80025e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d106      	bne.n	800261c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	f023 0206 	bic.w	r2, r3, #6
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
 800261a:	e002      	b.n	8002622 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	221c      	movs	r2, #28
 8002628:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_ADC_Start+0x1b4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_ADC_Start+0x104>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a32      	ldr	r2, [pc, #200]	; (800270c <HAL_ADC_Start+0x1c0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d002      	beq.n	800264c <HAL_ADC_Start+0x100>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e003      	b.n	8002654 <HAL_ADC_Start+0x108>
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_ADC_Start+0x1c4>)
 800264e:	e001      	b.n	8002654 <HAL_ADC_Start+0x108>
 8002650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4293      	cmp	r3, r2
 800265a:	d008      	beq.n	800266e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d002      	beq.n	800266e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b09      	cmp	r3, #9
 800266c:	d114      	bne.n	8002698 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002684:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fd5e 	bl	8002152 <LL_ADC_REG_StartConversion>
 8002696:	e02d      	b.n	80026f4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_ADC_Start+0x1b4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_ADC_Start+0x176>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_ADC_Start+0x1c0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d002      	beq.n	80026be <HAL_ADC_Start+0x172>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_Start+0x17a>
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_ADC_Start+0x1c4>)
 80026c0:	e001      	b.n	80026c6 <HAL_ADC_Start+0x17a>
 80026c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00f      	beq.n	80026f4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e4:	e006      	b.n	80026f4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
 80026f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	50000100 	.word	0x50000100
 8002704:	50000300 	.word	0x50000300
 8002708:	50000700 	.word	0x50000700
 800270c:	50000500 	.word	0x50000500
 8002710:	50000400 	.word	0x50000400

08002714 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002726:	d004      	beq.n	8002732 <HAL_ADC_PollForConversion+0x1e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_ADC_PollForConversion+0x1f8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_ADC_PollForConversion+0x22>
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_ADC_PollForConversion+0x1fc>)
 8002734:	e000      	b.n	8002738 <HAL_ADC_PollForConversion+0x24>
 8002736:	4b77      	ldr	r3, [pc, #476]	; (8002914 <HAL_ADC_PollForConversion+0x200>)
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fc79 	bl	8002030 <LL_ADC_GetMultimode>
 800273e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d102      	bne.n	800274e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002748:	2308      	movs	r3, #8
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e037      	b.n	80027be <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d002      	beq.n	8002760 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b09      	cmp	r3, #9
 800275e:	d111      	bne.n	8002784 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0c1      	b.n	8002902 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800277e:	2304      	movs	r3, #4
 8002780:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002782:	e01c      	b.n	80027be <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278c:	d004      	beq.n	8002798 <HAL_ADC_PollForConversion+0x84>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5e      	ldr	r2, [pc, #376]	; (800290c <HAL_ADC_PollForConversion+0x1f8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_ADC_PollForConversion+0x88>
 8002798:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_ADC_PollForConversion+0x1fc>)
 800279a:	e000      	b.n	800279e <HAL_ADC_PollForConversion+0x8a>
 800279c:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_ADC_PollForConversion+0x200>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc54 	bl	800204c <LL_ADC_GetMultiDMATransfer>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0a3      	b.n	8002902 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027ba:	2304      	movs	r3, #4
 80027bc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027be:	f7ff faa5 	bl	8001d0c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027c4:	e021      	b.n	800280a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d01d      	beq.n	800280a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027ce:	f7ff fa9d 	bl	8001d0c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <HAL_ADC_PollForConversion+0xd0>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d112      	bne.n	800280a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10b      	bne.n	800280a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e07b      	b.n	8002902 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0d6      	beq.n	80027c6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fb6f 	bl	8001f0c <LL_ADC_REG_IsTriggerSourceSWStart>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01c      	beq.n	800286e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7f5b      	ldrb	r3, [r3, #29]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d118      	bne.n	800286e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b08      	cmp	r3, #8
 8002848:	d111      	bne.n	800286e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <HAL_ADC_PollForConversion+0x1f8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_ADC_PollForConversion+0x178>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <HAL_ADC_PollForConversion+0x204>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d002      	beq.n	8002888 <HAL_ADC_PollForConversion+0x174>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e003      	b.n	8002890 <HAL_ADC_PollForConversion+0x17c>
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_ADC_PollForConversion+0x208>)
 800288a:	e001      	b.n	8002890 <HAL_ADC_PollForConversion+0x17c>
 800288c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4293      	cmp	r3, r2
 8002896:	d008      	beq.n	80028aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d002      	beq.n	80028aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d104      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e014      	b.n	80028de <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_ADC_PollForConversion+0x1f8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_ADC_PollForConversion+0x1be>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a15      	ldr	r2, [pc, #84]	; (8002918 <HAL_ADC_PollForConversion+0x204>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d002      	beq.n	80028ce <HAL_ADC_PollForConversion+0x1ba>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_PollForConversion+0x1c2>
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_ADC_PollForConversion+0x208>)
 80028d0:	e001      	b.n	80028d6 <HAL_ADC_PollForConversion+0x1c2>
 80028d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d104      	bne.n	80028ee <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2208      	movs	r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e008      	b.n	8002900 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	220c      	movs	r2, #12
 80028fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	50000100 	.word	0x50000100
 8002910:	50000300 	.word	0x50000300
 8002914:	50000700 	.word	0x50000700
 8002918:	50000500 	.word	0x50000500
 800291c:	50000400 	.word	0x50000400

08002920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0b6      	sub	sp, #216	; 0xd8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002956:	2b01      	cmp	r3, #1
 8002958:	d102      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x24>
 800295a:	2302      	movs	r3, #2
 800295c:	f000 bc13 	b.w	8003186 <HAL_ADC_ConfigChannel+0x84a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc04 	bl	800217a <LL_ADC_REG_IsConversionOngoing>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 83f3 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff fad3 	bl	8001f32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fbf2 	bl	800217a <LL_ADC_REG_IsConversionOngoing>
 8002996:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fbfe 	bl	80021a0 <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 81d9 	bne.w	8002d64 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 81d4 	bne.w	8002d64 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c4:	d10f      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7ff fada 	bl	8001f8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fa81 	bl	8001ee6 <LL_ADC_SetSamplingTimeCommonConfig>
 80029e4:	e00e      	b.n	8002a04 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7ff fac9 	bl	8001f8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fa71 	bl	8001ee6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	08db      	lsrs	r3, r3, #3
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d022      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6919      	ldr	r1, [r3, #16]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a36:	f7ff f9cb 	bl	8001dd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff fa17 	bl	8001e7a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	7f1b      	ldrb	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d102      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x126>
 8002a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x128>
 8002a62:	2300      	movs	r3, #0
 8002a64:	461a      	mov	r2, r3
 8002a66:	f7ff fa23 	bl	8001eb0 <LL_ADC_SetOffsetSaturation>
 8002a6a:	e17b      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f9d0 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x15c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f9c5 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	e01e      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x19a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f9ba 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e004      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x1b2>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1e4>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e004      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f989 	bl	8001e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f96d 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x222>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f962 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x260>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f957 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x278>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	e018      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x2aa>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e004      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d106      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f926 	bl	8001e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f90a 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x2e8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f8ff 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	e01e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x326>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f8f4 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x33e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	e016      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x36c>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f8c5 	bl	8001e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f8a9 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x3aa>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f89e 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	e017      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x3da>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2103      	movs	r1, #3
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f893 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x3f2>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	e011      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x416>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d106      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f870 	bl	8001e44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9df 	bl	800212c <LL_ADC_IsEnabled>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 813d 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7ff f92c 	bl	8001fe0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4aa2      	ldr	r2, [pc, #648]	; (8003018 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	f040 812e 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x480>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e019      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x4b4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2b09      	cmp	r3, #9
 8002de8:	bf94      	ite	ls
 8002dea:	2301      	movls	r3, #1
 8002dec:	2300      	movhi	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d079      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x4d4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	3301      	adds	r3, #1
 8002e08:	069b      	lsls	r3, r3, #26
 8002e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e0e:	e015      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x500>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	069b      	lsls	r3, r3, #26
 8002e38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x520>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	e017      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x550>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	ea42 0103 	orr.w	r1, r2, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x576>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	051b      	lsls	r3, r3, #20
 8002eb0:	e018      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x5a8>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e003      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	e07e      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x5c8>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f02:	e015      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x5f4>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	069b      	lsls	r3, r3, #26
 8002f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x614>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	e017      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x644>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e003      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	ea42 0103 	orr.w	r1, r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x670>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3b1e      	subs	r3, #30
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002faa:	e01b      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x6a8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	613b      	str	r3, [r7, #16]
  return result;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 021f 	and.w	r2, r3, #31
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	051b      	lsls	r3, r3, #20
 8002fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	6892      	ldr	r2, [r2, #8]
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fe ffcd 	bl	8001f8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_ADC_ConfigChannel+0x6e0>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80be 	beq.w	800317a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003006:	d004      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x6d6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_ADC_ConfigChannel+0x6e4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x6ec>
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <HAL_ADC_ConfigChannel+0x6e8>)
 8003014:	e009      	b.n	800302a <HAL_ADC_ConfigChannel+0x6ee>
 8003016:	bf00      	nop
 8003018:	407f0000 	.word	0x407f0000
 800301c:	80080000 	.word	0x80080000
 8003020:	50000100 	.word	0x50000100
 8003024:	50000300 	.word	0x50000300
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_ADC_ConfigChannel+0x854>)
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fec2 	bl	8001db4 <LL_ADC_GetCommonPathInternalCh>
 8003030:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_ADC_ConfigChannel+0x858>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_ADC_ConfigChannel+0x70c>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_ADC_ConfigChannel+0x85c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d13a      	bne.n	80030be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800304c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d134      	bne.n	80030be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305c:	d005      	beq.n	800306a <HAL_ADC_ConfigChannel+0x72e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_ADC_ConfigChannel+0x860>)
 8003064:	4293      	cmp	r3, r2
 8003066:	f040 8085 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003072:	d004      	beq.n	800307e <HAL_ADC_ConfigChannel+0x742>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a49      	ldr	r2, [pc, #292]	; (80031a0 <HAL_ADC_ConfigChannel+0x864>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x746>
 800307e:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <HAL_ADC_ConfigChannel+0x868>)
 8003080:	e000      	b.n	8003084 <HAL_ADC_ConfigChannel+0x748>
 8003082:	4a43      	ldr	r2, [pc, #268]	; (8003190 <HAL_ADC_ConfigChannel+0x854>)
 8003084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fe fe7d 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003094:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_ADC_ConfigChannel+0x86c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	4a44      	ldr	r2, [pc, #272]	; (80031ac <HAL_ADC_ConfigChannel+0x870>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030bc:	e05a      	b.n	8003174 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <HAL_ADC_ConfigChannel+0x874>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d125      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x7d8>
 80030c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11f      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <HAL_ADC_ConfigChannel+0x864>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d104      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x7ac>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_ADC_ConfigChannel+0x878>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d047      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x7c0>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_ADC_ConfigChannel+0x864>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x7c4>
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_ADC_ConfigChannel+0x868>)
 80030fe:	e000      	b.n	8003102 <HAL_ADC_ConfigChannel+0x7c6>
 8003100:	4a23      	ldr	r2, [pc, #140]	; (8003190 <HAL_ADC_ConfigChannel+0x854>)
 8003102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7fe fe3e 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003112:	e031      	b.n	8003178 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_ADC_ConfigChannel+0x87c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12d      	bne.n	800317a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800311e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d127      	bne.n	800317a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_ADC_ConfigChannel+0x864>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313c:	d004      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x80c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_ADC_ConfigChannel+0x864>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x810>
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_ADC_ConfigChannel+0x868>)
 800314a:	e000      	b.n	800314e <HAL_ADC_ConfigChannel+0x812>
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_ADC_ConfigChannel+0x854>)
 800314e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe fe18 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
 800315e:	e00c      	b.n	800317a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003172:	e002      	b.n	800317a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003174:	bf00      	nop
 8003176:	e000      	b.n	800317a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003178:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003182:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003186:	4618      	mov	r0, r3
 8003188:	37d8      	adds	r7, #216	; 0xd8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	50000700 	.word	0x50000700
 8003194:	c3210000 	.word	0xc3210000
 8003198:	90c00010 	.word	0x90c00010
 800319c:	50000600 	.word	0x50000600
 80031a0:	50000100 	.word	0x50000100
 80031a4:	50000300 	.word	0x50000300
 80031a8:	20000004 	.word	0x20000004
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	c7520000 	.word	0xc7520000
 80031b4:	50000500 	.word	0x50000500
 80031b8:	cb840000 	.word	0xcb840000

080031bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe ffaf 	bl	800212c <LL_ADC_IsEnabled>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d14d      	bne.n	8003270 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <ADC_Enable+0xc0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	f043 0210 	orr.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e039      	b.n	8003272 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe ff7e 	bl	8002104 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003208:	f7fe fd80 	bl	8001d0c <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800320e:	e028      	b.n	8003262 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe ff89 	bl	800212c <LL_ADC_IsEnabled>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe ff6d 	bl	8002104 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800322a:	f7fe fd6f 	bl	8001d0c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d914      	bls.n	8003262 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d00d      	beq.n	8003262 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e007      	b.n	8003272 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d1cf      	bne.n	8003210 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	8000003f 	.word	0x8000003f

08003280 <LL_ADC_IsEnabled>:
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <LL_ADC_IsEnabled+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_ADC_IsEnabled+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d101      	bne.n	80032be <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b0a1      	sub	sp, #132	; 0x84
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0e7      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032f2:	2300      	movs	r3, #0
 80032f4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032f6:	2300      	movs	r3, #0
 80032f8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003302:	d102      	bne.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	e009      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d102      	bne.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003314:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	e001      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0be      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ffb1 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 8003344:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ffab 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 80a0 	bne.w	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 809c 	bne.w	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003368:	d004      	beq.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003374:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003376:	e000      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800337a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d04b      	beq.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003396:	035b      	lsls	r3, r3, #13
 8003398:	430b      	orrs	r3, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a8:	d004      	beq.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a45      	ldr	r2, [pc, #276]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10f      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80033b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033b8:	f7ff ff62 	bl	8003280 <LL_ADC_IsEnabled>
 80033bc:	4604      	mov	r4, r0
 80033be:	4841      	ldr	r0, [pc, #260]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c0:	f7ff ff5e 	bl	8003280 <LL_ADC_IsEnabled>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4323      	orrs	r3, r4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e012      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033d4:	483c      	ldr	r0, [pc, #240]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033d6:	f7ff ff53 	bl	8003280 <LL_ADC_IsEnabled>
 80033da:	4604      	mov	r4, r0
 80033dc:	483b      	ldr	r0, [pc, #236]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033de:	f7ff ff4f 	bl	8003280 <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	431c      	orrs	r4, r3
 80033e6:	483c      	ldr	r0, [pc, #240]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033e8:	f7ff ff4a 	bl	8003280 <LL_ADC_IsEnabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4323      	orrs	r3, r4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d056      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003406:	f023 030f 	bic.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6892      	ldr	r2, [r2, #8]
 8003412:	430a      	orrs	r2, r1
 8003414:	431a      	orrs	r2, r3
 8003416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003418:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800341a:	e047      	b.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003426:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003430:	d004      	beq.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d10f      	bne.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800343c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003440:	f7ff ff1e 	bl	8003280 <LL_ADC_IsEnabled>
 8003444:	4604      	mov	r4, r0
 8003446:	481f      	ldr	r0, [pc, #124]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003448:	f7ff ff1a 	bl	8003280 <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	4323      	orrs	r3, r4
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e012      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800345c:	481a      	ldr	r0, [pc, #104]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800345e:	f7ff ff0f 	bl	8003280 <LL_ADC_IsEnabled>
 8003462:	4604      	mov	r4, r0
 8003464:	4819      	ldr	r0, [pc, #100]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003466:	f7ff ff0b 	bl	8003280 <LL_ADC_IsEnabled>
 800346a:	4603      	mov	r3, r0
 800346c:	431c      	orrs	r4, r3
 800346e:	481a      	ldr	r0, [pc, #104]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003470:	f7ff ff06 	bl	8003280 <LL_ADC_IsEnabled>
 8003474:	4603      	mov	r3, r0
 8003476:	4323      	orrs	r3, r4
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800348e:	f023 030f 	bic.w	r3, r3, #15
 8003492:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003494:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003496:	e009      	b.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034aa:	e000      	b.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3784      	adds	r7, #132	; 0x84
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	bf00      	nop
 80034c4:	50000100 	.word	0x50000100
 80034c8:	50000400 	.word	0x50000400
 80034cc:	50000500 	.word	0x50000500
 80034d0:	50000300 	.word	0x50000300
 80034d4:	50000700 	.word	0x50000700
 80034d8:	50000600 	.word	0x50000600

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	; (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	; (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff8e 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff29 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff40 	bl	8003524 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff90 	bl	80035d0 <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5f 	bl	800357c <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff33 	bl	8003540 <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa4 	bl	8003638 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800370a:	e15a      	b.n	80039c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 814c 	beq.w	80039bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d005      	beq.n	800373c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003738:	2b02      	cmp	r3, #2
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0201 	and.w	r2, r3, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d017      	beq.n	80037da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d123      	bne.n	800382e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0203 	and.w	r2, r3, #3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a6 	beq.w	80039bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003870:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <HAL_GPIO_Init+0x2e4>)
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <HAL_GPIO_Init+0x2e4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6613      	str	r3, [r2, #96]	; 0x60
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_GPIO_Init+0x2e4>)
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003888:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_GPIO_Init+0x2e8>)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038b2:	d01f      	beq.n	80038f4 <HAL_GPIO_Init+0x1f8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a4c      	ldr	r2, [pc, #304]	; (80039e8 <HAL_GPIO_Init+0x2ec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d019      	beq.n	80038f0 <HAL_GPIO_Init+0x1f4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_GPIO_Init+0x2f0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_GPIO_Init+0x1f0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <HAL_GPIO_Init+0x2f4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_Init+0x1ec>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <HAL_GPIO_Init+0x2f8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1e8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a48      	ldr	r2, [pc, #288]	; (80039f8 <HAL_GPIO_Init+0x2fc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038dc:	2305      	movs	r3, #5
 80038de:	e00a      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e0:	2306      	movs	r3, #6
 80038e2:	e008      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e006      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e8:	2303      	movs	r3, #3
 80038ea:	e004      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e002      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038f4:	2300      	movs	r3, #0
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003906:	4937      	ldr	r1, [pc, #220]	; (80039e4 <HAL_GPIO_Init+0x2e8>)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_GPIO_Init+0x300>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003938:	4a30      	ldr	r2, [pc, #192]	; (80039fc <HAL_GPIO_Init+0x300>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x300>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003962:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_GPIO_Init+0x300>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_GPIO_Init+0x300>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_GPIO_Init+0x300>)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x300>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_GPIO_Init+0x300>)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3301      	adds	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f ae9d 	bne.w	800370c <HAL_GPIO_Init+0x10>
  }
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010000 	.word	0x40010000
 80039e8:	48000400 	.word	0x48000400
 80039ec:	48000800 	.word	0x48000800
 80039f0:	48000c00 	.word	0x48000c00
 80039f4:	48001000 	.word	0x48001000
 80039f8:	48001400 	.word	0x48001400
 80039fc:	40010400 	.word	0x40010400

08003a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fe6e 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40010400 	.word	0x40010400

08003a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d141      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d131      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab2:	4a46      	ldr	r2, [pc, #280]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac4:	4a41      	ldr	r2, [pc, #260]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003acc:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2232      	movs	r2, #50	; 0x32
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	0c9b      	lsrs	r3, r3, #18
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae2:	e002      	b.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d102      	bne.n	8003afe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f2      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d158      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e057      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b20:	e04d      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d141      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2a:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d131      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2232      	movs	r2, #50	; 0x32
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	e002      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d102      	bne.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f2      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d112      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e011      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bac:	e007      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	431bde83 	.word	0x431bde83

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e306      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d075      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	4b97      	ldr	r3, [pc, #604]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c00:	4b94      	ldr	r3, [pc, #592]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d102      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3e>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_OscConfig+0x44>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b8d      	ldr	r3, [pc, #564]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x108>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d157      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e2e1      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x74>
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a84      	ldr	r2, [pc, #528]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x98>
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7b      	ldr	r2, [pc, #492]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c70:	4b78      	ldr	r3, [pc, #480]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a77      	ldr	r2, [pc, #476]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b75      	ldr	r3, [pc, #468]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a74      	ldr	r2, [pc, #464]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe f83c 	bl	8001d0c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe f838 	bl	8001d0c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e2a6      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f828 	bl	8001d0c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f824 	bl	8001d0c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e292      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cd2:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xe8>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d075      	beq.n	8003dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cee:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf8:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d102      	bne.n	8003d0e <HAL_RCC_OscConfig+0x136>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCC_OscConfig+0x13c>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d11f      	bne.n	8003d54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d14:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_OscConfig+0x154>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e265      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	4946      	ldr	r1, [pc, #280]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fd ff95 	bl	8001c74 <HAL_InitTick>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d043      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e251      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d023      	beq.n	8003da4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd ffd0 	bl	8001d0c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fd ffcc 	bl	8001d0c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e23a      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	492d      	ldr	r1, [pc, #180]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e01a      	b.n	8003dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd ffac 	bl	8001d0c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fd ffa8 	bl	8001d0c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e216      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1e0>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d041      	beq.n	8003e6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd ff85 	bl	8001d0c <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd ff81 	bl	8001d0c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1ef      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCC_OscConfig+0x22e>
 8003e26:	e020      	b.n	8003e6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd ff68 	bl	8001d0c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e3e:	e00d      	b.n	8003e5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd ff64 	bl	8001d0c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d906      	bls.n	8003e5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1d2      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e5c:	4b8c      	ldr	r3, [pc, #560]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ea      	bne.n	8003e40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a6 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e7c:	4b84      	ldr	r3, [pc, #528]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2b4>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x2b6>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	4b79      	ldr	r3, [pc, #484]	; (8004094 <HAL_RCC_OscConfig+0x4bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x4bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x4bc>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fd ff21 	bl	8001d0c <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fd ff1d 	bl	8001d0c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e18b      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x4bc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_RCC_OscConfig+0x32e>
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f04:	e024      	b.n	8003f50 <HAL_RCC_OscConfig+0x378>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d110      	bne.n	8003f30 <HAL_RCC_OscConfig+0x358>
 8003f0e:	4b60      	ldr	r3, [pc, #384]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	4a5e      	ldr	r2, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	4a5a      	ldr	r2, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCC_OscConfig+0x378>
 8003f30:	4b57      	ldr	r3, [pc, #348]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d016      	beq.n	8003f86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd fed8 	bl	8001d0c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd fed4 	bl	8001d0c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e140      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f76:	4b46      	ldr	r3, [pc, #280]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ed      	beq.n	8003f60 <HAL_RCC_OscConfig+0x388>
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd fec1 	bl	8001d0c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd febd 	bl	8001d0c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e129      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ed      	bne.n	8003f8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03c      	beq.n	800404a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01c      	beq.n	8004012 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fe90 	bl	8001d0c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff0:	f7fd fe8c 	bl	8001d0c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0fa      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8004004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ef      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x418>
 8004010:	e01b      	b.n	800404a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8004014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004018:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd fe73 	bl	8001d0c <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402a:	f7fd fe6f 	bl	8001d0c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e0dd      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 800403e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ef      	bne.n	800402a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80d1 	beq.w	80041f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b0c      	cmp	r3, #12
 800405e:	f000 808b 	beq.w	8004178 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d15e      	bne.n	8004128 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_RCC_OscConfig+0x4b8>)
 8004070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd fe49 	bl	8001d0c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	e00c      	b.n	8004098 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd fe45 	bl	8001d0c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d905      	bls.n	8004098 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0b3      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
 8004090:	40021000 	.word	0x40021000
 8004094:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	4b59      	ldr	r3, [pc, #356]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ec      	bne.n	800407e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a4:	4b56      	ldr	r3, [pc, #344]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x62c>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6a11      	ldr	r1, [r2, #32]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040be:	0212      	lsls	r2, r2, #8
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0552      	lsls	r2, r2, #21
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040d2:	0852      	lsrs	r2, r2, #1
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0652      	lsls	r2, r2, #25
 80040d8:	4311      	orrs	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040de:	06d2      	lsls	r2, r2, #27
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4947      	ldr	r1, [pc, #284]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b45      	ldr	r3, [pc, #276]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a44      	ldr	r2, [pc, #272]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a41      	ldr	r2, [pc, #260]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd fe04 	bl	8001d0c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd fe00 	bl	8001d0c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e06e      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b39      	ldr	r3, [pc, #228]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x530>
 8004126:	e066      	b.n	80041f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a34      	ldr	r2, [pc, #208]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800412e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004134:	4b32      	ldr	r3, [pc, #200]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a31      	ldr	r2, [pc, #196]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004140:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a2e      	ldr	r2, [pc, #184]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 8004146:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800414a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fddc 	bl	8001d0c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd fdd8 	bl	8001d0c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e046      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416a:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x580>
 8004176:	e03e      	b.n	80041f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e039      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_RCC_OscConfig+0x628>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0203 	and.w	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	429a      	cmp	r2, r3
 8004196:	d12c      	bne.n	80041f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	3b01      	subs	r3, #1
 80041a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d123      	bne.n	80041f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d11b      	bne.n	80041f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d113      	bne.n	80041f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d109      	bne.n	80041f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	3b01      	subs	r3, #1
 80041ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	019f800c 	.word	0x019f800c

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e11e      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b91      	ldr	r3, [pc, #580]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d910      	bls.n	8004250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b8e      	ldr	r3, [pc, #568]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	498c      	ldr	r1, [pc, #560]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b8a      	ldr	r3, [pc, #552]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e106      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d073      	beq.n	8004344 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d129      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	4b81      	ldr	r3, [pc, #516]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0f4      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004274:	f000 f99e 	bl	80045b4 <RCC_GetSysClockFreqFromPLLSource>
 8004278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a7c      	ldr	r2, [pc, #496]	; (8004470 <HAL_RCC_ClockConfig+0x268>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d93f      	bls.n	8004302 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004282:	4b7a      	ldr	r3, [pc, #488]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	d033      	beq.n	8004302 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12f      	bne.n	8004302 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042a2:	4b72      	ldr	r3, [pc, #456]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042aa:	4a70      	ldr	r2, [pc, #448]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e024      	b.n	8004302 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0c6      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0be      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042e0:	f000 f8ce 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4a61      	ldr	r2, [pc, #388]	; (8004470 <HAL_RCC_ClockConfig+0x268>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d909      	bls.n	8004302 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ee:	4b5f      	ldr	r3, [pc, #380]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	4a5d      	ldr	r2, [pc, #372]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004302:	4b5a      	ldr	r3, [pc, #360]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 0203 	bic.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4957      	ldr	r1, [pc, #348]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fd fcfa 	bl	8001d0c <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fd fcf6 	bl	8001d0c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e095      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b4e      	ldr	r3, [pc, #312]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 020c 	and.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1eb      	bne.n	800431c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d023      	beq.n	8004398 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a42      	ldr	r2, [pc, #264]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004366:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004374:	4b3d      	ldr	r3, [pc, #244]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800437c:	4a3b      	ldr	r2, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 800437e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b39      	ldr	r3, [pc, #228]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4936      	ldr	r1, [pc, #216]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
 8004396:	e008      	b.n	80043aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d105      	bne.n	80043aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 80043a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043aa:	4b2f      	ldr	r3, [pc, #188]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d21d      	bcs.n	80043f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b8:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 020f 	bic.w	r2, r3, #15
 80043c0:	4929      	ldr	r1, [pc, #164]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043c8:	f7fd fca0 	bl	8001d0c <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fd fc9c 	bl	8001d0c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e03b      	b.n	800445e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x260>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1ed      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4917      	ldr	r1, [pc, #92]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	490f      	ldr	r1, [pc, #60]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004432:	f000 f825 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004436:	4602      	mov	r2, r0
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_RCC_ClockConfig+0x264>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	490c      	ldr	r1, [pc, #48]	; (8004474 <HAL_RCC_ClockConfig+0x26c>)
 8004444:	5ccb      	ldrb	r3, [r1, r3]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x270>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fc0c 	bl	8001c74 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40022000 	.word	0x40022000
 800446c:	40021000 	.word	0x40021000
 8004470:	04c4b400 	.word	0x04c4b400
 8004474:	08008864 	.word	0x08008864
 8004478:	20000004 	.word	0x20000004
 800447c:	20000008 	.word	0x20000008

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b04      	cmp	r3, #4
 8004490:	d102      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004492:	4b2a      	ldr	r3, [pc, #168]	; (800453c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e047      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d102      	bne.n	80044aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a4:	4b26      	ldr	r3, [pc, #152]	; (8004540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e03e      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d136      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044b6:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	3301      	adds	r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d10c      	bne.n	80044ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044de:	68d2      	ldr	r2, [r2, #12]
 80044e0:	0a12      	lsrs	r2, r2, #8
 80044e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
      break;
 80044ec:	e00c      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	0a12      	lsrs	r2, r2, #8
 80044fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]
      break;
 8004506:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0e5b      	lsrs	r3, r3, #25
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	e001      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004528:	693b      	ldr	r3, [r7, #16]
}
 800452a:	4618      	mov	r0, r3
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	00f42400 	.word	0x00f42400
 8004540:	016e3600 	.word	0x016e3600

08004544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000004 	.word	0x20000004

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004560:	f7ff fff0 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0a1b      	lsrs	r3, r3, #8
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4904      	ldr	r1, [pc, #16]	; (8004584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	08008874 	.word	0x08008874

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800458c:	f7ff ffda 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0adb      	lsrs	r3, r3, #11
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4904      	ldr	r1, [pc, #16]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08008874 	.word	0x08008874

080045b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d10c      	bne.n	80045f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d8:	4a17      	ldr	r2, [pc, #92]	; (8004638 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045e2:	68d2      	ldr	r2, [r2, #12]
 80045e4:	0a12      	lsrs	r2, r2, #8
 80045e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	617b      	str	r3, [r7, #20]
    break;
 80045f0:	e00c      	b.n	800460c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	0a12      	lsrs	r2, r2, #8
 8004600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
    break;
 800460a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0e5b      	lsrs	r3, r3, #25
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004626:	687b      	ldr	r3, [r7, #4]
}
 8004628:	4618      	mov	r0, r3
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40021000 	.word	0x40021000
 8004638:	016e3600 	.word	0x016e3600
 800463c:	00f42400 	.word	0x00f42400

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004648:	2300      	movs	r3, #0
 800464a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800464c:	2300      	movs	r3, #0
 800464e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8098 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6593      	str	r3, [r2, #88]	; 0x58
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a39      	ldr	r2, [pc, #228]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004696:	f7fd fb39 	bl	8001d0c <HAL_GetTick>
 800469a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800469c:	e009      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd fb35 	bl	8001d0c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	74fb      	strb	r3, [r7, #19]
        break;
 80046b0:	e005      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b2:	4b30      	ldr	r3, [pc, #192]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ef      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d159      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01e      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d019      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fd faf5 	bl	8001d0c <HAL_GetTick>
 8004722:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004724:	e00b      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd faf1 	bl	8001d0c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d902      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	74fb      	strb	r3, [r7, #19]
            break;
 800473c:	e006      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ec      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	4903      	ldr	r1, [pc, #12]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004768:	e008      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	74bb      	strb	r3, [r7, #18]
 800476e:	e005      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477c:	7c7b      	ldrb	r3, [r7, #17]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004782:	4ba7      	ldr	r3, [pc, #668]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4aa6      	ldr	r2, [pc, #664]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479a:	4ba1      	ldr	r3, [pc, #644]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	499d      	ldr	r1, [pc, #628]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047bc:	4b98      	ldr	r3, [pc, #608]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f023 020c 	bic.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4995      	ldr	r1, [pc, #596]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047de:	4b90      	ldr	r3, [pc, #576]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	498c      	ldr	r1, [pc, #560]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004800:	4b87      	ldr	r3, [pc, #540]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	4984      	ldr	r1, [pc, #528]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004822:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	497b      	ldr	r1, [pc, #492]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004844:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	4973      	ldr	r1, [pc, #460]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004866:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	496a      	ldr	r1, [pc, #424]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004888:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4962      	ldr	r1, [pc, #392]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048aa:	4b5d      	ldr	r3, [pc, #372]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	4959      	ldr	r1, [pc, #356]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048cc:	4b54      	ldr	r3, [pc, #336]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	4951      	ldr	r1, [pc, #324]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ee:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4948      	ldr	r1, [pc, #288]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4940      	ldr	r1, [pc, #256]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492e:	d105      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004930:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a3a      	ldr	r2, [pc, #232]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800493a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004948:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	4932      	ldr	r1, [pc, #200]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004968:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004972:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	4924      	ldr	r1, [pc, #144]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800499e:	d105      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	4916      	ldr	r1, [pc, #88]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d6:	d105      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d019      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1a:	60d3      	str	r3, [r2, #12]
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	4926      	ldr	r1, [pc, #152]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	4918      	ldr	r1, [pc, #96]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a88:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	490a      	ldr	r1, [pc, #40]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004abe:	d105      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000

08004adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e042      	b.n	8004b74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fc ff13 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2224      	movs	r2, #36	; 0x24
 8004b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8c2 	bl	8004ca8 <UART_SetConfig>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fbb2 	bl	80052a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fc39 	bl	80053e4 <UART_CheckIdleState>
 8004b72:	4603      	mov	r3, r0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	f040 8083 	bne.w	8004c9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_Transmit+0x28>
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e07b      	b.n	8004ca0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Transmit+0x3a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e074      	b.n	8004ca0 <HAL_UART_Transmit+0x124>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2221      	movs	r2, #33	; 0x21
 8004bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bce:	f7fd f89d 	bl	8001d0c <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d108      	bne.n	8004c00 <HAL_UART_Transmit+0x84>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e003      	b.n	8004c08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c10:	e02c      	b.n	8004c6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fc2c 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e039      	b.n	8004ca0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	3302      	adds	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e007      	b.n	8004c5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1cc      	bne.n	8004c12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fbf9 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b08c      	sub	sp, #48	; 0x30
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4baa      	ldr	r3, [pc, #680]	; (8004f80 <UART_SetConfig+0x2d8>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a9f      	ldr	r2, [pc, #636]	; (8004f84 <UART_SetConfig+0x2dc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	4313      	orrs	r3, r2
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f023 010f 	bic.w	r1, r3, #15
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a90      	ldr	r2, [pc, #576]	; (8004f88 <UART_SetConfig+0x2e0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d125      	bne.n	8004d98 <UART_SetConfig+0xf0>
 8004d4c:	4b8f      	ldr	r3, [pc, #572]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d81a      	bhi.n	8004d90 <UART_SetConfig+0xe8>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0xb8>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d76:	e116      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	e112      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d86:	e10e      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8e:	e10a      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e106      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <UART_SetConfig+0x2e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d138      	bne.n	8004e14 <UART_SetConfig+0x16c>
 8004da2:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d82d      	bhi.n	8004e0c <UART_SetConfig+0x164>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x110>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004e0d 	.word	0x08004e0d
 8004dc4:	08004e0d 	.word	0x08004e0d
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e0d 	.word	0x08004e0d
 8004dd0:	08004e0d 	.word	0x08004e0d
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004e0d 	.word	0x08004e0d
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df2:	e0d8      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfa:	e0d4      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e02:	e0d0      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0a:	e0cc      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e12:	e0c8      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5e      	ldr	r2, [pc, #376]	; (8004f94 <UART_SetConfig+0x2ec>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d125      	bne.n	8004e6a <UART_SetConfig+0x1c2>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d016      	beq.n	8004e5a <UART_SetConfig+0x1b2>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d818      	bhi.n	8004e62 <UART_SetConfig+0x1ba>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d00a      	beq.n	8004e4a <UART_SetConfig+0x1a2>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d814      	bhi.n	8004e62 <UART_SetConfig+0x1ba>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <UART_SetConfig+0x19a>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d008      	beq.n	8004e52 <UART_SetConfig+0x1aa>
 8004e40:	e00f      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e48:	e0ad      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e50:	e0a9      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e52:	2304      	movs	r3, #4
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e58:	e0a5      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e60:	e0a1      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e62:	2310      	movs	r3, #16
 8004e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e68:	e09d      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <UART_SetConfig+0x2f0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0x218>
 8004e74:	4b45      	ldr	r3, [pc, #276]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e80:	d016      	beq.n	8004eb0 <UART_SetConfig+0x208>
 8004e82:	2bc0      	cmp	r3, #192	; 0xc0
 8004e84:	d818      	bhi.n	8004eb8 <UART_SetConfig+0x210>
 8004e86:	2b80      	cmp	r3, #128	; 0x80
 8004e88:	d00a      	beq.n	8004ea0 <UART_SetConfig+0x1f8>
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d814      	bhi.n	8004eb8 <UART_SetConfig+0x210>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <UART_SetConfig+0x1f0>
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d008      	beq.n	8004ea8 <UART_SetConfig+0x200>
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x210>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9e:	e082      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea6:	e07e      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eae:	e07a      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb6:	e076      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ebe:	e072      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a35      	ldr	r2, [pc, #212]	; (8004f9c <UART_SetConfig+0x2f4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d12a      	bne.n	8004f20 <UART_SetConfig+0x278>
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed8:	d01a      	beq.n	8004f10 <UART_SetConfig+0x268>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d81b      	bhi.n	8004f18 <UART_SetConfig+0x270>
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d00c      	beq.n	8004f00 <UART_SetConfig+0x258>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d815      	bhi.n	8004f18 <UART_SetConfig+0x270>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <UART_SetConfig+0x250>
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d008      	beq.n	8004f08 <UART_SetConfig+0x260>
 8004ef6:	e00f      	b.n	8004f18 <UART_SetConfig+0x270>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e052      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e04e      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e04a      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e046      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e042      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <UART_SetConfig+0x2dc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d13a      	bne.n	8004fa0 <UART_SetConfig+0x2f8>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f38:	d01a      	beq.n	8004f70 <UART_SetConfig+0x2c8>
 8004f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f3e:	d81b      	bhi.n	8004f78 <UART_SetConfig+0x2d0>
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f44:	d00c      	beq.n	8004f60 <UART_SetConfig+0x2b8>
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d815      	bhi.n	8004f78 <UART_SetConfig+0x2d0>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <UART_SetConfig+0x2b0>
 8004f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f54:	d008      	beq.n	8004f68 <UART_SetConfig+0x2c0>
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x2d0>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e022      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f60:	2302      	movs	r3, #2
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f66:	e01e      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6e:	e01a      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f76:	e016      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7e:	e012      	b.n	8004fa6 <UART_SetConfig+0x2fe>
 8004f80:	cfff69f3 	.word	0xcfff69f3
 8004f84:	40008000 	.word	0x40008000
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4aae      	ldr	r2, [pc, #696]	; (8005264 <UART_SetConfig+0x5bc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	f040 8097 	bne.w	80050e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d823      	bhi.n	8005002 <UART_SetConfig+0x35a>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x318>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08005003 	.word	0x08005003
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08005003 	.word	0x08005003
 8004fd0:	08004ff3 	.word	0x08004ff3
 8004fd4:	08005003 	.word	0x08005003
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005003 	.word	0x08005003
 8004fe0:	08004ffb 	.word	0x08004ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7ff faba 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fea:	e010      	b.n	800500e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fec:	4b9e      	ldr	r3, [pc, #632]	; (8005268 <UART_SetConfig+0x5c0>)
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff2:	f7ff fa45 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800500c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8130 	beq.w	8005276 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4a94      	ldr	r2, [pc, #592]	; (800526c <UART_SetConfig+0x5c4>)
 800501c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005020:	461a      	mov	r2, r3
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	fbb3 f3f2 	udiv	r3, r3, r2
 8005028:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	429a      	cmp	r2, r3
 8005038:	d305      	bcc.n	8005046 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	429a      	cmp	r2, r3
 8005044:	d903      	bls.n	800504e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800504c:	e113      	b.n	8005276 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	2200      	movs	r2, #0
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	60fa      	str	r2, [r7, #12]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	4a84      	ldr	r2, [pc, #528]	; (800526c <UART_SetConfig+0x5c4>)
 800505c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005060:	b29b      	uxth	r3, r3
 8005062:	2200      	movs	r2, #0
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800506c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005070:	f7fb fe12 	bl	8000c98 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	020b      	lsls	r3, r1, #8
 8005086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800508a:	0202      	lsls	r2, r0, #8
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	6849      	ldr	r1, [r1, #4]
 8005090:	0849      	lsrs	r1, r1, #1
 8005092:	2000      	movs	r0, #0
 8005094:	460c      	mov	r4, r1
 8005096:	4605      	mov	r5, r0
 8005098:	eb12 0804 	adds.w	r8, r2, r4
 800509c:	eb43 0905 	adc.w	r9, r3, r5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	469a      	mov	sl, r3
 80050a8:	4693      	mov	fp, r2
 80050aa:	4652      	mov	r2, sl
 80050ac:	465b      	mov	r3, fp
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb fdf1 	bl	8000c98 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4613      	mov	r3, r2
 80050bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c4:	d308      	bcc.n	80050d8 <UART_SetConfig+0x430>
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050cc:	d204      	bcs.n	80050d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a3a      	ldr	r2, [r7, #32]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	e0ce      	b.n	8005276 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050de:	e0ca      	b.n	8005276 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d166      	bne.n	80051b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80050ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d827      	bhi.n	8005142 <UART_SetConfig+0x49a>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x450>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512d 	.word	0x0800512d
 8005104:	08005143 	.word	0x08005143
 8005108:	08005133 	.word	0x08005133
 800510c:	08005143 	.word	0x08005143
 8005110:	08005143 	.word	0x08005143
 8005114:	08005143 	.word	0x08005143
 8005118:	0800513b 	.word	0x0800513b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7ff fa1e 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8005120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005122:	e014      	b.n	800514e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7ff fa30 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800512a:	e010      	b.n	800514e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800512c:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <UART_SetConfig+0x5c0>)
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005130:	e00d      	b.n	800514e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005132:	f7ff f9a5 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005138:	e009      	b.n	800514e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005140:	e005      	b.n	800514e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800514c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8090 	beq.w	8005276 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	4a44      	ldr	r2, [pc, #272]	; (800526c <UART_SetConfig+0x5c4>)
 800515c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005160:	461a      	mov	r2, r3
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	fbb3 f3f2 	udiv	r3, r3, r2
 8005168:	005a      	lsls	r2, r3, #1
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	441a      	add	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	2b0f      	cmp	r3, #15
 8005180:	d916      	bls.n	80051b0 <UART_SetConfig+0x508>
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005188:	d212      	bcs.n	80051b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f023 030f 	bic.w	r3, r3, #15
 8005192:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	b29a      	uxth	r2, r3
 80051a0:	8bfb      	ldrh	r3, [r7, #30]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	8bfa      	ldrh	r2, [r7, #30]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	e062      	b.n	8005276 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051b6:	e05e      	b.n	8005276 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d828      	bhi.n	8005212 <UART_SetConfig+0x56a>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x520>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	08005213 	.word	0x08005213
 80051d8:	08005203 	.word	0x08005203
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005213 	.word	0x08005213
 80051e4:	08005213 	.word	0x08005213
 80051e8:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ec:	f7ff f9b6 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 80051f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f2:	e014      	b.n	800521e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f4:	f7ff f9c8 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <UART_SetConfig+0x5c0>)
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005200:	e00d      	b.n	800521e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7ff f93d 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005208:	e009      	b.n	800521e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800521c:	bf00      	nop
    }

    if (pclk != 0U)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d028      	beq.n	8005276 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	4a10      	ldr	r2, [pc, #64]	; (800526c <UART_SetConfig+0x5c4>)
 800522a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522e:	461a      	mov	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	fbb3 f2f2 	udiv	r2, r3, r2
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	441a      	add	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d910      	bls.n	8005270 <UART_SetConfig+0x5c8>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d20c      	bcs.n	8005270 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b29a      	uxth	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e009      	b.n	8005276 <UART_SetConfig+0x5ce>
 8005262:	bf00      	nop
 8005264:	40008000 	.word	0x40008000
 8005268:	00f42400 	.word	0x00f42400
 800526c:	0800887c 	.word	0x0800887c
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2201      	movs	r2, #1
 800527a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2201      	movs	r2, #1
 8005282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005292:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005296:	4618      	mov	r0, r3
 8005298:	3730      	adds	r7, #48	; 0x30
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080052a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01a      	beq.n	80053b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539e:	d10a      	bne.n	80053b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f4:	f7fc fc8a 	bl	8001d0c <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10e      	bne.n	8005426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f82f 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e025      	b.n	8005472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d10e      	bne.n	8005452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f819 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e00f      	b.n	8005472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b09c      	sub	sp, #112	; 0x70
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548a:	e0a9      	b.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	f000 80a5 	beq.w	80055e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fc fc39 	bl	8001d0c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <UART_WaitOnFlagUntilTimeout+0x32>
 80054a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d140      	bne.n	800552e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c0:	667b      	str	r3, [r7, #100]	; 0x64
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e6      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	663b      	str	r3, [r7, #96]	; 0x60
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e069      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d051      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d149      	bne.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800556a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
 8005576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	613b      	str	r3, [r7, #16]
   return(result);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055a8:	623a      	str	r2, [r7, #32]
 80055aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e010      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f43f af46 	beq.w	800548c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3770      	adds	r7, #112	; 0x70
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UARTEx_DisableFifoMode+0x16>
 800561c:	2302      	movs	r3, #2
 800561e:	e027      	b.n	8005670 <HAL_UARTEx_DisableFifoMode+0x66>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800564e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e02d      	b.n	80056f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	; 0x24
 80056a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f84f 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e02d      	b.n	800576c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f811 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005794:	e031      	b.n	80057fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005796:	2308      	movs	r3, #8
 8005798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579a:	2308      	movs	r3, #8
 800579c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	0e5b      	lsrs	r3, r3, #25
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0f5b      	lsrs	r3, r3, #29
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	7b3a      	ldrb	r2, [r7, #12]
 80057c2:	4911      	ldr	r1, [pc, #68]	; (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057c4:	5c8a      	ldrb	r2, [r1, r2]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ca:	7b3a      	ldrb	r2, [r7, #12]
 80057cc:	490f      	ldr	r1, [pc, #60]	; (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	7b7a      	ldrb	r2, [r7, #13]
 80057e0:	4909      	ldr	r1, [pc, #36]	; (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057e2:	5c8a      	ldrb	r2, [r1, r2]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057e8:	7b7a      	ldrb	r2, [r7, #13]
 80057ea:	4908      	ldr	r1, [pc, #32]	; (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	08008894 	.word	0x08008894
 800580c:	0800889c 	.word	0x0800889c

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000010 	.word	0x20000010

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f002 ff02 	bl	8008638 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08008c84 	.word	0x08008c84
 8005858:	08008c84 	.word	0x08008c84
 800585c:	08008c84 	.word	0x08008c84
 8005860:	08008c88 	.word	0x08008c88

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__cvt>:
 8005874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	ec55 4b10 	vmov	r4, r5, d0
 800587c:	2d00      	cmp	r5, #0
 800587e:	460e      	mov	r6, r1
 8005880:	4619      	mov	r1, r3
 8005882:	462b      	mov	r3, r5
 8005884:	bfbb      	ittet	lt
 8005886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800588a:	461d      	movlt	r5, r3
 800588c:	2300      	movge	r3, #0
 800588e:	232d      	movlt	r3, #45	; 0x2d
 8005890:	700b      	strb	r3, [r1, #0]
 8005892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005898:	4691      	mov	r9, r2
 800589a:	f023 0820 	bic.w	r8, r3, #32
 800589e:	bfbc      	itt	lt
 80058a0:	4622      	movlt	r2, r4
 80058a2:	4614      	movlt	r4, r2
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	d005      	beq.n	80058b6 <__cvt+0x42>
 80058aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ae:	d100      	bne.n	80058b2 <__cvt+0x3e>
 80058b0:	3601      	adds	r6, #1
 80058b2:	2102      	movs	r1, #2
 80058b4:	e000      	b.n	80058b8 <__cvt+0x44>
 80058b6:	2103      	movs	r1, #3
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	ab02      	add	r3, sp, #8
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	ec45 4b10 	vmov	d0, r4, r5
 80058c4:	4653      	mov	r3, sl
 80058c6:	4632      	mov	r2, r6
 80058c8:	f000 fcea 	bl	80062a0 <_dtoa_r>
 80058cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058d0:	4607      	mov	r7, r0
 80058d2:	d102      	bne.n	80058da <__cvt+0x66>
 80058d4:	f019 0f01 	tst.w	r9, #1
 80058d8:	d022      	beq.n	8005920 <__cvt+0xac>
 80058da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058de:	eb07 0906 	add.w	r9, r7, r6
 80058e2:	d110      	bne.n	8005906 <__cvt+0x92>
 80058e4:	783b      	ldrb	r3, [r7, #0]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d10a      	bne.n	8005900 <__cvt+0x8c>
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fb f911 	bl	8000b18 <__aeabi_dcmpeq>
 80058f6:	b918      	cbnz	r0, 8005900 <__cvt+0x8c>
 80058f8:	f1c6 0601 	rsb	r6, r6, #1
 80058fc:	f8ca 6000 	str.w	r6, [sl]
 8005900:	f8da 3000 	ldr.w	r3, [sl]
 8005904:	4499      	add	r9, r3
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fb f903 	bl	8000b18 <__aeabi_dcmpeq>
 8005912:	b108      	cbz	r0, 8005918 <__cvt+0xa4>
 8005914:	f8cd 900c 	str.w	r9, [sp, #12]
 8005918:	2230      	movs	r2, #48	; 0x30
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	454b      	cmp	r3, r9
 800591e:	d307      	bcc.n	8005930 <__cvt+0xbc>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005924:	1bdb      	subs	r3, r3, r7
 8005926:	4638      	mov	r0, r7
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	b004      	add	sp, #16
 800592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	9103      	str	r1, [sp, #12]
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e7f0      	b.n	800591a <__cvt+0xa6>

08005938 <__exponent>:
 8005938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593a:	4603      	mov	r3, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	bfb8      	it	lt
 8005940:	4249      	neglt	r1, r1
 8005942:	f803 2b02 	strb.w	r2, [r3], #2
 8005946:	bfb4      	ite	lt
 8005948:	222d      	movlt	r2, #45	; 0x2d
 800594a:	222b      	movge	r2, #43	; 0x2b
 800594c:	2909      	cmp	r1, #9
 800594e:	7042      	strb	r2, [r0, #1]
 8005950:	dd2a      	ble.n	80059a8 <__exponent+0x70>
 8005952:	f10d 0407 	add.w	r4, sp, #7
 8005956:	46a4      	mov	ip, r4
 8005958:	270a      	movs	r7, #10
 800595a:	46a6      	mov	lr, r4
 800595c:	460a      	mov	r2, r1
 800595e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005962:	fb07 1516 	mls	r5, r7, r6, r1
 8005966:	3530      	adds	r5, #48	; 0x30
 8005968:	2a63      	cmp	r2, #99	; 0x63
 800596a:	f104 34ff 	add.w	r4, r4, #4294967295
 800596e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005972:	4631      	mov	r1, r6
 8005974:	dcf1      	bgt.n	800595a <__exponent+0x22>
 8005976:	3130      	adds	r1, #48	; 0x30
 8005978:	f1ae 0502 	sub.w	r5, lr, #2
 800597c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005980:	1c44      	adds	r4, r0, #1
 8005982:	4629      	mov	r1, r5
 8005984:	4561      	cmp	r1, ip
 8005986:	d30a      	bcc.n	800599e <__exponent+0x66>
 8005988:	f10d 0209 	add.w	r2, sp, #9
 800598c:	eba2 020e 	sub.w	r2, r2, lr
 8005990:	4565      	cmp	r5, ip
 8005992:	bf88      	it	hi
 8005994:	2200      	movhi	r2, #0
 8005996:	4413      	add	r3, r2
 8005998:	1a18      	subs	r0, r3, r0
 800599a:	b003      	add	sp, #12
 800599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059a6:	e7ed      	b.n	8005984 <__exponent+0x4c>
 80059a8:	2330      	movs	r3, #48	; 0x30
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	7083      	strb	r3, [r0, #2]
 80059ae:	70c1      	strb	r1, [r0, #3]
 80059b0:	1d03      	adds	r3, r0, #4
 80059b2:	e7f1      	b.n	8005998 <__exponent+0x60>

080059b4 <_printf_float>:
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	ed2d 8b02 	vpush	{d8}
 80059bc:	b08d      	sub	sp, #52	; 0x34
 80059be:	460c      	mov	r4, r1
 80059c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	4605      	mov	r5, r0
 80059ca:	f001 fa57 	bl	8006e7c <_localeconv_r>
 80059ce:	f8d0 a000 	ldr.w	sl, [r0]
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7fa fc24 	bl	8000220 <strlen>
 80059d8:	2300      	movs	r3, #0
 80059da:	930a      	str	r3, [sp, #40]	; 0x28
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	f8d8 3000 	ldr.w	r3, [r8]
 80059e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059e8:	3307      	adds	r3, #7
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	f8c8 2000 	str.w	r2, [r8]
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a0c:	ee08 0a10 	vmov	s16, r0
 8005a10:	4b9f      	ldr	r3, [pc, #636]	; (8005c90 <_printf_float+0x2dc>)
 8005a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	f7fb f8af 	bl	8000b7c <__aeabi_dcmpun>
 8005a1e:	bb88      	cbnz	r0, 8005a84 <_printf_float+0xd0>
 8005a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a24:	4b9a      	ldr	r3, [pc, #616]	; (8005c90 <_printf_float+0x2dc>)
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	f7fb f889 	bl	8000b40 <__aeabi_dcmple>
 8005a2e:	bb48      	cbnz	r0, 8005a84 <_printf_float+0xd0>
 8005a30:	2200      	movs	r2, #0
 8005a32:	2300      	movs	r3, #0
 8005a34:	4640      	mov	r0, r8
 8005a36:	4649      	mov	r1, r9
 8005a38:	f7fb f878 	bl	8000b2c <__aeabi_dcmplt>
 8005a3c:	b110      	cbz	r0, 8005a44 <_printf_float+0x90>
 8005a3e:	232d      	movs	r3, #45	; 0x2d
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a44:	4b93      	ldr	r3, [pc, #588]	; (8005c94 <_printf_float+0x2e0>)
 8005a46:	4894      	ldr	r0, [pc, #592]	; (8005c98 <_printf_float+0x2e4>)
 8005a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a4c:	bf94      	ite	ls
 8005a4e:	4698      	movls	r8, r3
 8005a50:	4680      	movhi	r8, r0
 8005a52:	2303      	movs	r3, #3
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	f023 0204 	bic.w	r2, r3, #4
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	f04f 0900 	mov.w	r9, #0
 8005a62:	9700      	str	r7, [sp, #0]
 8005a64:	4633      	mov	r3, r6
 8005a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 f9d8 	bl	8005e20 <_printf_common>
 8005a70:	3001      	adds	r0, #1
 8005a72:	f040 8090 	bne.w	8005b96 <_printf_float+0x1e2>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	b00d      	add	sp, #52	; 0x34
 8005a7c:	ecbd 8b02 	vpop	{d8}
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fb f876 	bl	8000b7c <__aeabi_dcmpun>
 8005a90:	b140      	cbz	r0, 8005aa4 <_printf_float+0xf0>
 8005a92:	464b      	mov	r3, r9
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bfbc      	itt	lt
 8005a98:	232d      	movlt	r3, #45	; 0x2d
 8005a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a9e:	487f      	ldr	r0, [pc, #508]	; (8005c9c <_printf_float+0x2e8>)
 8005aa0:	4b7f      	ldr	r3, [pc, #508]	; (8005ca0 <_printf_float+0x2ec>)
 8005aa2:	e7d1      	b.n	8005a48 <_printf_float+0x94>
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aaa:	9206      	str	r2, [sp, #24]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	d13f      	bne.n	8005b30 <_printf_float+0x17c>
 8005ab0:	2306      	movs	r3, #6
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	9b05      	ldr	r3, [sp, #20]
 8005ab6:	6861      	ldr	r1, [r4, #4]
 8005ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005abc:	2300      	movs	r3, #0
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ac6:	ab09      	add	r3, sp, #36	; 0x24
 8005ac8:	ec49 8b10 	vmov	d0, r8, r9
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6022      	str	r2, [r4, #0]
 8005ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f7ff fecd 	bl	8005874 <__cvt>
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ade:	2b47      	cmp	r3, #71	; 0x47
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	d108      	bne.n	8005af6 <_printf_float+0x142>
 8005ae4:	1cc8      	adds	r0, r1, #3
 8005ae6:	db02      	blt.n	8005aee <_printf_float+0x13a>
 8005ae8:	6863      	ldr	r3, [r4, #4]
 8005aea:	4299      	cmp	r1, r3
 8005aec:	dd41      	ble.n	8005b72 <_printf_float+0x1be>
 8005aee:	f1ab 0b02 	sub.w	fp, fp, #2
 8005af2:	fa5f fb8b 	uxtb.w	fp, fp
 8005af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005afa:	d820      	bhi.n	8005b3e <_printf_float+0x18a>
 8005afc:	3901      	subs	r1, #1
 8005afe:	465a      	mov	r2, fp
 8005b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b04:	9109      	str	r1, [sp, #36]	; 0x24
 8005b06:	f7ff ff17 	bl	8005938 <__exponent>
 8005b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b0c:	1813      	adds	r3, r2, r0
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	4681      	mov	r9, r0
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	dc02      	bgt.n	8005b1c <_printf_float+0x168>
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	07d2      	lsls	r2, r2, #31
 8005b1a:	d501      	bpl.n	8005b20 <_printf_float+0x16c>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d09c      	beq.n	8005a62 <_printf_float+0xae>
 8005b28:	232d      	movs	r3, #45	; 0x2d
 8005b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2e:	e798      	b.n	8005a62 <_printf_float+0xae>
 8005b30:	9a06      	ldr	r2, [sp, #24]
 8005b32:	2a47      	cmp	r2, #71	; 0x47
 8005b34:	d1be      	bne.n	8005ab4 <_printf_float+0x100>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1bc      	bne.n	8005ab4 <_printf_float+0x100>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7b9      	b.n	8005ab2 <_printf_float+0xfe>
 8005b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b42:	d118      	bne.n	8005b76 <_printf_float+0x1c2>
 8005b44:	2900      	cmp	r1, #0
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	dd0b      	ble.n	8005b62 <_printf_float+0x1ae>
 8005b4a:	6121      	str	r1, [r4, #16]
 8005b4c:	b913      	cbnz	r3, 8005b54 <_printf_float+0x1a0>
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	07d0      	lsls	r0, r2, #31
 8005b52:	d502      	bpl.n	8005b5a <_printf_float+0x1a6>
 8005b54:	3301      	adds	r3, #1
 8005b56:	440b      	add	r3, r1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b5c:	f04f 0900 	mov.w	r9, #0
 8005b60:	e7de      	b.n	8005b20 <_printf_float+0x16c>
 8005b62:	b913      	cbnz	r3, 8005b6a <_printf_float+0x1b6>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	07d2      	lsls	r2, r2, #31
 8005b68:	d501      	bpl.n	8005b6e <_printf_float+0x1ba>
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	e7f4      	b.n	8005b58 <_printf_float+0x1a4>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7f2      	b.n	8005b58 <_printf_float+0x1a4>
 8005b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	db05      	blt.n	8005b88 <_printf_float+0x1d4>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	6121      	str	r1, [r4, #16]
 8005b80:	07d8      	lsls	r0, r3, #31
 8005b82:	d5ea      	bpl.n	8005b5a <_printf_float+0x1a6>
 8005b84:	1c4b      	adds	r3, r1, #1
 8005b86:	e7e7      	b.n	8005b58 <_printf_float+0x1a4>
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	bfd4      	ite	le
 8005b8c:	f1c1 0202 	rsble	r2, r1, #2
 8005b90:	2201      	movgt	r2, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	e7e0      	b.n	8005b58 <_printf_float+0x1a4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	055a      	lsls	r2, r3, #21
 8005b9a:	d407      	bmi.n	8005bac <_printf_float+0x1f8>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d12c      	bne.n	8005c04 <_printf_float+0x250>
 8005baa:	e764      	b.n	8005a76 <_printf_float+0xc2>
 8005bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bb0:	f240 80e0 	bls.w	8005d74 <_printf_float+0x3c0>
 8005bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f7fa ffac 	bl	8000b18 <__aeabi_dcmpeq>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d034      	beq.n	8005c2e <_printf_float+0x27a>
 8005bc4:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <_printf_float+0x2f0>)
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af51 	beq.w	8005a76 <_printf_float+0xc2>
 8005bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	db02      	blt.n	8005be2 <_printf_float+0x22e>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07d8      	lsls	r0, r3, #31
 8005be0:	d510      	bpl.n	8005c04 <_printf_float+0x250>
 8005be2:	ee18 3a10 	vmov	r3, s16
 8005be6:	4652      	mov	r2, sl
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f af41 	beq.w	8005a76 <_printf_float+0xc2>
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	f104 091a 	add.w	r9, r4, #26
 8005bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4543      	cmp	r3, r8
 8005c02:	dc09      	bgt.n	8005c18 <_printf_float+0x264>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	079b      	lsls	r3, r3, #30
 8005c08:	f100 8105 	bmi.w	8005e16 <_printf_float+0x462>
 8005c0c:	68e0      	ldr	r0, [r4, #12]
 8005c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c10:	4298      	cmp	r0, r3
 8005c12:	bfb8      	it	lt
 8005c14:	4618      	movlt	r0, r3
 8005c16:	e730      	b.n	8005a7a <_printf_float+0xc6>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	464a      	mov	r2, r9
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af27 	beq.w	8005a76 <_printf_float+0xc2>
 8005c28:	f108 0801 	add.w	r8, r8, #1
 8005c2c:	e7e6      	b.n	8005bfc <_printf_float+0x248>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dc39      	bgt.n	8005ca8 <_printf_float+0x2f4>
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <_printf_float+0x2f0>)
 8005c36:	2301      	movs	r3, #1
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f af19 	beq.w	8005a76 <_printf_float+0xc2>
 8005c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	d102      	bne.n	8005c52 <_printf_float+0x29e>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d5d8      	bpl.n	8005c04 <_printf_float+0x250>
 8005c52:	ee18 3a10 	vmov	r3, s16
 8005c56:	4652      	mov	r2, sl
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af09 	beq.w	8005a76 <_printf_float+0xc2>
 8005c64:	f04f 0900 	mov.w	r9, #0
 8005c68:	f104 0a1a 	add.w	sl, r4, #26
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	425b      	negs	r3, r3
 8005c70:	454b      	cmp	r3, r9
 8005c72:	dc01      	bgt.n	8005c78 <_printf_float+0x2c4>
 8005c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c76:	e792      	b.n	8005b9e <_printf_float+0x1ea>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f aef7 	beq.w	8005a76 <_printf_float+0xc2>
 8005c88:	f109 0901 	add.w	r9, r9, #1
 8005c8c:	e7ee      	b.n	8005c6c <_printf_float+0x2b8>
 8005c8e:	bf00      	nop
 8005c90:	7fefffff 	.word	0x7fefffff
 8005c94:	080088a8 	.word	0x080088a8
 8005c98:	080088ac 	.word	0x080088ac
 8005c9c:	080088b4 	.word	0x080088b4
 8005ca0:	080088b0 	.word	0x080088b0
 8005ca4:	080088b8 	.word	0x080088b8
 8005ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bfa8      	it	ge
 8005cb0:	461a      	movge	r2, r3
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	dc37      	bgt.n	8005d28 <_printf_float+0x374>
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc0:	f104 021a 	add.w	r2, r4, #26
 8005cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cc6:	9305      	str	r3, [sp, #20]
 8005cc8:	eba3 0309 	sub.w	r3, r3, r9
 8005ccc:	455b      	cmp	r3, fp
 8005cce:	dc33      	bgt.n	8005d38 <_printf_float+0x384>
 8005cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	db3b      	blt.n	8005d50 <_printf_float+0x39c>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d438      	bmi.n	8005d50 <_printf_float+0x39c>
 8005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce0:	9a05      	ldr	r2, [sp, #20]
 8005ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ce4:	1a9a      	subs	r2, r3, r2
 8005ce6:	eba3 0901 	sub.w	r9, r3, r1
 8005cea:	4591      	cmp	r9, r2
 8005cec:	bfa8      	it	ge
 8005cee:	4691      	movge	r9, r2
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	dc35      	bgt.n	8005d62 <_printf_float+0x3ae>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfe:	f104 0a1a 	add.w	sl, r4, #26
 8005d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	eba3 0309 	sub.w	r3, r3, r9
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	f77f af79 	ble.w	8005c04 <_printf_float+0x250>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f aeaa 	beq.w	8005a76 <_printf_float+0xc2>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	e7ec      	b.n	8005d02 <_printf_float+0x34e>
 8005d28:	4613      	mov	r3, r2
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	d1c0      	bne.n	8005cb8 <_printf_float+0x304>
 8005d36:	e69e      	b.n	8005a76 <_printf_float+0xc2>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	9205      	str	r2, [sp, #20]
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f ae97 	beq.w	8005a76 <_printf_float+0xc2>
 8005d48:	9a05      	ldr	r2, [sp, #20]
 8005d4a:	f10b 0b01 	add.w	fp, fp, #1
 8005d4e:	e7b9      	b.n	8005cc4 <_printf_float+0x310>
 8005d50:	ee18 3a10 	vmov	r3, s16
 8005d54:	4652      	mov	r2, sl
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1be      	bne.n	8005cde <_printf_float+0x32a>
 8005d60:	e689      	b.n	8005a76 <_printf_float+0xc2>
 8005d62:	9a05      	ldr	r2, [sp, #20]
 8005d64:	464b      	mov	r3, r9
 8005d66:	4442      	add	r2, r8
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d1c1      	bne.n	8005cf6 <_printf_float+0x342>
 8005d72:	e680      	b.n	8005a76 <_printf_float+0xc2>
 8005d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d76:	2a01      	cmp	r2, #1
 8005d78:	dc01      	bgt.n	8005d7e <_printf_float+0x3ca>
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d538      	bpl.n	8005df0 <_printf_float+0x43c>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4642      	mov	r2, r8
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f ae74 	beq.w	8005a76 <_printf_float+0xc2>
 8005d8e:	ee18 3a10 	vmov	r3, s16
 8005d92:	4652      	mov	r2, sl
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f ae6b 	beq.w	8005a76 <_printf_float+0xc2>
 8005da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	f7fa feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8005dac:	b9d8      	cbnz	r0, 8005de6 <_printf_float+0x432>
 8005dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db0:	f108 0201 	add.w	r2, r8, #1
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d10e      	bne.n	8005dde <_printf_float+0x42a>
 8005dc0:	e659      	b.n	8005a76 <_printf_float+0xc2>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae52 	beq.w	8005a76 <_printf_float+0xc2>
 8005dd2:	f108 0801 	add.w	r8, r8, #1
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4543      	cmp	r3, r8
 8005ddc:	dcf1      	bgt.n	8005dc2 <_printf_float+0x40e>
 8005dde:	464b      	mov	r3, r9
 8005de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005de4:	e6dc      	b.n	8005ba0 <_printf_float+0x1ec>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0a1a 	add.w	sl, r4, #26
 8005dee:	e7f2      	b.n	8005dd6 <_printf_float+0x422>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	e7df      	b.n	8005db6 <_printf_float+0x402>
 8005df6:	2301      	movs	r3, #1
 8005df8:	464a      	mov	r2, r9
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae38 	beq.w	8005a76 <_printf_float+0xc2>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	4543      	cmp	r3, r8
 8005e12:	dcf0      	bgt.n	8005df6 <_printf_float+0x442>
 8005e14:	e6fa      	b.n	8005c0c <_printf_float+0x258>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	f104 0919 	add.w	r9, r4, #25
 8005e1e:	e7f4      	b.n	8005e0a <_printf_float+0x456>

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4699      	mov	r9, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e6c:	1e13      	subs	r3, r2, #0
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	68e5      	ldr	r5, [r4, #12]
 8005e8a:	6832      	ldr	r2, [r6, #0]
 8005e8c:	f003 0306 	and.w	r3, r3, #6
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	bf08      	it	eq
 8005e94:	1aad      	subeq	r5, r5, r2
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	6922      	ldr	r2, [r4, #16]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c0      	blx	r8
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	; 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f04:	2f78      	cmp	r7, #120	; 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	; 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d8 	beq.w	80060ce <_printf_i+0x1d2>
 8005f1e:	2f58      	cmp	r7, #88	; 0x58
 8005f20:	f000 80a3 	beq.w	800606a <_printf_i+0x16e>
 8005f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	; (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060b5 	.word	0x080060b5
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	08006097 	.word	0x08006097
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060d7 	.word	0x080060d7
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	0800609f 	.word	0x0800609f
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	602a      	str	r2, [r5, #0]
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a3      	b.n	80060f0 <_printf_i+0x1f4>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	0606      	lsls	r6, r0, #24
 8005fae:	f101 0304 	add.w	r3, r1, #4
 8005fb2:	d50a      	bpl.n	8005fca <_printf_i+0xce>
 8005fb4:	680e      	ldr	r6, [r1, #0]
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	2e00      	cmp	r6, #0
 8005fba:	da03      	bge.n	8005fc4 <_printf_i+0xc8>
 8005fbc:	232d      	movs	r3, #45	; 0x2d
 8005fbe:	4276      	negs	r6, r6
 8005fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc4:	485e      	ldr	r0, [pc, #376]	; (8006140 <_printf_i+0x244>)
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e019      	b.n	8005ffe <_printf_i+0x102>
 8005fca:	680e      	ldr	r6, [r1, #0]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fd2:	bf18      	it	ne
 8005fd4:	b236      	sxthne	r6, r6
 8005fd6:	e7ef      	b.n	8005fb8 <_printf_i+0xbc>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	6029      	str	r1, [r5, #0]
 8005fe0:	0601      	lsls	r1, r0, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0xec>
 8005fe4:	681e      	ldr	r6, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_printf_i+0xf2>
 8005fe8:	0646      	lsls	r6, r0, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0xe8>
 8005fec:	881e      	ldrh	r6, [r3, #0]
 8005fee:	4854      	ldr	r0, [pc, #336]	; (8006140 <_printf_i+0x244>)
 8005ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2308      	moveq	r3, #8
 8005ff6:	230a      	movne	r3, #10
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffe:	6865      	ldr	r5, [r4, #4]
 8006000:	60a5      	str	r5, [r4, #8]
 8006002:	2d00      	cmp	r5, #0
 8006004:	bfa2      	ittt	ge
 8006006:	6821      	ldrge	r1, [r4, #0]
 8006008:	f021 0104 	bicge.w	r1, r1, #4
 800600c:	6021      	strge	r1, [r4, #0]
 800600e:	b90e      	cbnz	r6, 8006014 <_printf_i+0x118>
 8006010:	2d00      	cmp	r5, #0
 8006012:	d04d      	beq.n	80060b0 <_printf_i+0x1b4>
 8006014:	4615      	mov	r5, r2
 8006016:	fbb6 f1f3 	udiv	r1, r6, r3
 800601a:	fb03 6711 	mls	r7, r3, r1, r6
 800601e:	5dc7      	ldrb	r7, [r0, r7]
 8006020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006024:	4637      	mov	r7, r6
 8006026:	42bb      	cmp	r3, r7
 8006028:	460e      	mov	r6, r1
 800602a:	d9f4      	bls.n	8006016 <_printf_i+0x11a>
 800602c:	2b08      	cmp	r3, #8
 800602e:	d10b      	bne.n	8006048 <_printf_i+0x14c>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	07de      	lsls	r6, r3, #31
 8006034:	d508      	bpl.n	8006048 <_printf_i+0x14c>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4299      	cmp	r1, r3
 800603c:	bfde      	ittt	le
 800603e:	2330      	movle	r3, #48	; 0x30
 8006040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006048:	1b52      	subs	r2, r2, r5
 800604a:	6122      	str	r2, [r4, #16]
 800604c:	f8cd a000 	str.w	sl, [sp]
 8006050:	464b      	mov	r3, r9
 8006052:	aa03      	add	r2, sp, #12
 8006054:	4621      	mov	r1, r4
 8006056:	4640      	mov	r0, r8
 8006058:	f7ff fee2 	bl	8005e20 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	d14c      	bne.n	80060fa <_printf_i+0x1fe>
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	b004      	add	sp, #16
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606a:	4835      	ldr	r0, [pc, #212]	; (8006140 <_printf_i+0x244>)
 800606c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006070:	6829      	ldr	r1, [r5, #0]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f851 6b04 	ldr.w	r6, [r1], #4
 8006078:	6029      	str	r1, [r5, #0]
 800607a:	061d      	lsls	r5, r3, #24
 800607c:	d514      	bpl.n	80060a8 <_printf_i+0x1ac>
 800607e:	07df      	lsls	r7, r3, #31
 8006080:	bf44      	itt	mi
 8006082:	f043 0320 	orrmi.w	r3, r3, #32
 8006086:	6023      	strmi	r3, [r4, #0]
 8006088:	b91e      	cbnz	r6, 8006092 <_printf_i+0x196>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f023 0320 	bic.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	2310      	movs	r3, #16
 8006094:	e7b0      	b.n	8005ff8 <_printf_i+0xfc>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f043 0320 	orr.w	r3, r3, #32
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	2378      	movs	r3, #120	; 0x78
 80060a0:	4828      	ldr	r0, [pc, #160]	; (8006144 <_printf_i+0x248>)
 80060a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a6:	e7e3      	b.n	8006070 <_printf_i+0x174>
 80060a8:	0659      	lsls	r1, r3, #25
 80060aa:	bf48      	it	mi
 80060ac:	b2b6      	uxthmi	r6, r6
 80060ae:	e7e6      	b.n	800607e <_printf_i+0x182>
 80060b0:	4615      	mov	r5, r2
 80060b2:	e7bb      	b.n	800602c <_printf_i+0x130>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	6826      	ldr	r6, [r4, #0]
 80060b8:	6961      	ldr	r1, [r4, #20]
 80060ba:	1d18      	adds	r0, r3, #4
 80060bc:	6028      	str	r0, [r5, #0]
 80060be:	0635      	lsls	r5, r6, #24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0x1cc>
 80060c4:	6019      	str	r1, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0x1d2>
 80060c8:	0670      	lsls	r0, r6, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0x1c8>
 80060cc:	8019      	strh	r1, [r3, #0]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	4615      	mov	r5, r2
 80060d4:	e7ba      	b.n	800604c <_printf_i+0x150>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	681d      	ldr	r5, [r3, #0]
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4628      	mov	r0, r5
 80060e4:	f7fa f8a4 	bl	8000230 <memchr>
 80060e8:	b108      	cbz	r0, 80060ee <_printf_i+0x1f2>
 80060ea:	1b40      	subs	r0, r0, r5
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	2300      	movs	r3, #0
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f8:	e7a8      	b.n	800604c <_printf_i+0x150>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	462a      	mov	r2, r5
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	47d0      	blx	sl
 8006104:	3001      	adds	r0, #1
 8006106:	d0ab      	beq.n	8006060 <_printf_i+0x164>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	079b      	lsls	r3, r3, #30
 800610c:	d413      	bmi.n	8006136 <_printf_i+0x23a>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	4298      	cmp	r0, r3
 8006114:	bfb8      	it	lt
 8006116:	4618      	movlt	r0, r3
 8006118:	e7a4      	b.n	8006064 <_printf_i+0x168>
 800611a:	2301      	movs	r3, #1
 800611c:	4632      	mov	r2, r6
 800611e:	4649      	mov	r1, r9
 8006120:	4640      	mov	r0, r8
 8006122:	47d0      	blx	sl
 8006124:	3001      	adds	r0, #1
 8006126:	d09b      	beq.n	8006060 <_printf_i+0x164>
 8006128:	3501      	adds	r5, #1
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	9903      	ldr	r1, [sp, #12]
 800612e:	1a5b      	subs	r3, r3, r1
 8006130:	42ab      	cmp	r3, r5
 8006132:	dcf2      	bgt.n	800611a <_printf_i+0x21e>
 8006134:	e7eb      	b.n	800610e <_printf_i+0x212>
 8006136:	2500      	movs	r5, #0
 8006138:	f104 0619 	add.w	r6, r4, #25
 800613c:	e7f5      	b.n	800612a <_printf_i+0x22e>
 800613e:	bf00      	nop
 8006140:	080088ba 	.word	0x080088ba
 8006144:	080088cb 	.word	0x080088cb

08006148 <siprintf>:
 8006148:	b40e      	push	{r1, r2, r3}
 800614a:	b500      	push	{lr}
 800614c:	b09c      	sub	sp, #112	; 0x70
 800614e:	ab1d      	add	r3, sp, #116	; 0x74
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006158:	4809      	ldr	r0, [pc, #36]	; (8006180 <siprintf+0x38>)
 800615a:	9107      	str	r1, [sp, #28]
 800615c:	9104      	str	r1, [sp, #16]
 800615e:	4909      	ldr	r1, [pc, #36]	; (8006184 <siprintf+0x3c>)
 8006160:	f853 2b04 	ldr.w	r2, [r3], #4
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	a902      	add	r1, sp, #8
 800616c:	f001 fb76 	bl	800785c <_svfiprintf_r>
 8006170:	9b02      	ldr	r3, [sp, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	b01c      	add	sp, #112	; 0x70
 8006178:	f85d eb04 	ldr.w	lr, [sp], #4
 800617c:	b003      	add	sp, #12
 800617e:	4770      	bx	lr
 8006180:	20000010 	.word	0x20000010
 8006184:	ffff0208 	.word	0xffff0208

08006188 <quorem>:
 8006188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	6903      	ldr	r3, [r0, #16]
 800618e:	690c      	ldr	r4, [r1, #16]
 8006190:	42a3      	cmp	r3, r4
 8006192:	4607      	mov	r7, r0
 8006194:	f2c0 8081 	blt.w	800629a <quorem+0x112>
 8006198:	3c01      	subs	r4, #1
 800619a:	f101 0814 	add.w	r8, r1, #20
 800619e:	f100 0514 	add.w	r5, r0, #20
 80061a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b0:	3301      	adds	r3, #1
 80061b2:	429a      	cmp	r2, r3
 80061b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80061c0:	d331      	bcc.n	8006226 <quorem+0x9e>
 80061c2:	f04f 0e00 	mov.w	lr, #0
 80061c6:	4640      	mov	r0, r8
 80061c8:	46ac      	mov	ip, r5
 80061ca:	46f2      	mov	sl, lr
 80061cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80061d0:	b293      	uxth	r3, r2
 80061d2:	fb06 e303 	mla	r3, r6, r3, lr
 80061d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061da:	b29b      	uxth	r3, r3
 80061dc:	ebaa 0303 	sub.w	r3, sl, r3
 80061e0:	f8dc a000 	ldr.w	sl, [ip]
 80061e4:	0c12      	lsrs	r2, r2, #16
 80061e6:	fa13 f38a 	uxtah	r3, r3, sl
 80061ea:	fb06 e202 	mla	r2, r6, r2, lr
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061f6:	b292      	uxth	r2, r2
 80061f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006200:	f8bd 3000 	ldrh.w	r3, [sp]
 8006204:	4581      	cmp	r9, r0
 8006206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800620a:	f84c 3b04 	str.w	r3, [ip], #4
 800620e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006212:	d2db      	bcs.n	80061cc <quorem+0x44>
 8006214:	f855 300b 	ldr.w	r3, [r5, fp]
 8006218:	b92b      	cbnz	r3, 8006226 <quorem+0x9e>
 800621a:	9b01      	ldr	r3, [sp, #4]
 800621c:	3b04      	subs	r3, #4
 800621e:	429d      	cmp	r5, r3
 8006220:	461a      	mov	r2, r3
 8006222:	d32e      	bcc.n	8006282 <quorem+0xfa>
 8006224:	613c      	str	r4, [r7, #16]
 8006226:	4638      	mov	r0, r7
 8006228:	f001 f8c4 	bl	80073b4 <__mcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	db24      	blt.n	800627a <quorem+0xf2>
 8006230:	3601      	adds	r6, #1
 8006232:	4628      	mov	r0, r5
 8006234:	f04f 0c00 	mov.w	ip, #0
 8006238:	f858 2b04 	ldr.w	r2, [r8], #4
 800623c:	f8d0 e000 	ldr.w	lr, [r0]
 8006240:	b293      	uxth	r3, r2
 8006242:	ebac 0303 	sub.w	r3, ip, r3
 8006246:	0c12      	lsrs	r2, r2, #16
 8006248:	fa13 f38e 	uxtah	r3, r3, lr
 800624c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800625a:	45c1      	cmp	r9, r8
 800625c:	f840 3b04 	str.w	r3, [r0], #4
 8006260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006264:	d2e8      	bcs.n	8006238 <quorem+0xb0>
 8006266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800626a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800626e:	b922      	cbnz	r2, 800627a <quorem+0xf2>
 8006270:	3b04      	subs	r3, #4
 8006272:	429d      	cmp	r5, r3
 8006274:	461a      	mov	r2, r3
 8006276:	d30a      	bcc.n	800628e <quorem+0x106>
 8006278:	613c      	str	r4, [r7, #16]
 800627a:	4630      	mov	r0, r6
 800627c:	b003      	add	sp, #12
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	3b04      	subs	r3, #4
 8006286:	2a00      	cmp	r2, #0
 8006288:	d1cc      	bne.n	8006224 <quorem+0x9c>
 800628a:	3c01      	subs	r4, #1
 800628c:	e7c7      	b.n	800621e <quorem+0x96>
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	3b04      	subs	r3, #4
 8006292:	2a00      	cmp	r2, #0
 8006294:	d1f0      	bne.n	8006278 <quorem+0xf0>
 8006296:	3c01      	subs	r4, #1
 8006298:	e7eb      	b.n	8006272 <quorem+0xea>
 800629a:	2000      	movs	r0, #0
 800629c:	e7ee      	b.n	800627c <quorem+0xf4>
	...

080062a0 <_dtoa_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ed2d 8b04 	vpush	{d8-d9}
 80062a8:	ec57 6b10 	vmov	r6, r7, d0
 80062ac:	b093      	sub	sp, #76	; 0x4c
 80062ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062b4:	9106      	str	r1, [sp, #24]
 80062b6:	ee10 aa10 	vmov	sl, s0
 80062ba:	4604      	mov	r4, r0
 80062bc:	9209      	str	r2, [sp, #36]	; 0x24
 80062be:	930c      	str	r3, [sp, #48]	; 0x30
 80062c0:	46bb      	mov	fp, r7
 80062c2:	b975      	cbnz	r5, 80062e2 <_dtoa_r+0x42>
 80062c4:	2010      	movs	r0, #16
 80062c6:	f000 fddd 	bl	8006e84 <malloc>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6260      	str	r0, [r4, #36]	; 0x24
 80062ce:	b920      	cbnz	r0, 80062da <_dtoa_r+0x3a>
 80062d0:	4ba7      	ldr	r3, [pc, #668]	; (8006570 <_dtoa_r+0x2d0>)
 80062d2:	21ea      	movs	r1, #234	; 0xea
 80062d4:	48a7      	ldr	r0, [pc, #668]	; (8006574 <_dtoa_r+0x2d4>)
 80062d6:	f001 fbd1 	bl	8007a7c <__assert_func>
 80062da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062de:	6005      	str	r5, [r0, #0]
 80062e0:	60c5      	str	r5, [r0, #12]
 80062e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	b151      	cbz	r1, 80062fe <_dtoa_r+0x5e>
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	604a      	str	r2, [r1, #4]
 80062ec:	2301      	movs	r3, #1
 80062ee:	4093      	lsls	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fe1c 	bl	8006f30 <_Bfree>
 80062f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	1e3b      	subs	r3, r7, #0
 8006300:	bfaa      	itet	ge
 8006302:	2300      	movge	r3, #0
 8006304:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006308:	f8c8 3000 	strge.w	r3, [r8]
 800630c:	4b9a      	ldr	r3, [pc, #616]	; (8006578 <_dtoa_r+0x2d8>)
 800630e:	bfbc      	itt	lt
 8006310:	2201      	movlt	r2, #1
 8006312:	f8c8 2000 	strlt.w	r2, [r8]
 8006316:	ea33 030b 	bics.w	r3, r3, fp
 800631a:	d11b      	bne.n	8006354 <_dtoa_r+0xb4>
 800631c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800631e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006328:	4333      	orrs	r3, r6
 800632a:	f000 8592 	beq.w	8006e52 <_dtoa_r+0xbb2>
 800632e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006330:	b963      	cbnz	r3, 800634c <_dtoa_r+0xac>
 8006332:	4b92      	ldr	r3, [pc, #584]	; (800657c <_dtoa_r+0x2dc>)
 8006334:	e022      	b.n	800637c <_dtoa_r+0xdc>
 8006336:	4b92      	ldr	r3, [pc, #584]	; (8006580 <_dtoa_r+0x2e0>)
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	3308      	adds	r3, #8
 800633c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	9801      	ldr	r0, [sp, #4]
 8006342:	b013      	add	sp, #76	; 0x4c
 8006344:	ecbd 8b04 	vpop	{d8-d9}
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	4b8b      	ldr	r3, [pc, #556]	; (800657c <_dtoa_r+0x2dc>)
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	3303      	adds	r3, #3
 8006352:	e7f3      	b.n	800633c <_dtoa_r+0x9c>
 8006354:	2200      	movs	r2, #0
 8006356:	2300      	movs	r3, #0
 8006358:	4650      	mov	r0, sl
 800635a:	4659      	mov	r1, fp
 800635c:	f7fa fbdc 	bl	8000b18 <__aeabi_dcmpeq>
 8006360:	ec4b ab19 	vmov	d9, sl, fp
 8006364:	4680      	mov	r8, r0
 8006366:	b158      	cbz	r0, 8006380 <_dtoa_r+0xe0>
 8006368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800636a:	2301      	movs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 856b 	beq.w	8006e4c <_dtoa_r+0xbac>
 8006376:	4883      	ldr	r0, [pc, #524]	; (8006584 <_dtoa_r+0x2e4>)
 8006378:	6018      	str	r0, [r3, #0]
 800637a:	1e43      	subs	r3, r0, #1
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	e7df      	b.n	8006340 <_dtoa_r+0xa0>
 8006380:	ec4b ab10 	vmov	d0, sl, fp
 8006384:	aa10      	add	r2, sp, #64	; 0x40
 8006386:	a911      	add	r1, sp, #68	; 0x44
 8006388:	4620      	mov	r0, r4
 800638a:	f001 f8b9 	bl	8007500 <__d2b>
 800638e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006392:	ee08 0a10 	vmov	s16, r0
 8006396:	2d00      	cmp	r5, #0
 8006398:	f000 8084 	beq.w	80064a4 <_dtoa_r+0x204>
 800639c:	ee19 3a90 	vmov	r3, s19
 80063a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063a8:	4656      	mov	r6, sl
 80063aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80063b6:	4b74      	ldr	r3, [pc, #464]	; (8006588 <_dtoa_r+0x2e8>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	4630      	mov	r0, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	f7f9 ff8b 	bl	80002d8 <__aeabi_dsub>
 80063c2:	a365      	add	r3, pc, #404	; (adr r3, 8006558 <_dtoa_r+0x2b8>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f7fa f93e 	bl	8000648 <__aeabi_dmul>
 80063cc:	a364      	add	r3, pc, #400	; (adr r3, 8006560 <_dtoa_r+0x2c0>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7f9 ff83 	bl	80002dc <__adddf3>
 80063d6:	4606      	mov	r6, r0
 80063d8:	4628      	mov	r0, r5
 80063da:	460f      	mov	r7, r1
 80063dc:	f7fa f8ca 	bl	8000574 <__aeabi_i2d>
 80063e0:	a361      	add	r3, pc, #388	; (adr r3, 8006568 <_dtoa_r+0x2c8>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7fa f92f 	bl	8000648 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7f9 ff73 	bl	80002dc <__adddf3>
 80063f6:	4606      	mov	r6, r0
 80063f8:	460f      	mov	r7, r1
 80063fa:	f7fa fbd5 	bl	8000ba8 <__aeabi_d2iz>
 80063fe:	2200      	movs	r2, #0
 8006400:	9000      	str	r0, [sp, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f7fa fb90 	bl	8000b2c <__aeabi_dcmplt>
 800640c:	b150      	cbz	r0, 8006424 <_dtoa_r+0x184>
 800640e:	9800      	ldr	r0, [sp, #0]
 8006410:	f7fa f8b0 	bl	8000574 <__aeabi_i2d>
 8006414:	4632      	mov	r2, r6
 8006416:	463b      	mov	r3, r7
 8006418:	f7fa fb7e 	bl	8000b18 <__aeabi_dcmpeq>
 800641c:	b910      	cbnz	r0, 8006424 <_dtoa_r+0x184>
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	9b00      	ldr	r3, [sp, #0]
 8006426:	2b16      	cmp	r3, #22
 8006428:	d85a      	bhi.n	80064e0 <_dtoa_r+0x240>
 800642a:	9a00      	ldr	r2, [sp, #0]
 800642c:	4b57      	ldr	r3, [pc, #348]	; (800658c <_dtoa_r+0x2ec>)
 800642e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	ec51 0b19 	vmov	r0, r1, d9
 800643a:	f7fa fb77 	bl	8000b2c <__aeabi_dcmplt>
 800643e:	2800      	cmp	r0, #0
 8006440:	d050      	beq.n	80064e4 <_dtoa_r+0x244>
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	3b01      	subs	r3, #1
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	930b      	str	r3, [sp, #44]	; 0x2c
 800644c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800644e:	1b5d      	subs	r5, r3, r5
 8006450:	1e6b      	subs	r3, r5, #1
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	bf45      	ittet	mi
 8006456:	f1c5 0301 	rsbmi	r3, r5, #1
 800645a:	9304      	strmi	r3, [sp, #16]
 800645c:	2300      	movpl	r3, #0
 800645e:	2300      	movmi	r3, #0
 8006460:	bf4c      	ite	mi
 8006462:	9305      	strmi	r3, [sp, #20]
 8006464:	9304      	strpl	r3, [sp, #16]
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	db3d      	blt.n	80064e8 <_dtoa_r+0x248>
 800646c:	9b05      	ldr	r3, [sp, #20]
 800646e:	9a00      	ldr	r2, [sp, #0]
 8006470:	920a      	str	r2, [sp, #40]	; 0x28
 8006472:	4413      	add	r3, r2
 8006474:	9305      	str	r3, [sp, #20]
 8006476:	2300      	movs	r3, #0
 8006478:	9307      	str	r3, [sp, #28]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	2b09      	cmp	r3, #9
 800647e:	f200 8089 	bhi.w	8006594 <_dtoa_r+0x2f4>
 8006482:	2b05      	cmp	r3, #5
 8006484:	bfc4      	itt	gt
 8006486:	3b04      	subgt	r3, #4
 8006488:	9306      	strgt	r3, [sp, #24]
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	f1a3 0302 	sub.w	r3, r3, #2
 8006490:	bfcc      	ite	gt
 8006492:	2500      	movgt	r5, #0
 8006494:	2501      	movle	r5, #1
 8006496:	2b03      	cmp	r3, #3
 8006498:	f200 8087 	bhi.w	80065aa <_dtoa_r+0x30a>
 800649c:	e8df f003 	tbb	[pc, r3]
 80064a0:	59383a2d 	.word	0x59383a2d
 80064a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064a8:	441d      	add	r5, r3
 80064aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	bfc1      	itttt	gt
 80064b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80064be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064c2:	bfda      	itte	le
 80064c4:	f1c3 0320 	rsble	r3, r3, #32
 80064c8:	fa06 f003 	lslle.w	r0, r6, r3
 80064cc:	4318      	orrgt	r0, r3
 80064ce:	f7fa f841 	bl	8000554 <__aeabi_ui2d>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4606      	mov	r6, r0
 80064d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064da:	3d01      	subs	r5, #1
 80064dc:	930e      	str	r3, [sp, #56]	; 0x38
 80064de:	e76a      	b.n	80063b6 <_dtoa_r+0x116>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e7b2      	b.n	800644a <_dtoa_r+0x1aa>
 80064e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80064e6:	e7b1      	b.n	800644c <_dtoa_r+0x1ac>
 80064e8:	9b04      	ldr	r3, [sp, #16]
 80064ea:	9a00      	ldr	r2, [sp, #0]
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	9304      	str	r3, [sp, #16]
 80064f0:	4253      	negs	r3, r2
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	2300      	movs	r3, #0
 80064f6:	930a      	str	r3, [sp, #40]	; 0x28
 80064f8:	e7bf      	b.n	800647a <_dtoa_r+0x1da>
 80064fa:	2300      	movs	r3, #0
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc55      	bgt.n	80065b0 <_dtoa_r+0x310>
 8006504:	2301      	movs	r3, #1
 8006506:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800650a:	461a      	mov	r2, r3
 800650c:	9209      	str	r2, [sp, #36]	; 0x24
 800650e:	e00c      	b.n	800652a <_dtoa_r+0x28a>
 8006510:	2301      	movs	r3, #1
 8006512:	e7f3      	b.n	80064fc <_dtoa_r+0x25c>
 8006514:	2300      	movs	r3, #0
 8006516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	9b00      	ldr	r3, [sp, #0]
 800651c:	4413      	add	r3, r2
 800651e:	9302      	str	r3, [sp, #8]
 8006520:	3301      	adds	r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	9303      	str	r3, [sp, #12]
 8006526:	bfb8      	it	lt
 8006528:	2301      	movlt	r3, #1
 800652a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800652c:	2200      	movs	r2, #0
 800652e:	6042      	str	r2, [r0, #4]
 8006530:	2204      	movs	r2, #4
 8006532:	f102 0614 	add.w	r6, r2, #20
 8006536:	429e      	cmp	r6, r3
 8006538:	6841      	ldr	r1, [r0, #4]
 800653a:	d93d      	bls.n	80065b8 <_dtoa_r+0x318>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 fcb7 	bl	8006eb0 <_Balloc>
 8006542:	9001      	str	r0, [sp, #4]
 8006544:	2800      	cmp	r0, #0
 8006546:	d13b      	bne.n	80065c0 <_dtoa_r+0x320>
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <_dtoa_r+0x2f0>)
 800654a:	4602      	mov	r2, r0
 800654c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006550:	e6c0      	b.n	80062d4 <_dtoa_r+0x34>
 8006552:	2301      	movs	r3, #1
 8006554:	e7df      	b.n	8006516 <_dtoa_r+0x276>
 8006556:	bf00      	nop
 8006558:	636f4361 	.word	0x636f4361
 800655c:	3fd287a7 	.word	0x3fd287a7
 8006560:	8b60c8b3 	.word	0x8b60c8b3
 8006564:	3fc68a28 	.word	0x3fc68a28
 8006568:	509f79fb 	.word	0x509f79fb
 800656c:	3fd34413 	.word	0x3fd34413
 8006570:	080088e9 	.word	0x080088e9
 8006574:	08008900 	.word	0x08008900
 8006578:	7ff00000 	.word	0x7ff00000
 800657c:	080088e5 	.word	0x080088e5
 8006580:	080088dc 	.word	0x080088dc
 8006584:	080088b9 	.word	0x080088b9
 8006588:	3ff80000 	.word	0x3ff80000
 800658c:	080089f0 	.word	0x080089f0
 8006590:	0800895b 	.word	0x0800895b
 8006594:	2501      	movs	r5, #1
 8006596:	2300      	movs	r3, #0
 8006598:	9306      	str	r3, [sp, #24]
 800659a:	9508      	str	r5, [sp, #32]
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2312      	movs	r3, #18
 80065a8:	e7b0      	b.n	800650c <_dtoa_r+0x26c>
 80065aa:	2301      	movs	r3, #1
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	e7f5      	b.n	800659c <_dtoa_r+0x2fc>
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065b6:	e7b8      	b.n	800652a <_dtoa_r+0x28a>
 80065b8:	3101      	adds	r1, #1
 80065ba:	6041      	str	r1, [r0, #4]
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	e7b8      	b.n	8006532 <_dtoa_r+0x292>
 80065c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c2:	9a01      	ldr	r2, [sp, #4]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	2b0e      	cmp	r3, #14
 80065ca:	f200 809d 	bhi.w	8006708 <_dtoa_r+0x468>
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	f000 809a 	beq.w	8006708 <_dtoa_r+0x468>
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dd32      	ble.n	8006640 <_dtoa_r+0x3a0>
 80065da:	4ab7      	ldr	r2, [pc, #732]	; (80068b8 <_dtoa_r+0x618>)
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	05d8      	lsls	r0, r3, #23
 80065ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065f0:	d516      	bpl.n	8006620 <_dtoa_r+0x380>
 80065f2:	4bb2      	ldr	r3, [pc, #712]	; (80068bc <_dtoa_r+0x61c>)
 80065f4:	ec51 0b19 	vmov	r0, r1, d9
 80065f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065fc:	f7fa f94e 	bl	800089c <__aeabi_ddiv>
 8006600:	f007 070f 	and.w	r7, r7, #15
 8006604:	4682      	mov	sl, r0
 8006606:	468b      	mov	fp, r1
 8006608:	2503      	movs	r5, #3
 800660a:	4eac      	ldr	r6, [pc, #688]	; (80068bc <_dtoa_r+0x61c>)
 800660c:	b957      	cbnz	r7, 8006624 <_dtoa_r+0x384>
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	4650      	mov	r0, sl
 8006614:	4659      	mov	r1, fp
 8006616:	f7fa f941 	bl	800089c <__aeabi_ddiv>
 800661a:	4682      	mov	sl, r0
 800661c:	468b      	mov	fp, r1
 800661e:	e028      	b.n	8006672 <_dtoa_r+0x3d2>
 8006620:	2502      	movs	r5, #2
 8006622:	e7f2      	b.n	800660a <_dtoa_r+0x36a>
 8006624:	07f9      	lsls	r1, r7, #31
 8006626:	d508      	bpl.n	800663a <_dtoa_r+0x39a>
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006630:	f7fa f80a 	bl	8000648 <__aeabi_dmul>
 8006634:	3501      	adds	r5, #1
 8006636:	4680      	mov	r8, r0
 8006638:	4689      	mov	r9, r1
 800663a:	107f      	asrs	r7, r7, #1
 800663c:	3608      	adds	r6, #8
 800663e:	e7e5      	b.n	800660c <_dtoa_r+0x36c>
 8006640:	f000 809b 	beq.w	800677a <_dtoa_r+0x4da>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	4f9d      	ldr	r7, [pc, #628]	; (80068bc <_dtoa_r+0x61c>)
 8006648:	425e      	negs	r6, r3
 800664a:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <_dtoa_r+0x618>)
 800664c:	f006 020f 	and.w	r2, r6, #15
 8006650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	ec51 0b19 	vmov	r0, r1, d9
 800665c:	f7f9 fff4 	bl	8000648 <__aeabi_dmul>
 8006660:	1136      	asrs	r6, r6, #4
 8006662:	4682      	mov	sl, r0
 8006664:	468b      	mov	fp, r1
 8006666:	2300      	movs	r3, #0
 8006668:	2502      	movs	r5, #2
 800666a:	2e00      	cmp	r6, #0
 800666c:	d17a      	bne.n	8006764 <_dtoa_r+0x4c4>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1d3      	bne.n	800661a <_dtoa_r+0x37a>
 8006672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8082 	beq.w	800677e <_dtoa_r+0x4de>
 800667a:	4b91      	ldr	r3, [pc, #580]	; (80068c0 <_dtoa_r+0x620>)
 800667c:	2200      	movs	r2, #0
 800667e:	4650      	mov	r0, sl
 8006680:	4659      	mov	r1, fp
 8006682:	f7fa fa53 	bl	8000b2c <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	d079      	beq.n	800677e <_dtoa_r+0x4de>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d076      	beq.n	800677e <_dtoa_r+0x4de>
 8006690:	9b02      	ldr	r3, [sp, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	dd36      	ble.n	8006704 <_dtoa_r+0x464>
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	1e5f      	subs	r7, r3, #1
 800669e:	2200      	movs	r2, #0
 80066a0:	4b88      	ldr	r3, [pc, #544]	; (80068c4 <_dtoa_r+0x624>)
 80066a2:	f7f9 ffd1 	bl	8000648 <__aeabi_dmul>
 80066a6:	9e02      	ldr	r6, [sp, #8]
 80066a8:	4682      	mov	sl, r0
 80066aa:	468b      	mov	fp, r1
 80066ac:	3501      	adds	r5, #1
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7f9 ff60 	bl	8000574 <__aeabi_i2d>
 80066b4:	4652      	mov	r2, sl
 80066b6:	465b      	mov	r3, fp
 80066b8:	f7f9 ffc6 	bl	8000648 <__aeabi_dmul>
 80066bc:	4b82      	ldr	r3, [pc, #520]	; (80068c8 <_dtoa_r+0x628>)
 80066be:	2200      	movs	r2, #0
 80066c0:	f7f9 fe0c 	bl	80002dc <__adddf3>
 80066c4:	46d0      	mov	r8, sl
 80066c6:	46d9      	mov	r9, fp
 80066c8:	4682      	mov	sl, r0
 80066ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	d158      	bne.n	8006784 <_dtoa_r+0x4e4>
 80066d2:	4b7e      	ldr	r3, [pc, #504]	; (80068cc <_dtoa_r+0x62c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	4640      	mov	r0, r8
 80066d8:	4649      	mov	r1, r9
 80066da:	f7f9 fdfd 	bl	80002d8 <__aeabi_dsub>
 80066de:	4652      	mov	r2, sl
 80066e0:	465b      	mov	r3, fp
 80066e2:	4680      	mov	r8, r0
 80066e4:	4689      	mov	r9, r1
 80066e6:	f7fa fa3f 	bl	8000b68 <__aeabi_dcmpgt>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f040 8295 	bne.w	8006c1a <_dtoa_r+0x97a>
 80066f0:	4652      	mov	r2, sl
 80066f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7fa fa17 	bl	8000b2c <__aeabi_dcmplt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f040 8289 	bne.w	8006c16 <_dtoa_r+0x976>
 8006704:	ec5b ab19 	vmov	sl, fp, d9
 8006708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800670a:	2b00      	cmp	r3, #0
 800670c:	f2c0 8148 	blt.w	80069a0 <_dtoa_r+0x700>
 8006710:	9a00      	ldr	r2, [sp, #0]
 8006712:	2a0e      	cmp	r2, #14
 8006714:	f300 8144 	bgt.w	80069a0 <_dtoa_r+0x700>
 8006718:	4b67      	ldr	r3, [pc, #412]	; (80068b8 <_dtoa_r+0x618>)
 800671a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800671e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	f280 80d5 	bge.w	80068d4 <_dtoa_r+0x634>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f300 80d1 	bgt.w	80068d4 <_dtoa_r+0x634>
 8006732:	f040 826f 	bne.w	8006c14 <_dtoa_r+0x974>
 8006736:	4b65      	ldr	r3, [pc, #404]	; (80068cc <_dtoa_r+0x62c>)
 8006738:	2200      	movs	r2, #0
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 ff83 	bl	8000648 <__aeabi_dmul>
 8006742:	4652      	mov	r2, sl
 8006744:	465b      	mov	r3, fp
 8006746:	f7fa fa05 	bl	8000b54 <__aeabi_dcmpge>
 800674a:	9e03      	ldr	r6, [sp, #12]
 800674c:	4637      	mov	r7, r6
 800674e:	2800      	cmp	r0, #0
 8006750:	f040 8245 	bne.w	8006bde <_dtoa_r+0x93e>
 8006754:	9d01      	ldr	r5, [sp, #4]
 8006756:	2331      	movs	r3, #49	; 0x31
 8006758:	f805 3b01 	strb.w	r3, [r5], #1
 800675c:	9b00      	ldr	r3, [sp, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	e240      	b.n	8006be6 <_dtoa_r+0x946>
 8006764:	07f2      	lsls	r2, r6, #31
 8006766:	d505      	bpl.n	8006774 <_dtoa_r+0x4d4>
 8006768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676c:	f7f9 ff6c 	bl	8000648 <__aeabi_dmul>
 8006770:	3501      	adds	r5, #1
 8006772:	2301      	movs	r3, #1
 8006774:	1076      	asrs	r6, r6, #1
 8006776:	3708      	adds	r7, #8
 8006778:	e777      	b.n	800666a <_dtoa_r+0x3ca>
 800677a:	2502      	movs	r5, #2
 800677c:	e779      	b.n	8006672 <_dtoa_r+0x3d2>
 800677e:	9f00      	ldr	r7, [sp, #0]
 8006780:	9e03      	ldr	r6, [sp, #12]
 8006782:	e794      	b.n	80066ae <_dtoa_r+0x40e>
 8006784:	9901      	ldr	r1, [sp, #4]
 8006786:	4b4c      	ldr	r3, [pc, #304]	; (80068b8 <_dtoa_r+0x618>)
 8006788:	4431      	add	r1, r6
 800678a:	910d      	str	r1, [sp, #52]	; 0x34
 800678c:	9908      	ldr	r1, [sp, #32]
 800678e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006796:	2900      	cmp	r1, #0
 8006798:	d043      	beq.n	8006822 <_dtoa_r+0x582>
 800679a:	494d      	ldr	r1, [pc, #308]	; (80068d0 <_dtoa_r+0x630>)
 800679c:	2000      	movs	r0, #0
 800679e:	f7fa f87d 	bl	800089c <__aeabi_ddiv>
 80067a2:	4652      	mov	r2, sl
 80067a4:	465b      	mov	r3, fp
 80067a6:	f7f9 fd97 	bl	80002d8 <__aeabi_dsub>
 80067aa:	9d01      	ldr	r5, [sp, #4]
 80067ac:	4682      	mov	sl, r0
 80067ae:	468b      	mov	fp, r1
 80067b0:	4649      	mov	r1, r9
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7fa f9f8 	bl	8000ba8 <__aeabi_d2iz>
 80067b8:	4606      	mov	r6, r0
 80067ba:	f7f9 fedb 	bl	8000574 <__aeabi_i2d>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 fd87 	bl	80002d8 <__aeabi_dsub>
 80067ca:	3630      	adds	r6, #48	; 0x30
 80067cc:	f805 6b01 	strb.w	r6, [r5], #1
 80067d0:	4652      	mov	r2, sl
 80067d2:	465b      	mov	r3, fp
 80067d4:	4680      	mov	r8, r0
 80067d6:	4689      	mov	r9, r1
 80067d8:	f7fa f9a8 	bl	8000b2c <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d163      	bne.n	80068a8 <_dtoa_r+0x608>
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	4936      	ldr	r1, [pc, #216]	; (80068c0 <_dtoa_r+0x620>)
 80067e6:	2000      	movs	r0, #0
 80067e8:	f7f9 fd76 	bl	80002d8 <__aeabi_dsub>
 80067ec:	4652      	mov	r2, sl
 80067ee:	465b      	mov	r3, fp
 80067f0:	f7fa f99c 	bl	8000b2c <__aeabi_dcmplt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f040 80b5 	bne.w	8006964 <_dtoa_r+0x6c4>
 80067fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067fc:	429d      	cmp	r5, r3
 80067fe:	d081      	beq.n	8006704 <_dtoa_r+0x464>
 8006800:	4b30      	ldr	r3, [pc, #192]	; (80068c4 <_dtoa_r+0x624>)
 8006802:	2200      	movs	r2, #0
 8006804:	4650      	mov	r0, sl
 8006806:	4659      	mov	r1, fp
 8006808:	f7f9 ff1e 	bl	8000648 <__aeabi_dmul>
 800680c:	4b2d      	ldr	r3, [pc, #180]	; (80068c4 <_dtoa_r+0x624>)
 800680e:	4682      	mov	sl, r0
 8006810:	468b      	mov	fp, r1
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	2200      	movs	r2, #0
 8006818:	f7f9 ff16 	bl	8000648 <__aeabi_dmul>
 800681c:	4680      	mov	r8, r0
 800681e:	4689      	mov	r9, r1
 8006820:	e7c6      	b.n	80067b0 <_dtoa_r+0x510>
 8006822:	4650      	mov	r0, sl
 8006824:	4659      	mov	r1, fp
 8006826:	f7f9 ff0f 	bl	8000648 <__aeabi_dmul>
 800682a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682c:	9d01      	ldr	r5, [sp, #4]
 800682e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	4649      	mov	r1, r9
 8006836:	4640      	mov	r0, r8
 8006838:	f7fa f9b6 	bl	8000ba8 <__aeabi_d2iz>
 800683c:	4606      	mov	r6, r0
 800683e:	f7f9 fe99 	bl	8000574 <__aeabi_i2d>
 8006842:	3630      	adds	r6, #48	; 0x30
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4640      	mov	r0, r8
 800684a:	4649      	mov	r1, r9
 800684c:	f7f9 fd44 	bl	80002d8 <__aeabi_dsub>
 8006850:	f805 6b01 	strb.w	r6, [r5], #1
 8006854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006856:	429d      	cmp	r5, r3
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	d124      	bne.n	80068ac <_dtoa_r+0x60c>
 8006862:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <_dtoa_r+0x630>)
 8006864:	4650      	mov	r0, sl
 8006866:	4659      	mov	r1, fp
 8006868:	f7f9 fd38 	bl	80002dc <__adddf3>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7fa f978 	bl	8000b68 <__aeabi_dcmpgt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d173      	bne.n	8006964 <_dtoa_r+0x6c4>
 800687c:	4652      	mov	r2, sl
 800687e:	465b      	mov	r3, fp
 8006880:	4913      	ldr	r1, [pc, #76]	; (80068d0 <_dtoa_r+0x630>)
 8006882:	2000      	movs	r0, #0
 8006884:	f7f9 fd28 	bl	80002d8 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4640      	mov	r0, r8
 800688e:	4649      	mov	r1, r9
 8006890:	f7fa f94c 	bl	8000b2c <__aeabi_dcmplt>
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f af35 	beq.w	8006704 <_dtoa_r+0x464>
 800689a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800689c:	1e6b      	subs	r3, r5, #1
 800689e:	930f      	str	r3, [sp, #60]	; 0x3c
 80068a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d0f8      	beq.n	800689a <_dtoa_r+0x5fa>
 80068a8:	9700      	str	r7, [sp, #0]
 80068aa:	e049      	b.n	8006940 <_dtoa_r+0x6a0>
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_dtoa_r+0x624>)
 80068ae:	f7f9 fecb 	bl	8000648 <__aeabi_dmul>
 80068b2:	4680      	mov	r8, r0
 80068b4:	4689      	mov	r9, r1
 80068b6:	e7bd      	b.n	8006834 <_dtoa_r+0x594>
 80068b8:	080089f0 	.word	0x080089f0
 80068bc:	080089c8 	.word	0x080089c8
 80068c0:	3ff00000 	.word	0x3ff00000
 80068c4:	40240000 	.word	0x40240000
 80068c8:	401c0000 	.word	0x401c0000
 80068cc:	40140000 	.word	0x40140000
 80068d0:	3fe00000 	.word	0x3fe00000
 80068d4:	9d01      	ldr	r5, [sp, #4]
 80068d6:	4656      	mov	r6, sl
 80068d8:	465f      	mov	r7, fp
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 ffdb 	bl	800089c <__aeabi_ddiv>
 80068e6:	f7fa f95f 	bl	8000ba8 <__aeabi_d2iz>
 80068ea:	4682      	mov	sl, r0
 80068ec:	f7f9 fe42 	bl	8000574 <__aeabi_i2d>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	f7f9 fea8 	bl	8000648 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006904:	f7f9 fce8 	bl	80002d8 <__aeabi_dsub>
 8006908:	f805 6b01 	strb.w	r6, [r5], #1
 800690c:	9e01      	ldr	r6, [sp, #4]
 800690e:	9f03      	ldr	r7, [sp, #12]
 8006910:	1bae      	subs	r6, r5, r6
 8006912:	42b7      	cmp	r7, r6
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	d135      	bne.n	8006986 <_dtoa_r+0x6e6>
 800691a:	f7f9 fcdf 	bl	80002dc <__adddf3>
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	f7fa f91f 	bl	8000b68 <__aeabi_dcmpgt>
 800692a:	b9d0      	cbnz	r0, 8006962 <_dtoa_r+0x6c2>
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	f7fa f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 8006938:	b110      	cbz	r0, 8006940 <_dtoa_r+0x6a0>
 800693a:	f01a 0f01 	tst.w	sl, #1
 800693e:	d110      	bne.n	8006962 <_dtoa_r+0x6c2>
 8006940:	4620      	mov	r0, r4
 8006942:	ee18 1a10 	vmov	r1, s16
 8006946:	f000 faf3 	bl	8006f30 <_Bfree>
 800694a:	2300      	movs	r3, #0
 800694c:	9800      	ldr	r0, [sp, #0]
 800694e:	702b      	strb	r3, [r5, #0]
 8006950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006952:	3001      	adds	r0, #1
 8006954:	6018      	str	r0, [r3, #0]
 8006956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006958:	2b00      	cmp	r3, #0
 800695a:	f43f acf1 	beq.w	8006340 <_dtoa_r+0xa0>
 800695e:	601d      	str	r5, [r3, #0]
 8006960:	e4ee      	b.n	8006340 <_dtoa_r+0xa0>
 8006962:	9f00      	ldr	r7, [sp, #0]
 8006964:	462b      	mov	r3, r5
 8006966:	461d      	mov	r5, r3
 8006968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696c:	2a39      	cmp	r2, #57	; 0x39
 800696e:	d106      	bne.n	800697e <_dtoa_r+0x6de>
 8006970:	9a01      	ldr	r2, [sp, #4]
 8006972:	429a      	cmp	r2, r3
 8006974:	d1f7      	bne.n	8006966 <_dtoa_r+0x6c6>
 8006976:	9901      	ldr	r1, [sp, #4]
 8006978:	2230      	movs	r2, #48	; 0x30
 800697a:	3701      	adds	r7, #1
 800697c:	700a      	strb	r2, [r1, #0]
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	3201      	adds	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	e790      	b.n	80068a8 <_dtoa_r+0x608>
 8006986:	4ba6      	ldr	r3, [pc, #664]	; (8006c20 <_dtoa_r+0x980>)
 8006988:	2200      	movs	r2, #0
 800698a:	f7f9 fe5d 	bl	8000648 <__aeabi_dmul>
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4606      	mov	r6, r0
 8006994:	460f      	mov	r7, r1
 8006996:	f7fa f8bf 	bl	8000b18 <__aeabi_dcmpeq>
 800699a:	2800      	cmp	r0, #0
 800699c:	d09d      	beq.n	80068da <_dtoa_r+0x63a>
 800699e:	e7cf      	b.n	8006940 <_dtoa_r+0x6a0>
 80069a0:	9a08      	ldr	r2, [sp, #32]
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	f000 80d7 	beq.w	8006b56 <_dtoa_r+0x8b6>
 80069a8:	9a06      	ldr	r2, [sp, #24]
 80069aa:	2a01      	cmp	r2, #1
 80069ac:	f300 80ba 	bgt.w	8006b24 <_dtoa_r+0x884>
 80069b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	f000 80b2 	beq.w	8006b1c <_dtoa_r+0x87c>
 80069b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069bc:	9e07      	ldr	r6, [sp, #28]
 80069be:	9d04      	ldr	r5, [sp, #16]
 80069c0:	9a04      	ldr	r2, [sp, #16]
 80069c2:	441a      	add	r2, r3
 80069c4:	9204      	str	r2, [sp, #16]
 80069c6:	9a05      	ldr	r2, [sp, #20]
 80069c8:	2101      	movs	r1, #1
 80069ca:	441a      	add	r2, r3
 80069cc:	4620      	mov	r0, r4
 80069ce:	9205      	str	r2, [sp, #20]
 80069d0:	f000 fb66 	bl	80070a0 <__i2b>
 80069d4:	4607      	mov	r7, r0
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	dd0c      	ble.n	80069f4 <_dtoa_r+0x754>
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd09      	ble.n	80069f4 <_dtoa_r+0x754>
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	bfa8      	it	ge
 80069e6:	462b      	movge	r3, r5
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	9204      	str	r2, [sp, #16]
 80069ec:	9a05      	ldr	r2, [sp, #20]
 80069ee:	1aed      	subs	r5, r5, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	9b07      	ldr	r3, [sp, #28]
 80069f6:	b31b      	cbz	r3, 8006a40 <_dtoa_r+0x7a0>
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80af 	beq.w	8006b5e <_dtoa_r+0x8be>
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	dd13      	ble.n	8006a2c <_dtoa_r+0x78c>
 8006a04:	4639      	mov	r1, r7
 8006a06:	4632      	mov	r2, r6
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fc09 	bl	8007220 <__pow5mult>
 8006a0e:	ee18 2a10 	vmov	r2, s16
 8006a12:	4601      	mov	r1, r0
 8006a14:	4607      	mov	r7, r0
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fb58 	bl	80070cc <__multiply>
 8006a1c:	ee18 1a10 	vmov	r1, s16
 8006a20:	4680      	mov	r8, r0
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fa84 	bl	8006f30 <_Bfree>
 8006a28:	ee08 8a10 	vmov	s16, r8
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	1b9a      	subs	r2, r3, r6
 8006a30:	d006      	beq.n	8006a40 <_dtoa_r+0x7a0>
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 fbf2 	bl	8007220 <__pow5mult>
 8006a3c:	ee08 0a10 	vmov	s16, r0
 8006a40:	2101      	movs	r1, #1
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fb2c 	bl	80070a0 <__i2b>
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	f340 8088 	ble.w	8006b62 <_dtoa_r+0x8c2>
 8006a52:	461a      	mov	r2, r3
 8006a54:	4601      	mov	r1, r0
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 fbe2 	bl	8007220 <__pow5mult>
 8006a5c:	9b06      	ldr	r3, [sp, #24]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	4606      	mov	r6, r0
 8006a62:	f340 8081 	ble.w	8006b68 <_dtoa_r+0x8c8>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	6933      	ldr	r3, [r6, #16]
 8006a6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a70:	6918      	ldr	r0, [r3, #16]
 8006a72:	f000 fac5 	bl	8007000 <__hi0bits>
 8006a76:	f1c0 0020 	rsb	r0, r0, #32
 8006a7a:	9b05      	ldr	r3, [sp, #20]
 8006a7c:	4418      	add	r0, r3
 8006a7e:	f010 001f 	ands.w	r0, r0, #31
 8006a82:	f000 8092 	beq.w	8006baa <_dtoa_r+0x90a>
 8006a86:	f1c0 0320 	rsb	r3, r0, #32
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	f340 808a 	ble.w	8006ba4 <_dtoa_r+0x904>
 8006a90:	f1c0 001c 	rsb	r0, r0, #28
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	4403      	add	r3, r0
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	9b05      	ldr	r3, [sp, #20]
 8006a9c:	4403      	add	r3, r0
 8006a9e:	4405      	add	r5, r0
 8006aa0:	9305      	str	r3, [sp, #20]
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dd07      	ble.n	8006ab8 <_dtoa_r+0x818>
 8006aa8:	ee18 1a10 	vmov	r1, s16
 8006aac:	461a      	mov	r2, r3
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fc10 	bl	80072d4 <__lshift>
 8006ab4:	ee08 0a10 	vmov	s16, r0
 8006ab8:	9b05      	ldr	r3, [sp, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	dd05      	ble.n	8006aca <_dtoa_r+0x82a>
 8006abe:	4631      	mov	r1, r6
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fc06 	bl	80072d4 <__lshift>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d06e      	beq.n	8006bae <_dtoa_r+0x90e>
 8006ad0:	ee18 0a10 	vmov	r0, s16
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	f000 fc6d 	bl	80073b4 <__mcmp>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	da67      	bge.n	8006bae <_dtoa_r+0x90e>
 8006ade:	9b00      	ldr	r3, [sp, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	ee18 1a10 	vmov	r1, s16
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	220a      	movs	r2, #10
 8006aea:	2300      	movs	r3, #0
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 fa41 	bl	8006f74 <__multadd>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	ee08 0a10 	vmov	s16, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 81b1 	beq.w	8006e60 <_dtoa_r+0xbc0>
 8006afe:	2300      	movs	r3, #0
 8006b00:	4639      	mov	r1, r7
 8006b02:	220a      	movs	r2, #10
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fa35 	bl	8006f74 <__multadd>
 8006b0a:	9b02      	ldr	r3, [sp, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	4607      	mov	r7, r0
 8006b10:	f300 808e 	bgt.w	8006c30 <_dtoa_r+0x990>
 8006b14:	9b06      	ldr	r3, [sp, #24]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	dc51      	bgt.n	8006bbe <_dtoa_r+0x91e>
 8006b1a:	e089      	b.n	8006c30 <_dtoa_r+0x990>
 8006b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b22:	e74b      	b.n	80069bc <_dtoa_r+0x71c>
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	1e5e      	subs	r6, r3, #1
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	bfbf      	itttt	lt
 8006b2e:	9b07      	ldrlt	r3, [sp, #28]
 8006b30:	9607      	strlt	r6, [sp, #28]
 8006b32:	1af2      	sublt	r2, r6, r3
 8006b34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b36:	bfb6      	itet	lt
 8006b38:	189b      	addlt	r3, r3, r2
 8006b3a:	1b9e      	subge	r6, r3, r6
 8006b3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	bfb8      	it	lt
 8006b42:	2600      	movlt	r6, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bfb7      	itett	lt
 8006b48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b50:	1a9d      	sublt	r5, r3, r2
 8006b52:	2300      	movlt	r3, #0
 8006b54:	e734      	b.n	80069c0 <_dtoa_r+0x720>
 8006b56:	9e07      	ldr	r6, [sp, #28]
 8006b58:	9d04      	ldr	r5, [sp, #16]
 8006b5a:	9f08      	ldr	r7, [sp, #32]
 8006b5c:	e73b      	b.n	80069d6 <_dtoa_r+0x736>
 8006b5e:	9a07      	ldr	r2, [sp, #28]
 8006b60:	e767      	b.n	8006a32 <_dtoa_r+0x792>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	dc18      	bgt.n	8006b9a <_dtoa_r+0x8fa>
 8006b68:	f1ba 0f00 	cmp.w	sl, #0
 8006b6c:	d115      	bne.n	8006b9a <_dtoa_r+0x8fa>
 8006b6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b72:	b993      	cbnz	r3, 8006b9a <_dtoa_r+0x8fa>
 8006b74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b78:	0d1b      	lsrs	r3, r3, #20
 8006b7a:	051b      	lsls	r3, r3, #20
 8006b7c:	b183      	cbz	r3, 8006ba0 <_dtoa_r+0x900>
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	3301      	adds	r3, #1
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	9b05      	ldr	r3, [sp, #20]
 8006b86:	3301      	adds	r3, #1
 8006b88:	9305      	str	r3, [sp, #20]
 8006b8a:	f04f 0801 	mov.w	r8, #1
 8006b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f47f af6a 	bne.w	8006a6a <_dtoa_r+0x7ca>
 8006b96:	2001      	movs	r0, #1
 8006b98:	e76f      	b.n	8006a7a <_dtoa_r+0x7da>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	e7f6      	b.n	8006b8e <_dtoa_r+0x8ee>
 8006ba0:	4698      	mov	r8, r3
 8006ba2:	e7f4      	b.n	8006b8e <_dtoa_r+0x8ee>
 8006ba4:	f43f af7d 	beq.w	8006aa2 <_dtoa_r+0x802>
 8006ba8:	4618      	mov	r0, r3
 8006baa:	301c      	adds	r0, #28
 8006bac:	e772      	b.n	8006a94 <_dtoa_r+0x7f4>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc37      	bgt.n	8006c24 <_dtoa_r+0x984>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	dd34      	ble.n	8006c24 <_dtoa_r+0x984>
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	9b02      	ldr	r3, [sp, #8]
 8006bc0:	b96b      	cbnz	r3, 8006bde <_dtoa_r+0x93e>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 f9d4 	bl	8006f74 <__multadd>
 8006bcc:	4601      	mov	r1, r0
 8006bce:	4606      	mov	r6, r0
 8006bd0:	ee18 0a10 	vmov	r0, s16
 8006bd4:	f000 fbee 	bl	80073b4 <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f73f adbb 	bgt.w	8006754 <_dtoa_r+0x4b4>
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	9d01      	ldr	r5, [sp, #4]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	4631      	mov	r1, r6
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 f99f 	bl	8006f30 <_Bfree>
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	f43f aea4 	beq.w	8006940 <_dtoa_r+0x6a0>
 8006bf8:	f1b8 0f00 	cmp.w	r8, #0
 8006bfc:	d005      	beq.n	8006c0a <_dtoa_r+0x96a>
 8006bfe:	45b8      	cmp	r8, r7
 8006c00:	d003      	beq.n	8006c0a <_dtoa_r+0x96a>
 8006c02:	4641      	mov	r1, r8
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 f993 	bl	8006f30 <_Bfree>
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 f98f 	bl	8006f30 <_Bfree>
 8006c12:	e695      	b.n	8006940 <_dtoa_r+0x6a0>
 8006c14:	2600      	movs	r6, #0
 8006c16:	4637      	mov	r7, r6
 8006c18:	e7e1      	b.n	8006bde <_dtoa_r+0x93e>
 8006c1a:	9700      	str	r7, [sp, #0]
 8006c1c:	4637      	mov	r7, r6
 8006c1e:	e599      	b.n	8006754 <_dtoa_r+0x4b4>
 8006c20:	40240000 	.word	0x40240000
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80ca 	beq.w	8006dc0 <_dtoa_r+0xb20>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	dd05      	ble.n	8006c40 <_dtoa_r+0x9a0>
 8006c34:	4639      	mov	r1, r7
 8006c36:	462a      	mov	r2, r5
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fb4b 	bl	80072d4 <__lshift>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	d05b      	beq.n	8006cfe <_dtoa_r+0xa5e>
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 f931 	bl	8006eb0 <_Balloc>
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b928      	cbnz	r0, 8006c5e <_dtoa_r+0x9be>
 8006c52:	4b87      	ldr	r3, [pc, #540]	; (8006e70 <_dtoa_r+0xbd0>)
 8006c54:	4602      	mov	r2, r0
 8006c56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c5a:	f7ff bb3b 	b.w	80062d4 <_dtoa_r+0x34>
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	3202      	adds	r2, #2
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	f107 010c 	add.w	r1, r7, #12
 8006c68:	300c      	adds	r0, #12
 8006c6a:	f000 f913 	bl	8006e94 <memcpy>
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fb2e 	bl	80072d4 <__lshift>
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	f103 0901 	add.w	r9, r3, #1
 8006c7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	f00a 0301 	and.w	r3, sl, #1
 8006c8a:	46b8      	mov	r8, r7
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	4607      	mov	r7, r0
 8006c90:	4631      	mov	r1, r6
 8006c92:	ee18 0a10 	vmov	r0, s16
 8006c96:	f7ff fa77 	bl	8006188 <quorem>
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ca2:	ee18 0a10 	vmov	r0, s16
 8006ca6:	f000 fb85 	bl	80073b4 <__mcmp>
 8006caa:	463a      	mov	r2, r7
 8006cac:	9003      	str	r0, [sp, #12]
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fb9b 	bl	80073ec <__mdiff>
 8006cb6:	68c2      	ldr	r2, [r0, #12]
 8006cb8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	bb02      	cbnz	r2, 8006d02 <_dtoa_r+0xa62>
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	ee18 0a10 	vmov	r0, s16
 8006cc6:	f000 fb75 	bl	80073b4 <__mcmp>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4620      	mov	r0, r4
 8006cd0:	9207      	str	r2, [sp, #28]
 8006cd2:	f000 f92d 	bl	8006f30 <_Bfree>
 8006cd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006cda:	ea43 0102 	orr.w	r1, r3, r2
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	464d      	mov	r5, r9
 8006ce4:	d10f      	bne.n	8006d06 <_dtoa_r+0xa66>
 8006ce6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cea:	d02a      	beq.n	8006d42 <_dtoa_r+0xaa2>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd02      	ble.n	8006cf8 <_dtoa_r+0xa58>
 8006cf2:	9b02      	ldr	r3, [sp, #8]
 8006cf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006cf8:	f88b a000 	strb.w	sl, [fp]
 8006cfc:	e775      	b.n	8006bea <_dtoa_r+0x94a>
 8006cfe:	4638      	mov	r0, r7
 8006d00:	e7ba      	b.n	8006c78 <_dtoa_r+0x9d8>
 8006d02:	2201      	movs	r2, #1
 8006d04:	e7e2      	b.n	8006ccc <_dtoa_r+0xa2c>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	db04      	blt.n	8006d16 <_dtoa_r+0xa76>
 8006d0c:	9906      	ldr	r1, [sp, #24]
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	9904      	ldr	r1, [sp, #16]
 8006d12:	430b      	orrs	r3, r1
 8006d14:	d122      	bne.n	8006d5c <_dtoa_r+0xabc>
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	ddee      	ble.n	8006cf8 <_dtoa_r+0xa58>
 8006d1a:	ee18 1a10 	vmov	r1, s16
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fad7 	bl	80072d4 <__lshift>
 8006d26:	4631      	mov	r1, r6
 8006d28:	ee08 0a10 	vmov	s16, r0
 8006d2c:	f000 fb42 	bl	80073b4 <__mcmp>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	dc03      	bgt.n	8006d3c <_dtoa_r+0xa9c>
 8006d34:	d1e0      	bne.n	8006cf8 <_dtoa_r+0xa58>
 8006d36:	f01a 0f01 	tst.w	sl, #1
 8006d3a:	d0dd      	beq.n	8006cf8 <_dtoa_r+0xa58>
 8006d3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d40:	d1d7      	bne.n	8006cf2 <_dtoa_r+0xa52>
 8006d42:	2339      	movs	r3, #57	; 0x39
 8006d44:	f88b 3000 	strb.w	r3, [fp]
 8006d48:	462b      	mov	r3, r5
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d52:	2a39      	cmp	r2, #57	; 0x39
 8006d54:	d071      	beq.n	8006e3a <_dtoa_r+0xb9a>
 8006d56:	3201      	adds	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e746      	b.n	8006bea <_dtoa_r+0x94a>
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	dd07      	ble.n	8006d70 <_dtoa_r+0xad0>
 8006d60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d64:	d0ed      	beq.n	8006d42 <_dtoa_r+0xaa2>
 8006d66:	f10a 0301 	add.w	r3, sl, #1
 8006d6a:	f88b 3000 	strb.w	r3, [fp]
 8006d6e:	e73c      	b.n	8006bea <_dtoa_r+0x94a>
 8006d70:	9b05      	ldr	r3, [sp, #20]
 8006d72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d76:	4599      	cmp	r9, r3
 8006d78:	d047      	beq.n	8006e0a <_dtoa_r+0xb6a>
 8006d7a:	ee18 1a10 	vmov	r1, s16
 8006d7e:	2300      	movs	r3, #0
 8006d80:	220a      	movs	r2, #10
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f8f6 	bl	8006f74 <__multadd>
 8006d88:	45b8      	cmp	r8, r7
 8006d8a:	ee08 0a10 	vmov	s16, r0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	f04f 020a 	mov.w	r2, #10
 8006d96:	4641      	mov	r1, r8
 8006d98:	4620      	mov	r0, r4
 8006d9a:	d106      	bne.n	8006daa <_dtoa_r+0xb0a>
 8006d9c:	f000 f8ea 	bl	8006f74 <__multadd>
 8006da0:	4680      	mov	r8, r0
 8006da2:	4607      	mov	r7, r0
 8006da4:	f109 0901 	add.w	r9, r9, #1
 8006da8:	e772      	b.n	8006c90 <_dtoa_r+0x9f0>
 8006daa:	f000 f8e3 	bl	8006f74 <__multadd>
 8006dae:	4639      	mov	r1, r7
 8006db0:	4680      	mov	r8, r0
 8006db2:	2300      	movs	r3, #0
 8006db4:	220a      	movs	r2, #10
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f8dc 	bl	8006f74 <__multadd>
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	e7f1      	b.n	8006da4 <_dtoa_r+0xb04>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	9302      	str	r3, [sp, #8]
 8006dc4:	9d01      	ldr	r5, [sp, #4]
 8006dc6:	ee18 0a10 	vmov	r0, s16
 8006dca:	4631      	mov	r1, r6
 8006dcc:	f7ff f9dc 	bl	8006188 <quorem>
 8006dd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	f805 ab01 	strb.w	sl, [r5], #1
 8006dda:	1aea      	subs	r2, r5, r3
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	dd09      	ble.n	8006df6 <_dtoa_r+0xb56>
 8006de2:	ee18 1a10 	vmov	r1, s16
 8006de6:	2300      	movs	r3, #0
 8006de8:	220a      	movs	r2, #10
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f8c2 	bl	8006f74 <__multadd>
 8006df0:	ee08 0a10 	vmov	s16, r0
 8006df4:	e7e7      	b.n	8006dc6 <_dtoa_r+0xb26>
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfc8      	it	gt
 8006dfc:	461d      	movgt	r5, r3
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	bfd8      	it	le
 8006e02:	2501      	movle	r5, #1
 8006e04:	441d      	add	r5, r3
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fa5f 	bl	80072d4 <__lshift>
 8006e16:	4631      	mov	r1, r6
 8006e18:	ee08 0a10 	vmov	s16, r0
 8006e1c:	f000 faca 	bl	80073b4 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	dc91      	bgt.n	8006d48 <_dtoa_r+0xaa8>
 8006e24:	d102      	bne.n	8006e2c <_dtoa_r+0xb8c>
 8006e26:	f01a 0f01 	tst.w	sl, #1
 8006e2a:	d18d      	bne.n	8006d48 <_dtoa_r+0xaa8>
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	461d      	mov	r5, r3
 8006e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e34:	2a30      	cmp	r2, #48	; 0x30
 8006e36:	d0fa      	beq.n	8006e2e <_dtoa_r+0xb8e>
 8006e38:	e6d7      	b.n	8006bea <_dtoa_r+0x94a>
 8006e3a:	9a01      	ldr	r2, [sp, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d184      	bne.n	8006d4a <_dtoa_r+0xaaa>
 8006e40:	9b00      	ldr	r3, [sp, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	2331      	movs	r3, #49	; 0x31
 8006e48:	7013      	strb	r3, [r2, #0]
 8006e4a:	e6ce      	b.n	8006bea <_dtoa_r+0x94a>
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <_dtoa_r+0xbd4>)
 8006e4e:	f7ff ba95 	b.w	800637c <_dtoa_r+0xdc>
 8006e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f47f aa6e 	bne.w	8006336 <_dtoa_r+0x96>
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <_dtoa_r+0xbd8>)
 8006e5c:	f7ff ba8e 	b.w	800637c <_dtoa_r+0xdc>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dcae      	bgt.n	8006dc4 <_dtoa_r+0xb24>
 8006e66:	9b06      	ldr	r3, [sp, #24]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	f73f aea8 	bgt.w	8006bbe <_dtoa_r+0x91e>
 8006e6e:	e7a9      	b.n	8006dc4 <_dtoa_r+0xb24>
 8006e70:	0800895b 	.word	0x0800895b
 8006e74:	080088b8 	.word	0x080088b8
 8006e78:	080088dc 	.word	0x080088dc

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	; (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000164 	.word	0x20000164

08006e84 <malloc>:
 8006e84:	4b02      	ldr	r3, [pc, #8]	; (8006e90 <malloc+0xc>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f000 bc17 	b.w	80076bc <_malloc_r>
 8006e8e:	bf00      	nop
 8006e90:	20000010 	.word	0x20000010

08006e94 <memcpy>:
 8006e94:	440a      	add	r2, r1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9c:	d100      	bne.n	8006ea0 <memcpy+0xc>
 8006e9e:	4770      	bx	lr
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d1f9      	bne.n	8006ea2 <memcpy+0xe>
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <_Balloc>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	b976      	cbnz	r6, 8006ed8 <_Balloc+0x28>
 8006eba:	2010      	movs	r0, #16
 8006ebc:	f7ff ffe2 	bl	8006e84 <malloc>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ec4:	b920      	cbnz	r0, 8006ed0 <_Balloc+0x20>
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <_Balloc+0x78>)
 8006ec8:	4818      	ldr	r0, [pc, #96]	; (8006f2c <_Balloc+0x7c>)
 8006eca:	2166      	movs	r1, #102	; 0x66
 8006ecc:	f000 fdd6 	bl	8007a7c <__assert_func>
 8006ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ed4:	6006      	str	r6, [r0, #0]
 8006ed6:	60c6      	str	r6, [r0, #12]
 8006ed8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006eda:	68f3      	ldr	r3, [r6, #12]
 8006edc:	b183      	cbz	r3, 8006f00 <_Balloc+0x50>
 8006ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ee6:	b9b8      	cbnz	r0, 8006f18 <_Balloc+0x68>
 8006ee8:	2101      	movs	r1, #1
 8006eea:	fa01 f605 	lsl.w	r6, r1, r5
 8006eee:	1d72      	adds	r2, r6, #5
 8006ef0:	0092      	lsls	r2, r2, #2
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fb60 	bl	80075b8 <_calloc_r>
 8006ef8:	b160      	cbz	r0, 8006f14 <_Balloc+0x64>
 8006efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006efe:	e00e      	b.n	8006f1e <_Balloc+0x6e>
 8006f00:	2221      	movs	r2, #33	; 0x21
 8006f02:	2104      	movs	r1, #4
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fb57 	bl	80075b8 <_calloc_r>
 8006f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f0c:	60f0      	str	r0, [r6, #12]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <_Balloc+0x2e>
 8006f14:	2000      	movs	r0, #0
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	6802      	ldr	r2, [r0, #0]
 8006f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f24:	e7f7      	b.n	8006f16 <_Balloc+0x66>
 8006f26:	bf00      	nop
 8006f28:	080088e9 	.word	0x080088e9
 8006f2c:	0800896c 	.word	0x0800896c

08006f30 <_Bfree>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f34:	4605      	mov	r5, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	b976      	cbnz	r6, 8006f58 <_Bfree+0x28>
 8006f3a:	2010      	movs	r0, #16
 8006f3c:	f7ff ffa2 	bl	8006e84 <malloc>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6268      	str	r0, [r5, #36]	; 0x24
 8006f44:	b920      	cbnz	r0, 8006f50 <_Bfree+0x20>
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <_Bfree+0x3c>)
 8006f48:	4809      	ldr	r0, [pc, #36]	; (8006f70 <_Bfree+0x40>)
 8006f4a:	218a      	movs	r1, #138	; 0x8a
 8006f4c:	f000 fd96 	bl	8007a7c <__assert_func>
 8006f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f54:	6006      	str	r6, [r0, #0]
 8006f56:	60c6      	str	r6, [r0, #12]
 8006f58:	b13c      	cbz	r4, 8006f6a <_Bfree+0x3a>
 8006f5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f5c:	6862      	ldr	r2, [r4, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f64:	6021      	str	r1, [r4, #0]
 8006f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	080088e9 	.word	0x080088e9
 8006f70:	0800896c 	.word	0x0800896c

08006f74 <__multadd>:
 8006f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f78:	690d      	ldr	r5, [r1, #16]
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	461e      	mov	r6, r3
 8006f80:	f101 0c14 	add.w	ip, r1, #20
 8006f84:	2000      	movs	r0, #0
 8006f86:	f8dc 3000 	ldr.w	r3, [ip]
 8006f8a:	b299      	uxth	r1, r3
 8006f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f90:	0c1e      	lsrs	r6, r3, #16
 8006f92:	0c0b      	lsrs	r3, r1, #16
 8006f94:	fb02 3306 	mla	r3, r2, r6, r3
 8006f98:	b289      	uxth	r1, r1
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fa0:	4285      	cmp	r5, r0
 8006fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8006fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006faa:	dcec      	bgt.n	8006f86 <__multadd+0x12>
 8006fac:	b30e      	cbz	r6, 8006ff2 <__multadd+0x7e>
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	42ab      	cmp	r3, r5
 8006fb2:	dc19      	bgt.n	8006fe8 <__multadd+0x74>
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	3101      	adds	r1, #1
 8006fba:	f7ff ff79 	bl	8006eb0 <_Balloc>
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	b928      	cbnz	r0, 8006fce <__multadd+0x5a>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <__multadd+0x84>)
 8006fc6:	480d      	ldr	r0, [pc, #52]	; (8006ffc <__multadd+0x88>)
 8006fc8:	21b5      	movs	r1, #181	; 0xb5
 8006fca:	f000 fd57 	bl	8007a7c <__assert_func>
 8006fce:	6922      	ldr	r2, [r4, #16]
 8006fd0:	3202      	adds	r2, #2
 8006fd2:	f104 010c 	add.w	r1, r4, #12
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	300c      	adds	r0, #12
 8006fda:	f7ff ff5b 	bl	8006e94 <memcpy>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f7ff ffa5 	bl	8006f30 <_Bfree>
 8006fe6:	4644      	mov	r4, r8
 8006fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fec:	3501      	adds	r5, #1
 8006fee:	615e      	str	r6, [r3, #20]
 8006ff0:	6125      	str	r5, [r4, #16]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	0800895b 	.word	0x0800895b
 8006ffc:	0800896c 	.word	0x0800896c

08007000 <__hi0bits>:
 8007000:	0c03      	lsrs	r3, r0, #16
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	b9d3      	cbnz	r3, 800703c <__hi0bits+0x3c>
 8007006:	0400      	lsls	r0, r0, #16
 8007008:	2310      	movs	r3, #16
 800700a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800700e:	bf04      	itt	eq
 8007010:	0200      	lsleq	r0, r0, #8
 8007012:	3308      	addeq	r3, #8
 8007014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007018:	bf04      	itt	eq
 800701a:	0100      	lsleq	r0, r0, #4
 800701c:	3304      	addeq	r3, #4
 800701e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007022:	bf04      	itt	eq
 8007024:	0080      	lsleq	r0, r0, #2
 8007026:	3302      	addeq	r3, #2
 8007028:	2800      	cmp	r0, #0
 800702a:	db05      	blt.n	8007038 <__hi0bits+0x38>
 800702c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007030:	f103 0301 	add.w	r3, r3, #1
 8007034:	bf08      	it	eq
 8007036:	2320      	moveq	r3, #32
 8007038:	4618      	mov	r0, r3
 800703a:	4770      	bx	lr
 800703c:	2300      	movs	r3, #0
 800703e:	e7e4      	b.n	800700a <__hi0bits+0xa>

08007040 <__lo0bits>:
 8007040:	6803      	ldr	r3, [r0, #0]
 8007042:	f013 0207 	ands.w	r2, r3, #7
 8007046:	4601      	mov	r1, r0
 8007048:	d00b      	beq.n	8007062 <__lo0bits+0x22>
 800704a:	07da      	lsls	r2, r3, #31
 800704c:	d423      	bmi.n	8007096 <__lo0bits+0x56>
 800704e:	0798      	lsls	r0, r3, #30
 8007050:	bf49      	itett	mi
 8007052:	085b      	lsrmi	r3, r3, #1
 8007054:	089b      	lsrpl	r3, r3, #2
 8007056:	2001      	movmi	r0, #1
 8007058:	600b      	strmi	r3, [r1, #0]
 800705a:	bf5c      	itt	pl
 800705c:	600b      	strpl	r3, [r1, #0]
 800705e:	2002      	movpl	r0, #2
 8007060:	4770      	bx	lr
 8007062:	b298      	uxth	r0, r3
 8007064:	b9a8      	cbnz	r0, 8007092 <__lo0bits+0x52>
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	2010      	movs	r0, #16
 800706a:	b2da      	uxtb	r2, r3
 800706c:	b90a      	cbnz	r2, 8007072 <__lo0bits+0x32>
 800706e:	3008      	adds	r0, #8
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	071a      	lsls	r2, r3, #28
 8007074:	bf04      	itt	eq
 8007076:	091b      	lsreq	r3, r3, #4
 8007078:	3004      	addeq	r0, #4
 800707a:	079a      	lsls	r2, r3, #30
 800707c:	bf04      	itt	eq
 800707e:	089b      	lsreq	r3, r3, #2
 8007080:	3002      	addeq	r0, #2
 8007082:	07da      	lsls	r2, r3, #31
 8007084:	d403      	bmi.n	800708e <__lo0bits+0x4e>
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	f100 0001 	add.w	r0, r0, #1
 800708c:	d005      	beq.n	800709a <__lo0bits+0x5a>
 800708e:	600b      	str	r3, [r1, #0]
 8007090:	4770      	bx	lr
 8007092:	4610      	mov	r0, r2
 8007094:	e7e9      	b.n	800706a <__lo0bits+0x2a>
 8007096:	2000      	movs	r0, #0
 8007098:	4770      	bx	lr
 800709a:	2020      	movs	r0, #32
 800709c:	4770      	bx	lr
	...

080070a0 <__i2b>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	460c      	mov	r4, r1
 80070a4:	2101      	movs	r1, #1
 80070a6:	f7ff ff03 	bl	8006eb0 <_Balloc>
 80070aa:	4602      	mov	r2, r0
 80070ac:	b928      	cbnz	r0, 80070ba <__i2b+0x1a>
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <__i2b+0x24>)
 80070b0:	4805      	ldr	r0, [pc, #20]	; (80070c8 <__i2b+0x28>)
 80070b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070b6:	f000 fce1 	bl	8007a7c <__assert_func>
 80070ba:	2301      	movs	r3, #1
 80070bc:	6144      	str	r4, [r0, #20]
 80070be:	6103      	str	r3, [r0, #16]
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	bf00      	nop
 80070c4:	0800895b 	.word	0x0800895b
 80070c8:	0800896c 	.word	0x0800896c

080070cc <__multiply>:
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	4691      	mov	r9, r2
 80070d2:	690a      	ldr	r2, [r1, #16]
 80070d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070d8:	429a      	cmp	r2, r3
 80070da:	bfb8      	it	lt
 80070dc:	460b      	movlt	r3, r1
 80070de:	460c      	mov	r4, r1
 80070e0:	bfbc      	itt	lt
 80070e2:	464c      	movlt	r4, r9
 80070e4:	4699      	movlt	r9, r3
 80070e6:	6927      	ldr	r7, [r4, #16]
 80070e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070ec:	68a3      	ldr	r3, [r4, #8]
 80070ee:	6861      	ldr	r1, [r4, #4]
 80070f0:	eb07 060a 	add.w	r6, r7, sl
 80070f4:	42b3      	cmp	r3, r6
 80070f6:	b085      	sub	sp, #20
 80070f8:	bfb8      	it	lt
 80070fa:	3101      	addlt	r1, #1
 80070fc:	f7ff fed8 	bl	8006eb0 <_Balloc>
 8007100:	b930      	cbnz	r0, 8007110 <__multiply+0x44>
 8007102:	4602      	mov	r2, r0
 8007104:	4b44      	ldr	r3, [pc, #272]	; (8007218 <__multiply+0x14c>)
 8007106:	4845      	ldr	r0, [pc, #276]	; (800721c <__multiply+0x150>)
 8007108:	f240 115d 	movw	r1, #349	; 0x15d
 800710c:	f000 fcb6 	bl	8007a7c <__assert_func>
 8007110:	f100 0514 	add.w	r5, r0, #20
 8007114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007118:	462b      	mov	r3, r5
 800711a:	2200      	movs	r2, #0
 800711c:	4543      	cmp	r3, r8
 800711e:	d321      	bcc.n	8007164 <__multiply+0x98>
 8007120:	f104 0314 	add.w	r3, r4, #20
 8007124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007128:	f109 0314 	add.w	r3, r9, #20
 800712c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007130:	9202      	str	r2, [sp, #8]
 8007132:	1b3a      	subs	r2, r7, r4
 8007134:	3a15      	subs	r2, #21
 8007136:	f022 0203 	bic.w	r2, r2, #3
 800713a:	3204      	adds	r2, #4
 800713c:	f104 0115 	add.w	r1, r4, #21
 8007140:	428f      	cmp	r7, r1
 8007142:	bf38      	it	cc
 8007144:	2204      	movcc	r2, #4
 8007146:	9201      	str	r2, [sp, #4]
 8007148:	9a02      	ldr	r2, [sp, #8]
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	429a      	cmp	r2, r3
 800714e:	d80c      	bhi.n	800716a <__multiply+0x9e>
 8007150:	2e00      	cmp	r6, #0
 8007152:	dd03      	ble.n	800715c <__multiply+0x90>
 8007154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05a      	beq.n	8007212 <__multiply+0x146>
 800715c:	6106      	str	r6, [r0, #16]
 800715e:	b005      	add	sp, #20
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007164:	f843 2b04 	str.w	r2, [r3], #4
 8007168:	e7d8      	b.n	800711c <__multiply+0x50>
 800716a:	f8b3 a000 	ldrh.w	sl, [r3]
 800716e:	f1ba 0f00 	cmp.w	sl, #0
 8007172:	d024      	beq.n	80071be <__multiply+0xf2>
 8007174:	f104 0e14 	add.w	lr, r4, #20
 8007178:	46a9      	mov	r9, r5
 800717a:	f04f 0c00 	mov.w	ip, #0
 800717e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007182:	f8d9 1000 	ldr.w	r1, [r9]
 8007186:	fa1f fb82 	uxth.w	fp, r2
 800718a:	b289      	uxth	r1, r1
 800718c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007194:	f8d9 2000 	ldr.w	r2, [r9]
 8007198:	4461      	add	r1, ip
 800719a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800719e:	fb0a c20b 	mla	r2, sl, fp, ip
 80071a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071ac:	4577      	cmp	r7, lr
 80071ae:	f849 1b04 	str.w	r1, [r9], #4
 80071b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071b6:	d8e2      	bhi.n	800717e <__multiply+0xb2>
 80071b8:	9a01      	ldr	r2, [sp, #4]
 80071ba:	f845 c002 	str.w	ip, [r5, r2]
 80071be:	9a03      	ldr	r2, [sp, #12]
 80071c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071c4:	3304      	adds	r3, #4
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	d020      	beq.n	800720e <__multiply+0x142>
 80071cc:	6829      	ldr	r1, [r5, #0]
 80071ce:	f104 0c14 	add.w	ip, r4, #20
 80071d2:	46ae      	mov	lr, r5
 80071d4:	f04f 0a00 	mov.w	sl, #0
 80071d8:	f8bc b000 	ldrh.w	fp, [ip]
 80071dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071e0:	fb09 220b 	mla	r2, r9, fp, r2
 80071e4:	4492      	add	sl, r2
 80071e6:	b289      	uxth	r1, r1
 80071e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071ec:	f84e 1b04 	str.w	r1, [lr], #4
 80071f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071f4:	f8be 1000 	ldrh.w	r1, [lr]
 80071f8:	0c12      	lsrs	r2, r2, #16
 80071fa:	fb09 1102 	mla	r1, r9, r2, r1
 80071fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007202:	4567      	cmp	r7, ip
 8007204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007208:	d8e6      	bhi.n	80071d8 <__multiply+0x10c>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	50a9      	str	r1, [r5, r2]
 800720e:	3504      	adds	r5, #4
 8007210:	e79a      	b.n	8007148 <__multiply+0x7c>
 8007212:	3e01      	subs	r6, #1
 8007214:	e79c      	b.n	8007150 <__multiply+0x84>
 8007216:	bf00      	nop
 8007218:	0800895b 	.word	0x0800895b
 800721c:	0800896c 	.word	0x0800896c

08007220 <__pow5mult>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	4615      	mov	r5, r2
 8007226:	f012 0203 	ands.w	r2, r2, #3
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	d007      	beq.n	8007240 <__pow5mult+0x20>
 8007230:	4c25      	ldr	r4, [pc, #148]	; (80072c8 <__pow5mult+0xa8>)
 8007232:	3a01      	subs	r2, #1
 8007234:	2300      	movs	r3, #0
 8007236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800723a:	f7ff fe9b 	bl	8006f74 <__multadd>
 800723e:	4607      	mov	r7, r0
 8007240:	10ad      	asrs	r5, r5, #2
 8007242:	d03d      	beq.n	80072c0 <__pow5mult+0xa0>
 8007244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007246:	b97c      	cbnz	r4, 8007268 <__pow5mult+0x48>
 8007248:	2010      	movs	r0, #16
 800724a:	f7ff fe1b 	bl	8006e84 <malloc>
 800724e:	4602      	mov	r2, r0
 8007250:	6270      	str	r0, [r6, #36]	; 0x24
 8007252:	b928      	cbnz	r0, 8007260 <__pow5mult+0x40>
 8007254:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <__pow5mult+0xac>)
 8007256:	481e      	ldr	r0, [pc, #120]	; (80072d0 <__pow5mult+0xb0>)
 8007258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800725c:	f000 fc0e 	bl	8007a7c <__assert_func>
 8007260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007264:	6004      	str	r4, [r0, #0]
 8007266:	60c4      	str	r4, [r0, #12]
 8007268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800726c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007270:	b94c      	cbnz	r4, 8007286 <__pow5mult+0x66>
 8007272:	f240 2171 	movw	r1, #625	; 0x271
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ff12 	bl	80070a0 <__i2b>
 800727c:	2300      	movs	r3, #0
 800727e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007282:	4604      	mov	r4, r0
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	f04f 0900 	mov.w	r9, #0
 800728a:	07eb      	lsls	r3, r5, #31
 800728c:	d50a      	bpl.n	80072a4 <__pow5mult+0x84>
 800728e:	4639      	mov	r1, r7
 8007290:	4622      	mov	r2, r4
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ff1a 	bl	80070cc <__multiply>
 8007298:	4639      	mov	r1, r7
 800729a:	4680      	mov	r8, r0
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff fe47 	bl	8006f30 <_Bfree>
 80072a2:	4647      	mov	r7, r8
 80072a4:	106d      	asrs	r5, r5, #1
 80072a6:	d00b      	beq.n	80072c0 <__pow5mult+0xa0>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	b938      	cbnz	r0, 80072bc <__pow5mult+0x9c>
 80072ac:	4622      	mov	r2, r4
 80072ae:	4621      	mov	r1, r4
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7ff ff0b 	bl	80070cc <__multiply>
 80072b6:	6020      	str	r0, [r4, #0]
 80072b8:	f8c0 9000 	str.w	r9, [r0]
 80072bc:	4604      	mov	r4, r0
 80072be:	e7e4      	b.n	800728a <__pow5mult+0x6a>
 80072c0:	4638      	mov	r0, r7
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	bf00      	nop
 80072c8:	08008ab8 	.word	0x08008ab8
 80072cc:	080088e9 	.word	0x080088e9
 80072d0:	0800896c 	.word	0x0800896c

080072d4 <__lshift>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	6849      	ldr	r1, [r1, #4]
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	4607      	mov	r7, r0
 80072e6:	4691      	mov	r9, r2
 80072e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072ec:	f108 0601 	add.w	r6, r8, #1
 80072f0:	42b3      	cmp	r3, r6
 80072f2:	db0b      	blt.n	800730c <__lshift+0x38>
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff fddb 	bl	8006eb0 <_Balloc>
 80072fa:	4605      	mov	r5, r0
 80072fc:	b948      	cbnz	r0, 8007312 <__lshift+0x3e>
 80072fe:	4602      	mov	r2, r0
 8007300:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <__lshift+0xd8>)
 8007302:	482b      	ldr	r0, [pc, #172]	; (80073b0 <__lshift+0xdc>)
 8007304:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007308:	f000 fbb8 	bl	8007a7c <__assert_func>
 800730c:	3101      	adds	r1, #1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	e7ee      	b.n	80072f0 <__lshift+0x1c>
 8007312:	2300      	movs	r3, #0
 8007314:	f100 0114 	add.w	r1, r0, #20
 8007318:	f100 0210 	add.w	r2, r0, #16
 800731c:	4618      	mov	r0, r3
 800731e:	4553      	cmp	r3, sl
 8007320:	db37      	blt.n	8007392 <__lshift+0xbe>
 8007322:	6920      	ldr	r0, [r4, #16]
 8007324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	f019 091f 	ands.w	r9, r9, #31
 8007330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007338:	d02f      	beq.n	800739a <__lshift+0xc6>
 800733a:	f1c9 0e20 	rsb	lr, r9, #32
 800733e:	468a      	mov	sl, r1
 8007340:	f04f 0c00 	mov.w	ip, #0
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	fa02 f209 	lsl.w	r2, r2, r9
 800734a:	ea42 020c 	orr.w	r2, r2, ip
 800734e:	f84a 2b04 	str.w	r2, [sl], #4
 8007352:	f853 2b04 	ldr.w	r2, [r3], #4
 8007356:	4298      	cmp	r0, r3
 8007358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800735c:	d8f2      	bhi.n	8007344 <__lshift+0x70>
 800735e:	1b03      	subs	r3, r0, r4
 8007360:	3b15      	subs	r3, #21
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	3304      	adds	r3, #4
 8007368:	f104 0215 	add.w	r2, r4, #21
 800736c:	4290      	cmp	r0, r2
 800736e:	bf38      	it	cc
 8007370:	2304      	movcc	r3, #4
 8007372:	f841 c003 	str.w	ip, [r1, r3]
 8007376:	f1bc 0f00 	cmp.w	ip, #0
 800737a:	d001      	beq.n	8007380 <__lshift+0xac>
 800737c:	f108 0602 	add.w	r6, r8, #2
 8007380:	3e01      	subs	r6, #1
 8007382:	4638      	mov	r0, r7
 8007384:	612e      	str	r6, [r5, #16]
 8007386:	4621      	mov	r1, r4
 8007388:	f7ff fdd2 	bl	8006f30 <_Bfree>
 800738c:	4628      	mov	r0, r5
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	f842 0f04 	str.w	r0, [r2, #4]!
 8007396:	3301      	adds	r3, #1
 8007398:	e7c1      	b.n	800731e <__lshift+0x4a>
 800739a:	3904      	subs	r1, #4
 800739c:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80073a4:	4298      	cmp	r0, r3
 80073a6:	d8f9      	bhi.n	800739c <__lshift+0xc8>
 80073a8:	e7ea      	b.n	8007380 <__lshift+0xac>
 80073aa:	bf00      	nop
 80073ac:	0800895b 	.word	0x0800895b
 80073b0:	0800896c 	.word	0x0800896c

080073b4 <__mcmp>:
 80073b4:	b530      	push	{r4, r5, lr}
 80073b6:	6902      	ldr	r2, [r0, #16]
 80073b8:	690c      	ldr	r4, [r1, #16]
 80073ba:	1b12      	subs	r2, r2, r4
 80073bc:	d10e      	bne.n	80073dc <__mcmp+0x28>
 80073be:	f100 0314 	add.w	r3, r0, #20
 80073c2:	3114      	adds	r1, #20
 80073c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073d4:	42a5      	cmp	r5, r4
 80073d6:	d003      	beq.n	80073e0 <__mcmp+0x2c>
 80073d8:	d305      	bcc.n	80073e6 <__mcmp+0x32>
 80073da:	2201      	movs	r2, #1
 80073dc:	4610      	mov	r0, r2
 80073de:	bd30      	pop	{r4, r5, pc}
 80073e0:	4283      	cmp	r3, r0
 80073e2:	d3f3      	bcc.n	80073cc <__mcmp+0x18>
 80073e4:	e7fa      	b.n	80073dc <__mcmp+0x28>
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	e7f7      	b.n	80073dc <__mcmp+0x28>

080073ec <__mdiff>:
 80073ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	460c      	mov	r4, r1
 80073f2:	4606      	mov	r6, r0
 80073f4:	4611      	mov	r1, r2
 80073f6:	4620      	mov	r0, r4
 80073f8:	4690      	mov	r8, r2
 80073fa:	f7ff ffdb 	bl	80073b4 <__mcmp>
 80073fe:	1e05      	subs	r5, r0, #0
 8007400:	d110      	bne.n	8007424 <__mdiff+0x38>
 8007402:	4629      	mov	r1, r5
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff fd53 	bl	8006eb0 <_Balloc>
 800740a:	b930      	cbnz	r0, 800741a <__mdiff+0x2e>
 800740c:	4b3a      	ldr	r3, [pc, #232]	; (80074f8 <__mdiff+0x10c>)
 800740e:	4602      	mov	r2, r0
 8007410:	f240 2132 	movw	r1, #562	; 0x232
 8007414:	4839      	ldr	r0, [pc, #228]	; (80074fc <__mdiff+0x110>)
 8007416:	f000 fb31 	bl	8007a7c <__assert_func>
 800741a:	2301      	movs	r3, #1
 800741c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	bfa4      	itt	ge
 8007426:	4643      	movge	r3, r8
 8007428:	46a0      	movge	r8, r4
 800742a:	4630      	mov	r0, r6
 800742c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007430:	bfa6      	itte	ge
 8007432:	461c      	movge	r4, r3
 8007434:	2500      	movge	r5, #0
 8007436:	2501      	movlt	r5, #1
 8007438:	f7ff fd3a 	bl	8006eb0 <_Balloc>
 800743c:	b920      	cbnz	r0, 8007448 <__mdiff+0x5c>
 800743e:	4b2e      	ldr	r3, [pc, #184]	; (80074f8 <__mdiff+0x10c>)
 8007440:	4602      	mov	r2, r0
 8007442:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007446:	e7e5      	b.n	8007414 <__mdiff+0x28>
 8007448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800744c:	6926      	ldr	r6, [r4, #16]
 800744e:	60c5      	str	r5, [r0, #12]
 8007450:	f104 0914 	add.w	r9, r4, #20
 8007454:	f108 0514 	add.w	r5, r8, #20
 8007458:	f100 0e14 	add.w	lr, r0, #20
 800745c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007464:	f108 0210 	add.w	r2, r8, #16
 8007468:	46f2      	mov	sl, lr
 800746a:	2100      	movs	r1, #0
 800746c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007474:	fa1f f883 	uxth.w	r8, r3
 8007478:	fa11 f18b 	uxtah	r1, r1, fp
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	eba1 0808 	sub.w	r8, r1, r8
 8007482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800748a:	fa1f f888 	uxth.w	r8, r8
 800748e:	1419      	asrs	r1, r3, #16
 8007490:	454e      	cmp	r6, r9
 8007492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007496:	f84a 3b04 	str.w	r3, [sl], #4
 800749a:	d8e7      	bhi.n	800746c <__mdiff+0x80>
 800749c:	1b33      	subs	r3, r6, r4
 800749e:	3b15      	subs	r3, #21
 80074a0:	f023 0303 	bic.w	r3, r3, #3
 80074a4:	3304      	adds	r3, #4
 80074a6:	3415      	adds	r4, #21
 80074a8:	42a6      	cmp	r6, r4
 80074aa:	bf38      	it	cc
 80074ac:	2304      	movcc	r3, #4
 80074ae:	441d      	add	r5, r3
 80074b0:	4473      	add	r3, lr
 80074b2:	469e      	mov	lr, r3
 80074b4:	462e      	mov	r6, r5
 80074b6:	4566      	cmp	r6, ip
 80074b8:	d30e      	bcc.n	80074d8 <__mdiff+0xec>
 80074ba:	f10c 0203 	add.w	r2, ip, #3
 80074be:	1b52      	subs	r2, r2, r5
 80074c0:	f022 0203 	bic.w	r2, r2, #3
 80074c4:	3d03      	subs	r5, #3
 80074c6:	45ac      	cmp	ip, r5
 80074c8:	bf38      	it	cc
 80074ca:	2200      	movcc	r2, #0
 80074cc:	441a      	add	r2, r3
 80074ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074d2:	b17b      	cbz	r3, 80074f4 <__mdiff+0x108>
 80074d4:	6107      	str	r7, [r0, #16]
 80074d6:	e7a3      	b.n	8007420 <__mdiff+0x34>
 80074d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80074dc:	fa11 f288 	uxtah	r2, r1, r8
 80074e0:	1414      	asrs	r4, r2, #16
 80074e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074e6:	b292      	uxth	r2, r2
 80074e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074ec:	f84e 2b04 	str.w	r2, [lr], #4
 80074f0:	1421      	asrs	r1, r4, #16
 80074f2:	e7e0      	b.n	80074b6 <__mdiff+0xca>
 80074f4:	3f01      	subs	r7, #1
 80074f6:	e7ea      	b.n	80074ce <__mdiff+0xe2>
 80074f8:	0800895b 	.word	0x0800895b
 80074fc:	0800896c 	.word	0x0800896c

08007500 <__d2b>:
 8007500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007504:	4689      	mov	r9, r1
 8007506:	2101      	movs	r1, #1
 8007508:	ec57 6b10 	vmov	r6, r7, d0
 800750c:	4690      	mov	r8, r2
 800750e:	f7ff fccf 	bl	8006eb0 <_Balloc>
 8007512:	4604      	mov	r4, r0
 8007514:	b930      	cbnz	r0, 8007524 <__d2b+0x24>
 8007516:	4602      	mov	r2, r0
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <__d2b+0xb0>)
 800751a:	4826      	ldr	r0, [pc, #152]	; (80075b4 <__d2b+0xb4>)
 800751c:	f240 310a 	movw	r1, #778	; 0x30a
 8007520:	f000 faac 	bl	8007a7c <__assert_func>
 8007524:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800752c:	bb35      	cbnz	r5, 800757c <__d2b+0x7c>
 800752e:	2e00      	cmp	r6, #0
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	d028      	beq.n	8007586 <__d2b+0x86>
 8007534:	4668      	mov	r0, sp
 8007536:	9600      	str	r6, [sp, #0]
 8007538:	f7ff fd82 	bl	8007040 <__lo0bits>
 800753c:	9900      	ldr	r1, [sp, #0]
 800753e:	b300      	cbz	r0, 8007582 <__d2b+0x82>
 8007540:	9a01      	ldr	r2, [sp, #4]
 8007542:	f1c0 0320 	rsb	r3, r0, #32
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	430b      	orrs	r3, r1
 800754c:	40c2      	lsrs	r2, r0
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2202      	movne	r2, #2
 800755c:	2201      	moveq	r2, #1
 800755e:	6122      	str	r2, [r4, #16]
 8007560:	b1d5      	cbz	r5, 8007598 <__d2b+0x98>
 8007562:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007566:	4405      	add	r5, r0
 8007568:	f8c9 5000 	str.w	r5, [r9]
 800756c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007570:	f8c8 0000 	str.w	r0, [r8]
 8007574:	4620      	mov	r0, r4
 8007576:	b003      	add	sp, #12
 8007578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800757c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007580:	e7d5      	b.n	800752e <__d2b+0x2e>
 8007582:	6161      	str	r1, [r4, #20]
 8007584:	e7e5      	b.n	8007552 <__d2b+0x52>
 8007586:	a801      	add	r0, sp, #4
 8007588:	f7ff fd5a 	bl	8007040 <__lo0bits>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	6163      	str	r3, [r4, #20]
 8007590:	2201      	movs	r2, #1
 8007592:	6122      	str	r2, [r4, #16]
 8007594:	3020      	adds	r0, #32
 8007596:	e7e3      	b.n	8007560 <__d2b+0x60>
 8007598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800759c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075a0:	f8c9 0000 	str.w	r0, [r9]
 80075a4:	6918      	ldr	r0, [r3, #16]
 80075a6:	f7ff fd2b 	bl	8007000 <__hi0bits>
 80075aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075ae:	e7df      	b.n	8007570 <__d2b+0x70>
 80075b0:	0800895b 	.word	0x0800895b
 80075b4:	0800896c 	.word	0x0800896c

080075b8 <_calloc_r>:
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ba:	fba1 2402 	umull	r2, r4, r1, r2
 80075be:	b94c      	cbnz	r4, 80075d4 <_calloc_r+0x1c>
 80075c0:	4611      	mov	r1, r2
 80075c2:	9201      	str	r2, [sp, #4]
 80075c4:	f000 f87a 	bl	80076bc <_malloc_r>
 80075c8:	9a01      	ldr	r2, [sp, #4]
 80075ca:	4605      	mov	r5, r0
 80075cc:	b930      	cbnz	r0, 80075dc <_calloc_r+0x24>
 80075ce:	4628      	mov	r0, r5
 80075d0:	b003      	add	sp, #12
 80075d2:	bd30      	pop	{r4, r5, pc}
 80075d4:	220c      	movs	r2, #12
 80075d6:	6002      	str	r2, [r0, #0]
 80075d8:	2500      	movs	r5, #0
 80075da:	e7f8      	b.n	80075ce <_calloc_r+0x16>
 80075dc:	4621      	mov	r1, r4
 80075de:	f7fe f941 	bl	8005864 <memset>
 80075e2:	e7f4      	b.n	80075ce <_calloc_r+0x16>

080075e4 <_free_r>:
 80075e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075e6:	2900      	cmp	r1, #0
 80075e8:	d044      	beq.n	8007674 <_free_r+0x90>
 80075ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ee:	9001      	str	r0, [sp, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f1a1 0404 	sub.w	r4, r1, #4
 80075f6:	bfb8      	it	lt
 80075f8:	18e4      	addlt	r4, r4, r3
 80075fa:	f000 fa9b 	bl	8007b34 <__malloc_lock>
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <_free_r+0x94>)
 8007600:	9801      	ldr	r0, [sp, #4]
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	b933      	cbnz	r3, 8007614 <_free_r+0x30>
 8007606:	6063      	str	r3, [r4, #4]
 8007608:	6014      	str	r4, [r2, #0]
 800760a:	b003      	add	sp, #12
 800760c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007610:	f000 ba96 	b.w	8007b40 <__malloc_unlock>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d908      	bls.n	800762a <_free_r+0x46>
 8007618:	6825      	ldr	r5, [r4, #0]
 800761a:	1961      	adds	r1, r4, r5
 800761c:	428b      	cmp	r3, r1
 800761e:	bf01      	itttt	eq
 8007620:	6819      	ldreq	r1, [r3, #0]
 8007622:	685b      	ldreq	r3, [r3, #4]
 8007624:	1949      	addeq	r1, r1, r5
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	e7ed      	b.n	8007606 <_free_r+0x22>
 800762a:	461a      	mov	r2, r3
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	b10b      	cbz	r3, 8007634 <_free_r+0x50>
 8007630:	42a3      	cmp	r3, r4
 8007632:	d9fa      	bls.n	800762a <_free_r+0x46>
 8007634:	6811      	ldr	r1, [r2, #0]
 8007636:	1855      	adds	r5, r2, r1
 8007638:	42a5      	cmp	r5, r4
 800763a:	d10b      	bne.n	8007654 <_free_r+0x70>
 800763c:	6824      	ldr	r4, [r4, #0]
 800763e:	4421      	add	r1, r4
 8007640:	1854      	adds	r4, r2, r1
 8007642:	42a3      	cmp	r3, r4
 8007644:	6011      	str	r1, [r2, #0]
 8007646:	d1e0      	bne.n	800760a <_free_r+0x26>
 8007648:	681c      	ldr	r4, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	6053      	str	r3, [r2, #4]
 800764e:	4421      	add	r1, r4
 8007650:	6011      	str	r1, [r2, #0]
 8007652:	e7da      	b.n	800760a <_free_r+0x26>
 8007654:	d902      	bls.n	800765c <_free_r+0x78>
 8007656:	230c      	movs	r3, #12
 8007658:	6003      	str	r3, [r0, #0]
 800765a:	e7d6      	b.n	800760a <_free_r+0x26>
 800765c:	6825      	ldr	r5, [r4, #0]
 800765e:	1961      	adds	r1, r4, r5
 8007660:	428b      	cmp	r3, r1
 8007662:	bf04      	itt	eq
 8007664:	6819      	ldreq	r1, [r3, #0]
 8007666:	685b      	ldreq	r3, [r3, #4]
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	bf04      	itt	eq
 800766c:	1949      	addeq	r1, r1, r5
 800766e:	6021      	streq	r1, [r4, #0]
 8007670:	6054      	str	r4, [r2, #4]
 8007672:	e7ca      	b.n	800760a <_free_r+0x26>
 8007674:	b003      	add	sp, #12
 8007676:	bd30      	pop	{r4, r5, pc}
 8007678:	20000370 	.word	0x20000370

0800767c <sbrk_aligned>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4e0e      	ldr	r6, [pc, #56]	; (80076b8 <sbrk_aligned+0x3c>)
 8007680:	460c      	mov	r4, r1
 8007682:	6831      	ldr	r1, [r6, #0]
 8007684:	4605      	mov	r5, r0
 8007686:	b911      	cbnz	r1, 800768e <sbrk_aligned+0x12>
 8007688:	f000 f9e8 	bl	8007a5c <_sbrk_r>
 800768c:	6030      	str	r0, [r6, #0]
 800768e:	4621      	mov	r1, r4
 8007690:	4628      	mov	r0, r5
 8007692:	f000 f9e3 	bl	8007a5c <_sbrk_r>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d00a      	beq.n	80076b0 <sbrk_aligned+0x34>
 800769a:	1cc4      	adds	r4, r0, #3
 800769c:	f024 0403 	bic.w	r4, r4, #3
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d007      	beq.n	80076b4 <sbrk_aligned+0x38>
 80076a4:	1a21      	subs	r1, r4, r0
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f9d8 	bl	8007a5c <_sbrk_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d101      	bne.n	80076b4 <sbrk_aligned+0x38>
 80076b0:	f04f 34ff 	mov.w	r4, #4294967295
 80076b4:	4620      	mov	r0, r4
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	20000374 	.word	0x20000374

080076bc <_malloc_r>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	1ccd      	adds	r5, r1, #3
 80076c2:	f025 0503 	bic.w	r5, r5, #3
 80076c6:	3508      	adds	r5, #8
 80076c8:	2d0c      	cmp	r5, #12
 80076ca:	bf38      	it	cc
 80076cc:	250c      	movcc	r5, #12
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	4607      	mov	r7, r0
 80076d2:	db01      	blt.n	80076d8 <_malloc_r+0x1c>
 80076d4:	42a9      	cmp	r1, r5
 80076d6:	d905      	bls.n	80076e4 <_malloc_r+0x28>
 80076d8:	230c      	movs	r3, #12
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	2600      	movs	r6, #0
 80076de:	4630      	mov	r0, r6
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e4:	4e2e      	ldr	r6, [pc, #184]	; (80077a0 <_malloc_r+0xe4>)
 80076e6:	f000 fa25 	bl	8007b34 <__malloc_lock>
 80076ea:	6833      	ldr	r3, [r6, #0]
 80076ec:	461c      	mov	r4, r3
 80076ee:	bb34      	cbnz	r4, 800773e <_malloc_r+0x82>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4638      	mov	r0, r7
 80076f4:	f7ff ffc2 	bl	800767c <sbrk_aligned>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	4604      	mov	r4, r0
 80076fc:	d14d      	bne.n	800779a <_malloc_r+0xde>
 80076fe:	6834      	ldr	r4, [r6, #0]
 8007700:	4626      	mov	r6, r4
 8007702:	2e00      	cmp	r6, #0
 8007704:	d140      	bne.n	8007788 <_malloc_r+0xcc>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	4631      	mov	r1, r6
 800770a:	4638      	mov	r0, r7
 800770c:	eb04 0803 	add.w	r8, r4, r3
 8007710:	f000 f9a4 	bl	8007a5c <_sbrk_r>
 8007714:	4580      	cmp	r8, r0
 8007716:	d13a      	bne.n	800778e <_malloc_r+0xd2>
 8007718:	6821      	ldr	r1, [r4, #0]
 800771a:	3503      	adds	r5, #3
 800771c:	1a6d      	subs	r5, r5, r1
 800771e:	f025 0503 	bic.w	r5, r5, #3
 8007722:	3508      	adds	r5, #8
 8007724:	2d0c      	cmp	r5, #12
 8007726:	bf38      	it	cc
 8007728:	250c      	movcc	r5, #12
 800772a:	4629      	mov	r1, r5
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff ffa5 	bl	800767c <sbrk_aligned>
 8007732:	3001      	adds	r0, #1
 8007734:	d02b      	beq.n	800778e <_malloc_r+0xd2>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	442b      	add	r3, r5
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	e00e      	b.n	800775c <_malloc_r+0xa0>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	1b52      	subs	r2, r2, r5
 8007742:	d41e      	bmi.n	8007782 <_malloc_r+0xc6>
 8007744:	2a0b      	cmp	r2, #11
 8007746:	d916      	bls.n	8007776 <_malloc_r+0xba>
 8007748:	1961      	adds	r1, r4, r5
 800774a:	42a3      	cmp	r3, r4
 800774c:	6025      	str	r5, [r4, #0]
 800774e:	bf18      	it	ne
 8007750:	6059      	strne	r1, [r3, #4]
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	bf08      	it	eq
 8007756:	6031      	streq	r1, [r6, #0]
 8007758:	5162      	str	r2, [r4, r5]
 800775a:	604b      	str	r3, [r1, #4]
 800775c:	4638      	mov	r0, r7
 800775e:	f104 060b 	add.w	r6, r4, #11
 8007762:	f000 f9ed 	bl	8007b40 <__malloc_unlock>
 8007766:	f026 0607 	bic.w	r6, r6, #7
 800776a:	1d23      	adds	r3, r4, #4
 800776c:	1af2      	subs	r2, r6, r3
 800776e:	d0b6      	beq.n	80076de <_malloc_r+0x22>
 8007770:	1b9b      	subs	r3, r3, r6
 8007772:	50a3      	str	r3, [r4, r2]
 8007774:	e7b3      	b.n	80076de <_malloc_r+0x22>
 8007776:	6862      	ldr	r2, [r4, #4]
 8007778:	42a3      	cmp	r3, r4
 800777a:	bf0c      	ite	eq
 800777c:	6032      	streq	r2, [r6, #0]
 800777e:	605a      	strne	r2, [r3, #4]
 8007780:	e7ec      	b.n	800775c <_malloc_r+0xa0>
 8007782:	4623      	mov	r3, r4
 8007784:	6864      	ldr	r4, [r4, #4]
 8007786:	e7b2      	b.n	80076ee <_malloc_r+0x32>
 8007788:	4634      	mov	r4, r6
 800778a:	6876      	ldr	r6, [r6, #4]
 800778c:	e7b9      	b.n	8007702 <_malloc_r+0x46>
 800778e:	230c      	movs	r3, #12
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	4638      	mov	r0, r7
 8007794:	f000 f9d4 	bl	8007b40 <__malloc_unlock>
 8007798:	e7a1      	b.n	80076de <_malloc_r+0x22>
 800779a:	6025      	str	r5, [r4, #0]
 800779c:	e7de      	b.n	800775c <_malloc_r+0xa0>
 800779e:	bf00      	nop
 80077a0:	20000370 	.word	0x20000370

080077a4 <__ssputs_r>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	688e      	ldr	r6, [r1, #8]
 80077aa:	429e      	cmp	r6, r3
 80077ac:	4682      	mov	sl, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	4690      	mov	r8, r2
 80077b2:	461f      	mov	r7, r3
 80077b4:	d838      	bhi.n	8007828 <__ssputs_r+0x84>
 80077b6:	898a      	ldrh	r2, [r1, #12]
 80077b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077bc:	d032      	beq.n	8007824 <__ssputs_r+0x80>
 80077be:	6825      	ldr	r5, [r4, #0]
 80077c0:	6909      	ldr	r1, [r1, #16]
 80077c2:	eba5 0901 	sub.w	r9, r5, r1
 80077c6:	6965      	ldr	r5, [r4, #20]
 80077c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077d0:	3301      	adds	r3, #1
 80077d2:	444b      	add	r3, r9
 80077d4:	106d      	asrs	r5, r5, #1
 80077d6:	429d      	cmp	r5, r3
 80077d8:	bf38      	it	cc
 80077da:	461d      	movcc	r5, r3
 80077dc:	0553      	lsls	r3, r2, #21
 80077de:	d531      	bpl.n	8007844 <__ssputs_r+0xa0>
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7ff ff6b 	bl	80076bc <_malloc_r>
 80077e6:	4606      	mov	r6, r0
 80077e8:	b950      	cbnz	r0, 8007800 <__ssputs_r+0x5c>
 80077ea:	230c      	movs	r3, #12
 80077ec:	f8ca 3000 	str.w	r3, [sl]
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007800:	6921      	ldr	r1, [r4, #16]
 8007802:	464a      	mov	r2, r9
 8007804:	f7ff fb46 	bl	8006e94 <memcpy>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800780e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	6126      	str	r6, [r4, #16]
 8007816:	6165      	str	r5, [r4, #20]
 8007818:	444e      	add	r6, r9
 800781a:	eba5 0509 	sub.w	r5, r5, r9
 800781e:	6026      	str	r6, [r4, #0]
 8007820:	60a5      	str	r5, [r4, #8]
 8007822:	463e      	mov	r6, r7
 8007824:	42be      	cmp	r6, r7
 8007826:	d900      	bls.n	800782a <__ssputs_r+0x86>
 8007828:	463e      	mov	r6, r7
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	4632      	mov	r2, r6
 800782e:	4641      	mov	r1, r8
 8007830:	f000 f966 	bl	8007b00 <memmove>
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	1b9b      	subs	r3, r3, r6
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	4433      	add	r3, r6
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	2000      	movs	r0, #0
 8007842:	e7db      	b.n	80077fc <__ssputs_r+0x58>
 8007844:	462a      	mov	r2, r5
 8007846:	f000 f981 	bl	8007b4c <_realloc_r>
 800784a:	4606      	mov	r6, r0
 800784c:	2800      	cmp	r0, #0
 800784e:	d1e1      	bne.n	8007814 <__ssputs_r+0x70>
 8007850:	6921      	ldr	r1, [r4, #16]
 8007852:	4650      	mov	r0, sl
 8007854:	f7ff fec6 	bl	80075e4 <_free_r>
 8007858:	e7c7      	b.n	80077ea <__ssputs_r+0x46>
	...

0800785c <_svfiprintf_r>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	4698      	mov	r8, r3
 8007862:	898b      	ldrh	r3, [r1, #12]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	b09d      	sub	sp, #116	; 0x74
 8007868:	4607      	mov	r7, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4614      	mov	r4, r2
 800786e:	d50e      	bpl.n	800788e <_svfiprintf_r+0x32>
 8007870:	690b      	ldr	r3, [r1, #16]
 8007872:	b963      	cbnz	r3, 800788e <_svfiprintf_r+0x32>
 8007874:	2140      	movs	r1, #64	; 0x40
 8007876:	f7ff ff21 	bl	80076bc <_malloc_r>
 800787a:	6028      	str	r0, [r5, #0]
 800787c:	6128      	str	r0, [r5, #16]
 800787e:	b920      	cbnz	r0, 800788a <_svfiprintf_r+0x2e>
 8007880:	230c      	movs	r3, #12
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	e0d1      	b.n	8007a2e <_svfiprintf_r+0x1d2>
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	616b      	str	r3, [r5, #20]
 800788e:	2300      	movs	r3, #0
 8007890:	9309      	str	r3, [sp, #36]	; 0x24
 8007892:	2320      	movs	r3, #32
 8007894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007898:	f8cd 800c 	str.w	r8, [sp, #12]
 800789c:	2330      	movs	r3, #48	; 0x30
 800789e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a48 <_svfiprintf_r+0x1ec>
 80078a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a6:	f04f 0901 	mov.w	r9, #1
 80078aa:	4623      	mov	r3, r4
 80078ac:	469a      	mov	sl, r3
 80078ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078b2:	b10a      	cbz	r2, 80078b8 <_svfiprintf_r+0x5c>
 80078b4:	2a25      	cmp	r2, #37	; 0x25
 80078b6:	d1f9      	bne.n	80078ac <_svfiprintf_r+0x50>
 80078b8:	ebba 0b04 	subs.w	fp, sl, r4
 80078bc:	d00b      	beq.n	80078d6 <_svfiprintf_r+0x7a>
 80078be:	465b      	mov	r3, fp
 80078c0:	4622      	mov	r2, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff ff6d 	bl	80077a4 <__ssputs_r>
 80078ca:	3001      	adds	r0, #1
 80078cc:	f000 80aa 	beq.w	8007a24 <_svfiprintf_r+0x1c8>
 80078d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d2:	445a      	add	r2, fp
 80078d4:	9209      	str	r2, [sp, #36]	; 0x24
 80078d6:	f89a 3000 	ldrb.w	r3, [sl]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80a2 	beq.w	8007a24 <_svfiprintf_r+0x1c8>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f04f 32ff 	mov.w	r2, #4294967295
 80078e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ea:	f10a 0a01 	add.w	sl, sl, #1
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	9307      	str	r3, [sp, #28]
 80078f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f6:	931a      	str	r3, [sp, #104]	; 0x68
 80078f8:	4654      	mov	r4, sl
 80078fa:	2205      	movs	r2, #5
 80078fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007900:	4851      	ldr	r0, [pc, #324]	; (8007a48 <_svfiprintf_r+0x1ec>)
 8007902:	f7f8 fc95 	bl	8000230 <memchr>
 8007906:	9a04      	ldr	r2, [sp, #16]
 8007908:	b9d8      	cbnz	r0, 8007942 <_svfiprintf_r+0xe6>
 800790a:	06d0      	lsls	r0, r2, #27
 800790c:	bf44      	itt	mi
 800790e:	2320      	movmi	r3, #32
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007914:	0711      	lsls	r1, r2, #28
 8007916:	bf44      	itt	mi
 8007918:	232b      	movmi	r3, #43	; 0x2b
 800791a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791e:	f89a 3000 	ldrb.w	r3, [sl]
 8007922:	2b2a      	cmp	r3, #42	; 0x2a
 8007924:	d015      	beq.n	8007952 <_svfiprintf_r+0xf6>
 8007926:	9a07      	ldr	r2, [sp, #28]
 8007928:	4654      	mov	r4, sl
 800792a:	2000      	movs	r0, #0
 800792c:	f04f 0c0a 	mov.w	ip, #10
 8007930:	4621      	mov	r1, r4
 8007932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007936:	3b30      	subs	r3, #48	; 0x30
 8007938:	2b09      	cmp	r3, #9
 800793a:	d94e      	bls.n	80079da <_svfiprintf_r+0x17e>
 800793c:	b1b0      	cbz	r0, 800796c <_svfiprintf_r+0x110>
 800793e:	9207      	str	r2, [sp, #28]
 8007940:	e014      	b.n	800796c <_svfiprintf_r+0x110>
 8007942:	eba0 0308 	sub.w	r3, r0, r8
 8007946:	fa09 f303 	lsl.w	r3, r9, r3
 800794a:	4313      	orrs	r3, r2
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	46a2      	mov	sl, r4
 8007950:	e7d2      	b.n	80078f8 <_svfiprintf_r+0x9c>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	1d19      	adds	r1, r3, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	9103      	str	r1, [sp, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfbb      	ittet	lt
 800795e:	425b      	neglt	r3, r3
 8007960:	f042 0202 	orrlt.w	r2, r2, #2
 8007964:	9307      	strge	r3, [sp, #28]
 8007966:	9307      	strlt	r3, [sp, #28]
 8007968:	bfb8      	it	lt
 800796a:	9204      	strlt	r2, [sp, #16]
 800796c:	7823      	ldrb	r3, [r4, #0]
 800796e:	2b2e      	cmp	r3, #46	; 0x2e
 8007970:	d10c      	bne.n	800798c <_svfiprintf_r+0x130>
 8007972:	7863      	ldrb	r3, [r4, #1]
 8007974:	2b2a      	cmp	r3, #42	; 0x2a
 8007976:	d135      	bne.n	80079e4 <_svfiprintf_r+0x188>
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9203      	str	r2, [sp, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfb8      	it	lt
 8007984:	f04f 33ff 	movlt.w	r3, #4294967295
 8007988:	3402      	adds	r4, #2
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a58 <_svfiprintf_r+0x1fc>
 8007990:	7821      	ldrb	r1, [r4, #0]
 8007992:	2203      	movs	r2, #3
 8007994:	4650      	mov	r0, sl
 8007996:	f7f8 fc4b 	bl	8000230 <memchr>
 800799a:	b140      	cbz	r0, 80079ae <_svfiprintf_r+0x152>
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	eba0 000a 	sub.w	r0, r0, sl
 80079a2:	fa03 f000 	lsl.w	r0, r3, r0
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	4303      	orrs	r3, r0
 80079aa:	3401      	adds	r4, #1
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b2:	4826      	ldr	r0, [pc, #152]	; (8007a4c <_svfiprintf_r+0x1f0>)
 80079b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079b8:	2206      	movs	r2, #6
 80079ba:	f7f8 fc39 	bl	8000230 <memchr>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d038      	beq.n	8007a34 <_svfiprintf_r+0x1d8>
 80079c2:	4b23      	ldr	r3, [pc, #140]	; (8007a50 <_svfiprintf_r+0x1f4>)
 80079c4:	bb1b      	cbnz	r3, 8007a0e <_svfiprintf_r+0x1b2>
 80079c6:	9b03      	ldr	r3, [sp, #12]
 80079c8:	3307      	adds	r3, #7
 80079ca:	f023 0307 	bic.w	r3, r3, #7
 80079ce:	3308      	adds	r3, #8
 80079d0:	9303      	str	r3, [sp, #12]
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	4433      	add	r3, r6
 80079d6:	9309      	str	r3, [sp, #36]	; 0x24
 80079d8:	e767      	b.n	80078aa <_svfiprintf_r+0x4e>
 80079da:	fb0c 3202 	mla	r2, ip, r2, r3
 80079de:	460c      	mov	r4, r1
 80079e0:	2001      	movs	r0, #1
 80079e2:	e7a5      	b.n	8007930 <_svfiprintf_r+0xd4>
 80079e4:	2300      	movs	r3, #0
 80079e6:	3401      	adds	r4, #1
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	4619      	mov	r1, r3
 80079ec:	f04f 0c0a 	mov.w	ip, #10
 80079f0:	4620      	mov	r0, r4
 80079f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f6:	3a30      	subs	r2, #48	; 0x30
 80079f8:	2a09      	cmp	r2, #9
 80079fa:	d903      	bls.n	8007a04 <_svfiprintf_r+0x1a8>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0c5      	beq.n	800798c <_svfiprintf_r+0x130>
 8007a00:	9105      	str	r1, [sp, #20]
 8007a02:	e7c3      	b.n	800798c <_svfiprintf_r+0x130>
 8007a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a08:	4604      	mov	r4, r0
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7f0      	b.n	80079f0 <_svfiprintf_r+0x194>
 8007a0e:	ab03      	add	r3, sp, #12
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	462a      	mov	r2, r5
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <_svfiprintf_r+0x1f8>)
 8007a16:	a904      	add	r1, sp, #16
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f7fd ffcb 	bl	80059b4 <_printf_float>
 8007a1e:	1c42      	adds	r2, r0, #1
 8007a20:	4606      	mov	r6, r0
 8007a22:	d1d6      	bne.n	80079d2 <_svfiprintf_r+0x176>
 8007a24:	89ab      	ldrh	r3, [r5, #12]
 8007a26:	065b      	lsls	r3, r3, #25
 8007a28:	f53f af2c 	bmi.w	8007884 <_svfiprintf_r+0x28>
 8007a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a2e:	b01d      	add	sp, #116	; 0x74
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	ab03      	add	r3, sp, #12
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <_svfiprintf_r+0x1f8>)
 8007a3c:	a904      	add	r1, sp, #16
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7fe fa5c 	bl	8005efc <_printf_i>
 8007a44:	e7eb      	b.n	8007a1e <_svfiprintf_r+0x1c2>
 8007a46:	bf00      	nop
 8007a48:	08008ac4 	.word	0x08008ac4
 8007a4c:	08008ace 	.word	0x08008ace
 8007a50:	080059b5 	.word	0x080059b5
 8007a54:	080077a5 	.word	0x080077a5
 8007a58:	08008aca 	.word	0x08008aca

08007a5c <_sbrk_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	; (8007a78 <_sbrk_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fa f87a 	bl	8001b60 <_sbrk>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_sbrk_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_sbrk_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000378 	.word	0x20000378

08007a7c <__assert_func>:
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <__assert_func+0x2c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4605      	mov	r5, r0
 8007a88:	68d8      	ldr	r0, [r3, #12]
 8007a8a:	b14c      	cbz	r4, 8007aa0 <__assert_func+0x24>
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <__assert_func+0x30>)
 8007a8e:	9100      	str	r1, [sp, #0]
 8007a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a94:	4906      	ldr	r1, [pc, #24]	; (8007ab0 <__assert_func+0x34>)
 8007a96:	462b      	mov	r3, r5
 8007a98:	f000 f80e 	bl	8007ab8 <fiprintf>
 8007a9c:	f000 faac 	bl	8007ff8 <abort>
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <__assert_func+0x38>)
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	e7f3      	b.n	8007a8e <__assert_func+0x12>
 8007aa6:	bf00      	nop
 8007aa8:	20000010 	.word	0x20000010
 8007aac:	08008ad5 	.word	0x08008ad5
 8007ab0:	08008ae2 	.word	0x08008ae2
 8007ab4:	08008b10 	.word	0x08008b10

08007ab8 <fiprintf>:
 8007ab8:	b40e      	push	{r1, r2, r3}
 8007aba:	b503      	push	{r0, r1, lr}
 8007abc:	4601      	mov	r1, r0
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <fiprintf+0x20>)
 8007ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac6:	6800      	ldr	r0, [r0, #0]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f000 f897 	bl	8007bfc <_vfiprintf_r>
 8007ace:	b002      	add	sp, #8
 8007ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad4:	b003      	add	sp, #12
 8007ad6:	4770      	bx	lr
 8007ad8:	20000010 	.word	0x20000010

08007adc <__ascii_mbtowc>:
 8007adc:	b082      	sub	sp, #8
 8007ade:	b901      	cbnz	r1, 8007ae2 <__ascii_mbtowc+0x6>
 8007ae0:	a901      	add	r1, sp, #4
 8007ae2:	b142      	cbz	r2, 8007af6 <__ascii_mbtowc+0x1a>
 8007ae4:	b14b      	cbz	r3, 8007afa <__ascii_mbtowc+0x1e>
 8007ae6:	7813      	ldrb	r3, [r2, #0]
 8007ae8:	600b      	str	r3, [r1, #0]
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	1e10      	subs	r0, r2, #0
 8007aee:	bf18      	it	ne
 8007af0:	2001      	movne	r0, #1
 8007af2:	b002      	add	sp, #8
 8007af4:	4770      	bx	lr
 8007af6:	4610      	mov	r0, r2
 8007af8:	e7fb      	b.n	8007af2 <__ascii_mbtowc+0x16>
 8007afa:	f06f 0001 	mvn.w	r0, #1
 8007afe:	e7f8      	b.n	8007af2 <__ascii_mbtowc+0x16>

08007b00 <memmove>:
 8007b00:	4288      	cmp	r0, r1
 8007b02:	b510      	push	{r4, lr}
 8007b04:	eb01 0402 	add.w	r4, r1, r2
 8007b08:	d902      	bls.n	8007b10 <memmove+0x10>
 8007b0a:	4284      	cmp	r4, r0
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	d807      	bhi.n	8007b20 <memmove+0x20>
 8007b10:	1e43      	subs	r3, r0, #1
 8007b12:	42a1      	cmp	r1, r4
 8007b14:	d008      	beq.n	8007b28 <memmove+0x28>
 8007b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b1e:	e7f8      	b.n	8007b12 <memmove+0x12>
 8007b20:	4402      	add	r2, r0
 8007b22:	4601      	mov	r1, r0
 8007b24:	428a      	cmp	r2, r1
 8007b26:	d100      	bne.n	8007b2a <memmove+0x2a>
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b32:	e7f7      	b.n	8007b24 <memmove+0x24>

08007b34 <__malloc_lock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_lock+0x8>)
 8007b36:	f000 bc1f 	b.w	8008378 <__retarget_lock_acquire_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	2000037c 	.word	0x2000037c

08007b40 <__malloc_unlock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_unlock+0x8>)
 8007b42:	f000 bc1a 	b.w	800837a <__retarget_lock_release_recursive>
 8007b46:	bf00      	nop
 8007b48:	2000037c 	.word	0x2000037c

08007b4c <_realloc_r>:
 8007b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	4680      	mov	r8, r0
 8007b52:	4614      	mov	r4, r2
 8007b54:	460e      	mov	r6, r1
 8007b56:	b921      	cbnz	r1, 8007b62 <_realloc_r+0x16>
 8007b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	f7ff bdad 	b.w	80076bc <_malloc_r>
 8007b62:	b92a      	cbnz	r2, 8007b70 <_realloc_r+0x24>
 8007b64:	f7ff fd3e 	bl	80075e4 <_free_r>
 8007b68:	4625      	mov	r5, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	f000 fc6a 	bl	8008448 <_malloc_usable_size_r>
 8007b74:	4284      	cmp	r4, r0
 8007b76:	4607      	mov	r7, r0
 8007b78:	d802      	bhi.n	8007b80 <_realloc_r+0x34>
 8007b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b7e:	d812      	bhi.n	8007ba6 <_realloc_r+0x5a>
 8007b80:	4621      	mov	r1, r4
 8007b82:	4640      	mov	r0, r8
 8007b84:	f7ff fd9a 	bl	80076bc <_malloc_r>
 8007b88:	4605      	mov	r5, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d0ed      	beq.n	8007b6a <_realloc_r+0x1e>
 8007b8e:	42bc      	cmp	r4, r7
 8007b90:	4622      	mov	r2, r4
 8007b92:	4631      	mov	r1, r6
 8007b94:	bf28      	it	cs
 8007b96:	463a      	movcs	r2, r7
 8007b98:	f7ff f97c 	bl	8006e94 <memcpy>
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7ff fd20 	bl	80075e4 <_free_r>
 8007ba4:	e7e1      	b.n	8007b6a <_realloc_r+0x1e>
 8007ba6:	4635      	mov	r5, r6
 8007ba8:	e7df      	b.n	8007b6a <_realloc_r+0x1e>

08007baa <__sfputc_r>:
 8007baa:	6893      	ldr	r3, [r2, #8]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	b410      	push	{r4}
 8007bb2:	6093      	str	r3, [r2, #8]
 8007bb4:	da08      	bge.n	8007bc8 <__sfputc_r+0x1e>
 8007bb6:	6994      	ldr	r4, [r2, #24]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	db01      	blt.n	8007bc0 <__sfputc_r+0x16>
 8007bbc:	290a      	cmp	r1, #10
 8007bbe:	d103      	bne.n	8007bc8 <__sfputc_r+0x1e>
 8007bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc4:	f000 b94a 	b.w	8007e5c <__swbuf_r>
 8007bc8:	6813      	ldr	r3, [r2, #0]
 8007bca:	1c58      	adds	r0, r3, #1
 8007bcc:	6010      	str	r0, [r2, #0]
 8007bce:	7019      	strb	r1, [r3, #0]
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <__sfputs_r>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	4614      	mov	r4, r2
 8007be0:	18d5      	adds	r5, r2, r3
 8007be2:	42ac      	cmp	r4, r5
 8007be4:	d101      	bne.n	8007bea <__sfputs_r+0x12>
 8007be6:	2000      	movs	r0, #0
 8007be8:	e007      	b.n	8007bfa <__sfputs_r+0x22>
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	463a      	mov	r2, r7
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffda 	bl	8007baa <__sfputc_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d1f3      	bne.n	8007be2 <__sfputs_r+0xa>
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bfc <_vfiprintf_r>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	460d      	mov	r5, r1
 8007c02:	b09d      	sub	sp, #116	; 0x74
 8007c04:	4614      	mov	r4, r2
 8007c06:	4698      	mov	r8, r3
 8007c08:	4606      	mov	r6, r0
 8007c0a:	b118      	cbz	r0, 8007c14 <_vfiprintf_r+0x18>
 8007c0c:	6983      	ldr	r3, [r0, #24]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <_vfiprintf_r+0x18>
 8007c10:	f000 fb14 	bl	800823c <__sinit>
 8007c14:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <_vfiprintf_r+0x240>)
 8007c16:	429d      	cmp	r5, r3
 8007c18:	d11b      	bne.n	8007c52 <_vfiprintf_r+0x56>
 8007c1a:	6875      	ldr	r5, [r6, #4]
 8007c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2a:	f000 fba5 	bl	8008378 <__retarget_lock_acquire_recursive>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	071b      	lsls	r3, r3, #28
 8007c32:	d501      	bpl.n	8007c38 <_vfiprintf_r+0x3c>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	b9eb      	cbnz	r3, 8007c74 <_vfiprintf_r+0x78>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f000 f96e 	bl	8007f1c <__swsetup_r>
 8007c40:	b1c0      	cbz	r0, 8007c74 <_vfiprintf_r+0x78>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c44:	07dc      	lsls	r4, r3, #31
 8007c46:	d50e      	bpl.n	8007c66 <_vfiprintf_r+0x6a>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	b01d      	add	sp, #116	; 0x74
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b7b      	ldr	r3, [pc, #492]	; (8007e40 <_vfiprintf_r+0x244>)
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d101      	bne.n	8007c5c <_vfiprintf_r+0x60>
 8007c58:	68b5      	ldr	r5, [r6, #8]
 8007c5a:	e7df      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c5c:	4b79      	ldr	r3, [pc, #484]	; (8007e44 <_vfiprintf_r+0x248>)
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	bf08      	it	eq
 8007c62:	68f5      	ldreq	r5, [r6, #12]
 8007c64:	e7da      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	0598      	lsls	r0, r3, #22
 8007c6a:	d4ed      	bmi.n	8007c48 <_vfiprintf_r+0x4c>
 8007c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c6e:	f000 fb84 	bl	800837a <__retarget_lock_release_recursive>
 8007c72:	e7e9      	b.n	8007c48 <_vfiprintf_r+0x4c>
 8007c74:	2300      	movs	r3, #0
 8007c76:	9309      	str	r3, [sp, #36]	; 0x24
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c82:	2330      	movs	r3, #48	; 0x30
 8007c84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e48 <_vfiprintf_r+0x24c>
 8007c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c8c:	f04f 0901 	mov.w	r9, #1
 8007c90:	4623      	mov	r3, r4
 8007c92:	469a      	mov	sl, r3
 8007c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c98:	b10a      	cbz	r2, 8007c9e <_vfiprintf_r+0xa2>
 8007c9a:	2a25      	cmp	r2, #37	; 0x25
 8007c9c:	d1f9      	bne.n	8007c92 <_vfiprintf_r+0x96>
 8007c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca2:	d00b      	beq.n	8007cbc <_vfiprintf_r+0xc0>
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ff94 	bl	8007bd8 <__sfputs_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f000 80aa 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	445a      	add	r2, fp
 8007cba:	9209      	str	r2, [sp, #36]	; 0x24
 8007cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80a2 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd0:	f10a 0a01 	add.w	sl, sl, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	4858      	ldr	r0, [pc, #352]	; (8007e48 <_vfiprintf_r+0x24c>)
 8007ce8:	f7f8 faa2 	bl	8000230 <memchr>
 8007cec:	9a04      	ldr	r2, [sp, #16]
 8007cee:	b9d8      	cbnz	r0, 8007d28 <_vfiprintf_r+0x12c>
 8007cf0:	06d1      	lsls	r1, r2, #27
 8007cf2:	bf44      	itt	mi
 8007cf4:	2320      	movmi	r3, #32
 8007cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfa:	0713      	lsls	r3, r2, #28
 8007cfc:	bf44      	itt	mi
 8007cfe:	232b      	movmi	r3, #43	; 0x2b
 8007d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d04:	f89a 3000 	ldrb.w	r3, [sl]
 8007d08:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0a:	d015      	beq.n	8007d38 <_vfiprintf_r+0x13c>
 8007d0c:	9a07      	ldr	r2, [sp, #28]
 8007d0e:	4654      	mov	r4, sl
 8007d10:	2000      	movs	r0, #0
 8007d12:	f04f 0c0a 	mov.w	ip, #10
 8007d16:	4621      	mov	r1, r4
 8007d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1c:	3b30      	subs	r3, #48	; 0x30
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d94e      	bls.n	8007dc0 <_vfiprintf_r+0x1c4>
 8007d22:	b1b0      	cbz	r0, 8007d52 <_vfiprintf_r+0x156>
 8007d24:	9207      	str	r2, [sp, #28]
 8007d26:	e014      	b.n	8007d52 <_vfiprintf_r+0x156>
 8007d28:	eba0 0308 	sub.w	r3, r0, r8
 8007d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	46a2      	mov	sl, r4
 8007d36:	e7d2      	b.n	8007cde <_vfiprintf_r+0xe2>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	1d19      	adds	r1, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9103      	str	r1, [sp, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbb      	ittet	lt
 8007d44:	425b      	neglt	r3, r3
 8007d46:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4a:	9307      	strge	r3, [sp, #28]
 8007d4c:	9307      	strlt	r3, [sp, #28]
 8007d4e:	bfb8      	it	lt
 8007d50:	9204      	strlt	r2, [sp, #16]
 8007d52:	7823      	ldrb	r3, [r4, #0]
 8007d54:	2b2e      	cmp	r3, #46	; 0x2e
 8007d56:	d10c      	bne.n	8007d72 <_vfiprintf_r+0x176>
 8007d58:	7863      	ldrb	r3, [r4, #1]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d135      	bne.n	8007dca <_vfiprintf_r+0x1ce>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	1d1a      	adds	r2, r3, #4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	9203      	str	r2, [sp, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfb8      	it	lt
 8007d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d6e:	3402      	adds	r4, #2
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e58 <_vfiprintf_r+0x25c>
 8007d76:	7821      	ldrb	r1, [r4, #0]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	f7f8 fa58 	bl	8000230 <memchr>
 8007d80:	b140      	cbz	r0, 8007d94 <_vfiprintf_r+0x198>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	eba0 000a 	sub.w	r0, r0, sl
 8007d88:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	4303      	orrs	r3, r0
 8007d90:	3401      	adds	r4, #1
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	482c      	ldr	r0, [pc, #176]	; (8007e4c <_vfiprintf_r+0x250>)
 8007d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9e:	2206      	movs	r2, #6
 8007da0:	f7f8 fa46 	bl	8000230 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d03f      	beq.n	8007e28 <_vfiprintf_r+0x22c>
 8007da8:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <_vfiprintf_r+0x254>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x1f8>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	443b      	add	r3, r7
 8007dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbe:	e767      	b.n	8007c90 <_vfiprintf_r+0x94>
 8007dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7a5      	b.n	8007d16 <_vfiprintf_r+0x11a>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	3401      	adds	r4, #1
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	; 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_vfiprintf_r+0x1ee>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c5      	beq.n	8007d72 <_vfiprintf_r+0x176>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c3      	b.n	8007d72 <_vfiprintf_r+0x176>
 8007dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dee:	4604      	mov	r4, r0
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7f0      	b.n	8007dd6 <_vfiprintf_r+0x1da>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <_vfiprintf_r+0x258>)
 8007dfc:	a904      	add	r1, sp, #16
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fd fdd8 	bl	80059b4 <_printf_float>
 8007e04:	4607      	mov	r7, r0
 8007e06:	1c78      	adds	r0, r7, #1
 8007e08:	d1d6      	bne.n	8007db8 <_vfiprintf_r+0x1bc>
 8007e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	d405      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	059a      	lsls	r2, r3, #22
 8007e14:	d402      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e18:	f000 faaf 	bl	800837a <__retarget_lock_release_recursive>
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	065b      	lsls	r3, r3, #25
 8007e20:	f53f af12 	bmi.w	8007c48 <_vfiprintf_r+0x4c>
 8007e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e26:	e711      	b.n	8007c4c <_vfiprintf_r+0x50>
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <_vfiprintf_r+0x258>)
 8007e30:	a904      	add	r1, sp, #16
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7fe f862 	bl	8005efc <_printf_i>
 8007e38:	e7e4      	b.n	8007e04 <_vfiprintf_r+0x208>
 8007e3a:	bf00      	nop
 8007e3c:	08008c3c 	.word	0x08008c3c
 8007e40:	08008c5c 	.word	0x08008c5c
 8007e44:	08008c1c 	.word	0x08008c1c
 8007e48:	08008ac4 	.word	0x08008ac4
 8007e4c:	08008ace 	.word	0x08008ace
 8007e50:	080059b5 	.word	0x080059b5
 8007e54:	08007bd9 	.word	0x08007bd9
 8007e58:	08008aca 	.word	0x08008aca

08007e5c <__swbuf_r>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	460e      	mov	r6, r1
 8007e60:	4614      	mov	r4, r2
 8007e62:	4605      	mov	r5, r0
 8007e64:	b118      	cbz	r0, 8007e6e <__swbuf_r+0x12>
 8007e66:	6983      	ldr	r3, [r0, #24]
 8007e68:	b90b      	cbnz	r3, 8007e6e <__swbuf_r+0x12>
 8007e6a:	f000 f9e7 	bl	800823c <__sinit>
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <__swbuf_r+0x98>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d12b      	bne.n	8007ecc <__swbuf_r+0x70>
 8007e74:	686c      	ldr	r4, [r5, #4]
 8007e76:	69a3      	ldr	r3, [r4, #24]
 8007e78:	60a3      	str	r3, [r4, #8]
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	071a      	lsls	r2, r3, #28
 8007e7e:	d52f      	bpl.n	8007ee0 <__swbuf_r+0x84>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	b36b      	cbz	r3, 8007ee0 <__swbuf_r+0x84>
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	1ac0      	subs	r0, r0, r3
 8007e8a:	6963      	ldr	r3, [r4, #20]
 8007e8c:	b2f6      	uxtb	r6, r6
 8007e8e:	4283      	cmp	r3, r0
 8007e90:	4637      	mov	r7, r6
 8007e92:	dc04      	bgt.n	8007e9e <__swbuf_r+0x42>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 f93c 	bl	8008114 <_fflush_r>
 8007e9c:	bb30      	cbnz	r0, 8007eec <__swbuf_r+0x90>
 8007e9e:	68a3      	ldr	r3, [r4, #8]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	60a3      	str	r3, [r4, #8]
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	701e      	strb	r6, [r3, #0]
 8007eac:	6963      	ldr	r3, [r4, #20]
 8007eae:	3001      	adds	r0, #1
 8007eb0:	4283      	cmp	r3, r0
 8007eb2:	d004      	beq.n	8007ebe <__swbuf_r+0x62>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	07db      	lsls	r3, r3, #31
 8007eb8:	d506      	bpl.n	8007ec8 <__swbuf_r+0x6c>
 8007eba:	2e0a      	cmp	r6, #10
 8007ebc:	d104      	bne.n	8007ec8 <__swbuf_r+0x6c>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 f927 	bl	8008114 <_fflush_r>
 8007ec6:	b988      	cbnz	r0, 8007eec <__swbuf_r+0x90>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <__swbuf_r+0x9c>)
 8007ece:	429c      	cmp	r4, r3
 8007ed0:	d101      	bne.n	8007ed6 <__swbuf_r+0x7a>
 8007ed2:	68ac      	ldr	r4, [r5, #8]
 8007ed4:	e7cf      	b.n	8007e76 <__swbuf_r+0x1a>
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <__swbuf_r+0xa0>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	bf08      	it	eq
 8007edc:	68ec      	ldreq	r4, [r5, #12]
 8007ede:	e7ca      	b.n	8007e76 <__swbuf_r+0x1a>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 f81a 	bl	8007f1c <__swsetup_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0cb      	beq.n	8007e84 <__swbuf_r+0x28>
 8007eec:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef0:	e7ea      	b.n	8007ec8 <__swbuf_r+0x6c>
 8007ef2:	bf00      	nop
 8007ef4:	08008c3c 	.word	0x08008c3c
 8007ef8:	08008c5c 	.word	0x08008c5c
 8007efc:	08008c1c 	.word	0x08008c1c

08007f00 <__ascii_wctomb>:
 8007f00:	b149      	cbz	r1, 8007f16 <__ascii_wctomb+0x16>
 8007f02:	2aff      	cmp	r2, #255	; 0xff
 8007f04:	bf85      	ittet	hi
 8007f06:	238a      	movhi	r3, #138	; 0x8a
 8007f08:	6003      	strhi	r3, [r0, #0]
 8007f0a:	700a      	strbls	r2, [r1, #0]
 8007f0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f10:	bf98      	it	ls
 8007f12:	2001      	movls	r0, #1
 8007f14:	4770      	bx	lr
 8007f16:	4608      	mov	r0, r1
 8007f18:	4770      	bx	lr
	...

08007f1c <__swsetup_r>:
 8007f1c:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <__swsetup_r+0xcc>)
 8007f1e:	b570      	push	{r4, r5, r6, lr}
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	4606      	mov	r6, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	b125      	cbz	r5, 8007f32 <__swsetup_r+0x16>
 8007f28:	69ab      	ldr	r3, [r5, #24]
 8007f2a:	b913      	cbnz	r3, 8007f32 <__swsetup_r+0x16>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f000 f985 	bl	800823c <__sinit>
 8007f32:	4b2e      	ldr	r3, [pc, #184]	; (8007fec <__swsetup_r+0xd0>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d10f      	bne.n	8007f58 <__swsetup_r+0x3c>
 8007f38:	686c      	ldr	r4, [r5, #4]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f40:	0719      	lsls	r1, r3, #28
 8007f42:	d42c      	bmi.n	8007f9e <__swsetup_r+0x82>
 8007f44:	06dd      	lsls	r5, r3, #27
 8007f46:	d411      	bmi.n	8007f6c <__swsetup_r+0x50>
 8007f48:	2309      	movs	r3, #9
 8007f4a:	6033      	str	r3, [r6, #0]
 8007f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
 8007f56:	e03e      	b.n	8007fd6 <__swsetup_r+0xba>
 8007f58:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <__swsetup_r+0xd4>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <__swsetup_r+0x46>
 8007f5e:	68ac      	ldr	r4, [r5, #8]
 8007f60:	e7eb      	b.n	8007f3a <__swsetup_r+0x1e>
 8007f62:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <__swsetup_r+0xd8>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68ec      	ldreq	r4, [r5, #12]
 8007f6a:	e7e6      	b.n	8007f3a <__swsetup_r+0x1e>
 8007f6c:	0758      	lsls	r0, r3, #29
 8007f6e:	d512      	bpl.n	8007f96 <__swsetup_r+0x7a>
 8007f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f72:	b141      	cbz	r1, 8007f86 <__swsetup_r+0x6a>
 8007f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	d002      	beq.n	8007f82 <__swsetup_r+0x66>
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff fb31 	bl	80075e4 <_free_r>
 8007f82:	2300      	movs	r3, #0
 8007f84:	6363      	str	r3, [r4, #52]	; 0x34
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	b94b      	cbnz	r3, 8007fb6 <__swsetup_r+0x9a>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d003      	beq.n	8007fb6 <__swsetup_r+0x9a>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 fa09 	bl	80083c8 <__smakebuf_r>
 8007fb6:	89a0      	ldrh	r0, [r4, #12]
 8007fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fbc:	f010 0301 	ands.w	r3, r0, #1
 8007fc0:	d00a      	beq.n	8007fd8 <__swsetup_r+0xbc>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60a3      	str	r3, [r4, #8]
 8007fc6:	6963      	ldr	r3, [r4, #20]
 8007fc8:	425b      	negs	r3, r3
 8007fca:	61a3      	str	r3, [r4, #24]
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	b943      	cbnz	r3, 8007fe2 <__swsetup_r+0xc6>
 8007fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fd4:	d1ba      	bne.n	8007f4c <__swsetup_r+0x30>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	0781      	lsls	r1, r0, #30
 8007fda:	bf58      	it	pl
 8007fdc:	6963      	ldrpl	r3, [r4, #20]
 8007fde:	60a3      	str	r3, [r4, #8]
 8007fe0:	e7f4      	b.n	8007fcc <__swsetup_r+0xb0>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e7f7      	b.n	8007fd6 <__swsetup_r+0xba>
 8007fe6:	bf00      	nop
 8007fe8:	20000010 	.word	0x20000010
 8007fec:	08008c3c 	.word	0x08008c3c
 8007ff0:	08008c5c 	.word	0x08008c5c
 8007ff4:	08008c1c 	.word	0x08008c1c

08007ff8 <abort>:
 8007ff8:	b508      	push	{r3, lr}
 8007ffa:	2006      	movs	r0, #6
 8007ffc:	f000 fa54 	bl	80084a8 <raise>
 8008000:	2001      	movs	r0, #1
 8008002:	f7f9 fd35 	bl	8001a70 <_exit>
	...

08008008 <__sflush_r>:
 8008008:	898a      	ldrh	r2, [r1, #12]
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	4605      	mov	r5, r0
 8008010:	0710      	lsls	r0, r2, #28
 8008012:	460c      	mov	r4, r1
 8008014:	d458      	bmi.n	80080c8 <__sflush_r+0xc0>
 8008016:	684b      	ldr	r3, [r1, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc05      	bgt.n	8008028 <__sflush_r+0x20>
 800801c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc02      	bgt.n	8008028 <__sflush_r+0x20>
 8008022:	2000      	movs	r0, #0
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800802a:	2e00      	cmp	r6, #0
 800802c:	d0f9      	beq.n	8008022 <__sflush_r+0x1a>
 800802e:	2300      	movs	r3, #0
 8008030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008034:	682f      	ldr	r7, [r5, #0]
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	d032      	beq.n	80080a0 <__sflush_r+0x98>
 800803a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	075a      	lsls	r2, r3, #29
 8008040:	d505      	bpl.n	800804e <__sflush_r+0x46>
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	1ac0      	subs	r0, r0, r3
 8008046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008048:	b10b      	cbz	r3, 800804e <__sflush_r+0x46>
 800804a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800804c:	1ac0      	subs	r0, r0, r3
 800804e:	2300      	movs	r3, #0
 8008050:	4602      	mov	r2, r0
 8008052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008054:	6a21      	ldr	r1, [r4, #32]
 8008056:	4628      	mov	r0, r5
 8008058:	47b0      	blx	r6
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	d106      	bne.n	800806e <__sflush_r+0x66>
 8008060:	6829      	ldr	r1, [r5, #0]
 8008062:	291d      	cmp	r1, #29
 8008064:	d82c      	bhi.n	80080c0 <__sflush_r+0xb8>
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <__sflush_r+0x108>)
 8008068:	40ca      	lsrs	r2, r1
 800806a:	07d6      	lsls	r6, r2, #31
 800806c:	d528      	bpl.n	80080c0 <__sflush_r+0xb8>
 800806e:	2200      	movs	r2, #0
 8008070:	6062      	str	r2, [r4, #4]
 8008072:	04d9      	lsls	r1, r3, #19
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	d504      	bpl.n	8008084 <__sflush_r+0x7c>
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	d101      	bne.n	8008082 <__sflush_r+0x7a>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b903      	cbnz	r3, 8008084 <__sflush_r+0x7c>
 8008082:	6560      	str	r0, [r4, #84]	; 0x54
 8008084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008086:	602f      	str	r7, [r5, #0]
 8008088:	2900      	cmp	r1, #0
 800808a:	d0ca      	beq.n	8008022 <__sflush_r+0x1a>
 800808c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008090:	4299      	cmp	r1, r3
 8008092:	d002      	beq.n	800809a <__sflush_r+0x92>
 8008094:	4628      	mov	r0, r5
 8008096:	f7ff faa5 	bl	80075e4 <_free_r>
 800809a:	2000      	movs	r0, #0
 800809c:	6360      	str	r0, [r4, #52]	; 0x34
 800809e:	e7c1      	b.n	8008024 <__sflush_r+0x1c>
 80080a0:	6a21      	ldr	r1, [r4, #32]
 80080a2:	2301      	movs	r3, #1
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b0      	blx	r6
 80080a8:	1c41      	adds	r1, r0, #1
 80080aa:	d1c7      	bne.n	800803c <__sflush_r+0x34>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0c4      	beq.n	800803c <__sflush_r+0x34>
 80080b2:	2b1d      	cmp	r3, #29
 80080b4:	d001      	beq.n	80080ba <__sflush_r+0xb2>
 80080b6:	2b16      	cmp	r3, #22
 80080b8:	d101      	bne.n	80080be <__sflush_r+0xb6>
 80080ba:	602f      	str	r7, [r5, #0]
 80080bc:	e7b1      	b.n	8008022 <__sflush_r+0x1a>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7ad      	b.n	8008024 <__sflush_r+0x1c>
 80080c8:	690f      	ldr	r7, [r1, #16]
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	d0a9      	beq.n	8008022 <__sflush_r+0x1a>
 80080ce:	0793      	lsls	r3, r2, #30
 80080d0:	680e      	ldr	r6, [r1, #0]
 80080d2:	bf08      	it	eq
 80080d4:	694b      	ldreq	r3, [r1, #20]
 80080d6:	600f      	str	r7, [r1, #0]
 80080d8:	bf18      	it	ne
 80080da:	2300      	movne	r3, #0
 80080dc:	eba6 0807 	sub.w	r8, r6, r7
 80080e0:	608b      	str	r3, [r1, #8]
 80080e2:	f1b8 0f00 	cmp.w	r8, #0
 80080e6:	dd9c      	ble.n	8008022 <__sflush_r+0x1a>
 80080e8:	6a21      	ldr	r1, [r4, #32]
 80080ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080ec:	4643      	mov	r3, r8
 80080ee:	463a      	mov	r2, r7
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b0      	blx	r6
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dc06      	bgt.n	8008106 <__sflush_r+0xfe>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e78e      	b.n	8008024 <__sflush_r+0x1c>
 8008106:	4407      	add	r7, r0
 8008108:	eba8 0800 	sub.w	r8, r8, r0
 800810c:	e7e9      	b.n	80080e2 <__sflush_r+0xda>
 800810e:	bf00      	nop
 8008110:	20400001 	.word	0x20400001

08008114 <_fflush_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	690b      	ldr	r3, [r1, #16]
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b913      	cbnz	r3, 8008124 <_fflush_r+0x10>
 800811e:	2500      	movs	r5, #0
 8008120:	4628      	mov	r0, r5
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	b118      	cbz	r0, 800812e <_fflush_r+0x1a>
 8008126:	6983      	ldr	r3, [r0, #24]
 8008128:	b90b      	cbnz	r3, 800812e <_fflush_r+0x1a>
 800812a:	f000 f887 	bl	800823c <__sinit>
 800812e:	4b14      	ldr	r3, [pc, #80]	; (8008180 <_fflush_r+0x6c>)
 8008130:	429c      	cmp	r4, r3
 8008132:	d11b      	bne.n	800816c <_fflush_r+0x58>
 8008134:	686c      	ldr	r4, [r5, #4]
 8008136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0ef      	beq.n	800811e <_fflush_r+0xa>
 800813e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008140:	07d0      	lsls	r0, r2, #31
 8008142:	d404      	bmi.n	800814e <_fflush_r+0x3a>
 8008144:	0599      	lsls	r1, r3, #22
 8008146:	d402      	bmi.n	800814e <_fflush_r+0x3a>
 8008148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814a:	f000 f915 	bl	8008378 <__retarget_lock_acquire_recursive>
 800814e:	4628      	mov	r0, r5
 8008150:	4621      	mov	r1, r4
 8008152:	f7ff ff59 	bl	8008008 <__sflush_r>
 8008156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008158:	07da      	lsls	r2, r3, #31
 800815a:	4605      	mov	r5, r0
 800815c:	d4e0      	bmi.n	8008120 <_fflush_r+0xc>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	d4dd      	bmi.n	8008120 <_fflush_r+0xc>
 8008164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008166:	f000 f908 	bl	800837a <__retarget_lock_release_recursive>
 800816a:	e7d9      	b.n	8008120 <_fflush_r+0xc>
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <_fflush_r+0x70>)
 800816e:	429c      	cmp	r4, r3
 8008170:	d101      	bne.n	8008176 <_fflush_r+0x62>
 8008172:	68ac      	ldr	r4, [r5, #8]
 8008174:	e7df      	b.n	8008136 <_fflush_r+0x22>
 8008176:	4b04      	ldr	r3, [pc, #16]	; (8008188 <_fflush_r+0x74>)
 8008178:	429c      	cmp	r4, r3
 800817a:	bf08      	it	eq
 800817c:	68ec      	ldreq	r4, [r5, #12]
 800817e:	e7da      	b.n	8008136 <_fflush_r+0x22>
 8008180:	08008c3c 	.word	0x08008c3c
 8008184:	08008c5c 	.word	0x08008c5c
 8008188:	08008c1c 	.word	0x08008c1c

0800818c <std>:
 800818c:	2300      	movs	r3, #0
 800818e:	b510      	push	{r4, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	e9c0 3300 	strd	r3, r3, [r0]
 8008196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800819a:	6083      	str	r3, [r0, #8]
 800819c:	8181      	strh	r1, [r0, #12]
 800819e:	6643      	str	r3, [r0, #100]	; 0x64
 80081a0:	81c2      	strh	r2, [r0, #14]
 80081a2:	6183      	str	r3, [r0, #24]
 80081a4:	4619      	mov	r1, r3
 80081a6:	2208      	movs	r2, #8
 80081a8:	305c      	adds	r0, #92	; 0x5c
 80081aa:	f7fd fb5b 	bl	8005864 <memset>
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <std+0x38>)
 80081b0:	6263      	str	r3, [r4, #36]	; 0x24
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <std+0x3c>)
 80081b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std+0x40>)
 80081b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <std+0x44>)
 80081bc:	6224      	str	r4, [r4, #32]
 80081be:	6323      	str	r3, [r4, #48]	; 0x30
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	080084e1 	.word	0x080084e1
 80081c8:	08008503 	.word	0x08008503
 80081cc:	0800853b 	.word	0x0800853b
 80081d0:	0800855f 	.word	0x0800855f

080081d4 <_cleanup_r>:
 80081d4:	4901      	ldr	r1, [pc, #4]	; (80081dc <_cleanup_r+0x8>)
 80081d6:	f000 b8af 	b.w	8008338 <_fwalk_reent>
 80081da:	bf00      	nop
 80081dc:	08008115 	.word	0x08008115

080081e0 <__sfmoreglue>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	2268      	movs	r2, #104	; 0x68
 80081e4:	1e4d      	subs	r5, r1, #1
 80081e6:	4355      	muls	r5, r2
 80081e8:	460e      	mov	r6, r1
 80081ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ee:	f7ff fa65 	bl	80076bc <_malloc_r>
 80081f2:	4604      	mov	r4, r0
 80081f4:	b140      	cbz	r0, 8008208 <__sfmoreglue+0x28>
 80081f6:	2100      	movs	r1, #0
 80081f8:	e9c0 1600 	strd	r1, r6, [r0]
 80081fc:	300c      	adds	r0, #12
 80081fe:	60a0      	str	r0, [r4, #8]
 8008200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008204:	f7fd fb2e 	bl	8005864 <memset>
 8008208:	4620      	mov	r0, r4
 800820a:	bd70      	pop	{r4, r5, r6, pc}

0800820c <__sfp_lock_acquire>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__sfp_lock_acquire+0x8>)
 800820e:	f000 b8b3 	b.w	8008378 <__retarget_lock_acquire_recursive>
 8008212:	bf00      	nop
 8008214:	2000037d 	.word	0x2000037d

08008218 <__sfp_lock_release>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__sfp_lock_release+0x8>)
 800821a:	f000 b8ae 	b.w	800837a <__retarget_lock_release_recursive>
 800821e:	bf00      	nop
 8008220:	2000037d 	.word	0x2000037d

08008224 <__sinit_lock_acquire>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__sinit_lock_acquire+0x8>)
 8008226:	f000 b8a7 	b.w	8008378 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	2000037e 	.word	0x2000037e

08008230 <__sinit_lock_release>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__sinit_lock_release+0x8>)
 8008232:	f000 b8a2 	b.w	800837a <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	2000037e 	.word	0x2000037e

0800823c <__sinit>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4604      	mov	r4, r0
 8008240:	f7ff fff0 	bl	8008224 <__sinit_lock_acquire>
 8008244:	69a3      	ldr	r3, [r4, #24]
 8008246:	b11b      	cbz	r3, 8008250 <__sinit+0x14>
 8008248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824c:	f7ff bff0 	b.w	8008230 <__sinit_lock_release>
 8008250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008254:	6523      	str	r3, [r4, #80]	; 0x50
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <__sinit+0x68>)
 8008258:	4a13      	ldr	r2, [pc, #76]	; (80082a8 <__sinit+0x6c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	62a2      	str	r2, [r4, #40]	; 0x28
 800825e:	42a3      	cmp	r3, r4
 8008260:	bf04      	itt	eq
 8008262:	2301      	moveq	r3, #1
 8008264:	61a3      	streq	r3, [r4, #24]
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f820 	bl	80082ac <__sfp>
 800826c:	6060      	str	r0, [r4, #4]
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f81c 	bl	80082ac <__sfp>
 8008274:	60a0      	str	r0, [r4, #8]
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f818 	bl	80082ac <__sfp>
 800827c:	2200      	movs	r2, #0
 800827e:	60e0      	str	r0, [r4, #12]
 8008280:	2104      	movs	r1, #4
 8008282:	6860      	ldr	r0, [r4, #4]
 8008284:	f7ff ff82 	bl	800818c <std>
 8008288:	68a0      	ldr	r0, [r4, #8]
 800828a:	2201      	movs	r2, #1
 800828c:	2109      	movs	r1, #9
 800828e:	f7ff ff7d 	bl	800818c <std>
 8008292:	68e0      	ldr	r0, [r4, #12]
 8008294:	2202      	movs	r2, #2
 8008296:	2112      	movs	r1, #18
 8008298:	f7ff ff78 	bl	800818c <std>
 800829c:	2301      	movs	r3, #1
 800829e:	61a3      	str	r3, [r4, #24]
 80082a0:	e7d2      	b.n	8008248 <__sinit+0xc>
 80082a2:	bf00      	nop
 80082a4:	080088a4 	.word	0x080088a4
 80082a8:	080081d5 	.word	0x080081d5

080082ac <__sfp>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	4607      	mov	r7, r0
 80082b0:	f7ff ffac 	bl	800820c <__sfp_lock_acquire>
 80082b4:	4b1e      	ldr	r3, [pc, #120]	; (8008330 <__sfp+0x84>)
 80082b6:	681e      	ldr	r6, [r3, #0]
 80082b8:	69b3      	ldr	r3, [r6, #24]
 80082ba:	b913      	cbnz	r3, 80082c2 <__sfp+0x16>
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff ffbd 	bl	800823c <__sinit>
 80082c2:	3648      	adds	r6, #72	; 0x48
 80082c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	d503      	bpl.n	80082d4 <__sfp+0x28>
 80082cc:	6833      	ldr	r3, [r6, #0]
 80082ce:	b30b      	cbz	r3, 8008314 <__sfp+0x68>
 80082d0:	6836      	ldr	r6, [r6, #0]
 80082d2:	e7f7      	b.n	80082c4 <__sfp+0x18>
 80082d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082d8:	b9d5      	cbnz	r5, 8008310 <__sfp+0x64>
 80082da:	4b16      	ldr	r3, [pc, #88]	; (8008334 <__sfp+0x88>)
 80082dc:	60e3      	str	r3, [r4, #12]
 80082de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082e2:	6665      	str	r5, [r4, #100]	; 0x64
 80082e4:	f000 f847 	bl	8008376 <__retarget_lock_init_recursive>
 80082e8:	f7ff ff96 	bl	8008218 <__sfp_lock_release>
 80082ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082f4:	6025      	str	r5, [r4, #0]
 80082f6:	61a5      	str	r5, [r4, #24]
 80082f8:	2208      	movs	r2, #8
 80082fa:	4629      	mov	r1, r5
 80082fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008300:	f7fd fab0 	bl	8005864 <memset>
 8008304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800830c:	4620      	mov	r0, r4
 800830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008310:	3468      	adds	r4, #104	; 0x68
 8008312:	e7d9      	b.n	80082c8 <__sfp+0x1c>
 8008314:	2104      	movs	r1, #4
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff ff62 	bl	80081e0 <__sfmoreglue>
 800831c:	4604      	mov	r4, r0
 800831e:	6030      	str	r0, [r6, #0]
 8008320:	2800      	cmp	r0, #0
 8008322:	d1d5      	bne.n	80082d0 <__sfp+0x24>
 8008324:	f7ff ff78 	bl	8008218 <__sfp_lock_release>
 8008328:	230c      	movs	r3, #12
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	e7ee      	b.n	800830c <__sfp+0x60>
 800832e:	bf00      	nop
 8008330:	080088a4 	.word	0x080088a4
 8008334:	ffff0001 	.word	0xffff0001

08008338 <_fwalk_reent>:
 8008338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800833c:	4606      	mov	r6, r0
 800833e:	4688      	mov	r8, r1
 8008340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008344:	2700      	movs	r7, #0
 8008346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800834a:	f1b9 0901 	subs.w	r9, r9, #1
 800834e:	d505      	bpl.n	800835c <_fwalk_reent+0x24>
 8008350:	6824      	ldr	r4, [r4, #0]
 8008352:	2c00      	cmp	r4, #0
 8008354:	d1f7      	bne.n	8008346 <_fwalk_reent+0xe>
 8008356:	4638      	mov	r0, r7
 8008358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835c:	89ab      	ldrh	r3, [r5, #12]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d907      	bls.n	8008372 <_fwalk_reent+0x3a>
 8008362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008366:	3301      	adds	r3, #1
 8008368:	d003      	beq.n	8008372 <_fwalk_reent+0x3a>
 800836a:	4629      	mov	r1, r5
 800836c:	4630      	mov	r0, r6
 800836e:	47c0      	blx	r8
 8008370:	4307      	orrs	r7, r0
 8008372:	3568      	adds	r5, #104	; 0x68
 8008374:	e7e9      	b.n	800834a <_fwalk_reent+0x12>

08008376 <__retarget_lock_init_recursive>:
 8008376:	4770      	bx	lr

08008378 <__retarget_lock_acquire_recursive>:
 8008378:	4770      	bx	lr

0800837a <__retarget_lock_release_recursive>:
 800837a:	4770      	bx	lr

0800837c <__swhatbuf_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	460e      	mov	r6, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	2900      	cmp	r1, #0
 8008386:	b096      	sub	sp, #88	; 0x58
 8008388:	4614      	mov	r4, r2
 800838a:	461d      	mov	r5, r3
 800838c:	da08      	bge.n	80083a0 <__swhatbuf_r+0x24>
 800838e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	061a      	lsls	r2, r3, #24
 8008398:	d410      	bmi.n	80083bc <__swhatbuf_r+0x40>
 800839a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839e:	e00e      	b.n	80083be <__swhatbuf_r+0x42>
 80083a0:	466a      	mov	r2, sp
 80083a2:	f000 f903 	bl	80085ac <_fstat_r>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	dbf1      	blt.n	800838e <__swhatbuf_r+0x12>
 80083aa:	9a01      	ldr	r2, [sp, #4]
 80083ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083b4:	425a      	negs	r2, r3
 80083b6:	415a      	adcs	r2, r3
 80083b8:	602a      	str	r2, [r5, #0]
 80083ba:	e7ee      	b.n	800839a <__swhatbuf_r+0x1e>
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	2000      	movs	r0, #0
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	b016      	add	sp, #88	; 0x58
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083c8 <__smakebuf_r>:
 80083c8:	898b      	ldrh	r3, [r1, #12]
 80083ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083cc:	079d      	lsls	r5, r3, #30
 80083ce:	4606      	mov	r6, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	d507      	bpl.n	80083e4 <__smakebuf_r+0x1c>
 80083d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	6123      	str	r3, [r4, #16]
 80083dc:	2301      	movs	r3, #1
 80083de:	6163      	str	r3, [r4, #20]
 80083e0:	b002      	add	sp, #8
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	ab01      	add	r3, sp, #4
 80083e6:	466a      	mov	r2, sp
 80083e8:	f7ff ffc8 	bl	800837c <__swhatbuf_r>
 80083ec:	9900      	ldr	r1, [sp, #0]
 80083ee:	4605      	mov	r5, r0
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff f963 	bl	80076bc <_malloc_r>
 80083f6:	b948      	cbnz	r0, 800840c <__smakebuf_r+0x44>
 80083f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fc:	059a      	lsls	r2, r3, #22
 80083fe:	d4ef      	bmi.n	80083e0 <__smakebuf_r+0x18>
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	e7e3      	b.n	80083d4 <__smakebuf_r+0xc>
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <__smakebuf_r+0x7c>)
 800840e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	6163      	str	r3, [r4, #20]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	6120      	str	r0, [r4, #16]
 8008422:	b15b      	cbz	r3, 800843c <__smakebuf_r+0x74>
 8008424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f8d1 	bl	80085d0 <_isatty_r>
 800842e:	b128      	cbz	r0, 800843c <__smakebuf_r+0x74>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	89a0      	ldrh	r0, [r4, #12]
 800843e:	4305      	orrs	r5, r0
 8008440:	81a5      	strh	r5, [r4, #12]
 8008442:	e7cd      	b.n	80083e0 <__smakebuf_r+0x18>
 8008444:	080081d5 	.word	0x080081d5

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <_raise_r>:
 8008458:	291f      	cmp	r1, #31
 800845a:	b538      	push	{r3, r4, r5, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	d904      	bls.n	800846c <_raise_r+0x14>
 8008462:	2316      	movs	r3, #22
 8008464:	6003      	str	r3, [r0, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800846e:	b112      	cbz	r2, 8008476 <_raise_r+0x1e>
 8008470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008474:	b94b      	cbnz	r3, 800848a <_raise_r+0x32>
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f830 	bl	80084dc <_getpid_r>
 800847c:	462a      	mov	r2, r5
 800847e:	4601      	mov	r1, r0
 8008480:	4620      	mov	r0, r4
 8008482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008486:	f000 b817 	b.w	80084b8 <_kill_r>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d00a      	beq.n	80084a4 <_raise_r+0x4c>
 800848e:	1c59      	adds	r1, r3, #1
 8008490:	d103      	bne.n	800849a <_raise_r+0x42>
 8008492:	2316      	movs	r3, #22
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	2001      	movs	r0, #1
 8008498:	e7e7      	b.n	800846a <_raise_r+0x12>
 800849a:	2400      	movs	r4, #0
 800849c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084a0:	4628      	mov	r0, r5
 80084a2:	4798      	blx	r3
 80084a4:	2000      	movs	r0, #0
 80084a6:	e7e0      	b.n	800846a <_raise_r+0x12>

080084a8 <raise>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <raise+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff bfd3 	b.w	8008458 <_raise_r>
 80084b2:	bf00      	nop
 80084b4:	20000010 	.word	0x20000010

080084b8 <_kill_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d07      	ldr	r5, [pc, #28]	; (80084d8 <_kill_r+0x20>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f7f9 fac3 	bl	8001a50 <_kill>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d102      	bne.n	80084d4 <_kill_r+0x1c>
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	b103      	cbz	r3, 80084d4 <_kill_r+0x1c>
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	20000378 	.word	0x20000378

080084dc <_getpid_r>:
 80084dc:	f7f9 bab0 	b.w	8001a40 <_getpid>

080084e0 <__sread>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	f000 f894 	bl	8008614 <_read_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	bfab      	itete	ge
 80084f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084f2:	89a3      	ldrhlt	r3, [r4, #12]
 80084f4:	181b      	addge	r3, r3, r0
 80084f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084fa:	bfac      	ite	ge
 80084fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084fe:	81a3      	strhlt	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__swrite>:
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	461f      	mov	r7, r3
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	05db      	lsls	r3, r3, #23
 800850c:	4605      	mov	r5, r0
 800850e:	460c      	mov	r4, r1
 8008510:	4616      	mov	r6, r2
 8008512:	d505      	bpl.n	8008520 <__swrite+0x1e>
 8008514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008518:	2302      	movs	r3, #2
 800851a:	2200      	movs	r2, #0
 800851c:	f000 f868 	bl	80085f0 <_lseek_r>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	f000 b817 	b.w	8008568 <_write_r>

0800853a <__sseek>:
 800853a:	b510      	push	{r4, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f000 f855 	bl	80085f0 <_lseek_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	bf15      	itete	ne
 800854c:	6560      	strne	r0, [r4, #84]	; 0x54
 800854e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008556:	81a3      	strheq	r3, [r4, #12]
 8008558:	bf18      	it	ne
 800855a:	81a3      	strhne	r3, [r4, #12]
 800855c:	bd10      	pop	{r4, pc}

0800855e <__sclose>:
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 b813 	b.w	800858c <_close_r>
	...

08008568 <_write_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_write_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f9 faa1 	bl	8001abe <_write>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_write_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_write_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000378 	.word	0x20000378

0800858c <_close_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d06      	ldr	r5, [pc, #24]	; (80085a8 <_close_r+0x1c>)
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	602b      	str	r3, [r5, #0]
 8008598:	f7f9 faad 	bl	8001af6 <_close>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_close_r+0x1a>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_close_r+0x1a>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	20000378 	.word	0x20000378

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	; (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7f9 faa8 	bl	8001b0e <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20000378 	.word	0x20000378

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 faa7 	bl	8001b2e <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000378 	.word	0x20000378

080085f0 <_lseek_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	; (8008610 <_lseek_r+0x20>)
 80085f4:	4604      	mov	r4, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	602a      	str	r2, [r5, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f9 faa0 	bl	8001b44 <_lseek>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_lseek_r+0x1e>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_lseek_r+0x1e>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20000378 	.word	0x20000378

08008614 <_read_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d07      	ldr	r5, [pc, #28]	; (8008634 <_read_r+0x20>)
 8008618:	4604      	mov	r4, r0
 800861a:	4608      	mov	r0, r1
 800861c:	4611      	mov	r1, r2
 800861e:	2200      	movs	r2, #0
 8008620:	602a      	str	r2, [r5, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	f7f9 fa2e 	bl	8001a84 <_read>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_read_r+0x1e>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_read_r+0x1e>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	20000378 	.word	0x20000378

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
