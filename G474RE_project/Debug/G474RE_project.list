
G474RE_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  080092c8  080092c8  000192c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d4  080097d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097dc  080097dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080097e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001e0  080099c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080099c4  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d0e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  00037f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291cf  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a1  00000000  00000000  000662af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113947  00000000  00000000  0007cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b10  00000000  00000000  001905e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092b0 	.word	0x080092b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080092b0 	.word	0x080092b0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bool selectedled= true; //true led1, false led2
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fed5 	bl	8001d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f92c 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fb40 	bl	8001638 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fb8:	f000 f974 	bl	80012a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 faf0 	bl	80015a0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000fc0:	f000 f9e8 	bl	8001394 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000fc4:	f000 fa4c 	bl	8001460 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc8:	f000 fa9a 	bl	8001500 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000fcc:	4880      	ldr	r0, [pc, #512]	; (80011d0 <main+0x230>)
 8000fce:	f003 fe69 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <main+0x3c>
    {
      /* Starting Error */
      Error_Handler();
 8000fd8:	f000 fc10 	bl	80017fc <Error_Handler>
    }
  if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8000fdc:	487d      	ldr	r0, [pc, #500]	; (80011d4 <main+0x234>)
 8000fde:	f003 fe61 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <main+0x4c>
    {
      /* Starting Error */
      Error_Handler();
 8000fe8:	f000 fc08 	bl	80017fc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch (state){
 8000fec:	4b7a      	ldr	r3, [pc, #488]	; (80011d8 <main+0x238>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b57      	cmp	r3, #87	; 0x57
 8000ff2:	d007      	beq.n	8001004 <main+0x64>
 8000ff4:	2b57      	cmp	r3, #87	; 0x57
 8000ff6:	dcf9      	bgt.n	8000fec <main+0x4c>
 8000ff8:	2b44      	cmp	r3, #68	; 0x44
 8000ffa:	f000 80bc 	beq.w	8001176 <main+0x1d6>
 8000ffe:	2b52      	cmp	r3, #82	; 0x52
 8001000:	d008      	beq.n	8001014 <main+0x74>
 8001002:	e7f3      	b.n	8000fec <main+0x4c>
	 case 'W': //WAITING STATE
		 ;
		 printinserial("Board in waiting state - please press the emergency button\r\n\n");
 8001004:	4875      	ldr	r0, [pc, #468]	; (80011dc <main+0x23c>)
 8001006:	f000 fbe3 	bl	80017d0 <printinserial>
		 HAL_Delay(500);
 800100a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100e:	f000 ff15 	bl	8001e3c <HAL_Delay>
		 break;
 8001012:	e0ce      	b.n	80011b2 <main+0x212>

	 case 'R': //RUNNING STATE
		 switch(sensortoread){
 8001014:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <main+0x240>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b53      	cmp	r3, #83	; 0x53
 800101a:	d002      	beq.n	8001022 <main+0x82>
 800101c:	2b56      	cmp	r3, #86	; 0x56
 800101e:	d046      	beq.n	80010ae <main+0x10e>
 8001020:	e0a5      	b.n	800116e <main+0x1ce>
		 case 'S':	 	//SENSOR
			 // Read analog value of sensor
			 HAL_ADC_Start(&hadc1);
 8001022:	4870      	ldr	r0, [pc, #448]	; (80011e4 <main+0x244>)
 8001024:	f001 fb1e 	bl	8002664 <HAL_ADC_Start>
			 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	486d      	ldr	r0, [pc, #436]	; (80011e4 <main+0x244>)
 800102e:	f001 fbfd 	bl	800282c <HAL_ADC_PollForConversion>
			 float valueadc = HAL_ADC_GetValue(&hadc1) * (3.3/4096) ; //Convert adc(0, 4096) to volt(0, 3.3)
 8001032:	486c      	ldr	r0, [pc, #432]	; (80011e4 <main+0x244>)
 8001034:	f001 fd00 	bl	8002a38 <HAL_ADC_GetValue>
 8001038:	4603      	mov	r3, r0
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa8a 	bl	8000554 <__aeabi_ui2d>
 8001040:	a35d      	add	r3, pc, #372	; (adr r3, 80011b8 <main+0x218>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff faff 	bl	8000648 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fdd1 	bl	8000bf8 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34

			 //Print of analog value
			 char msg[50];
			 sprintf(msg, "Analog Value: %.2f V\r\n", valueadc);
 800105a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800105c:	f7ff fa9c 	bl	8000598 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4638      	mov	r0, r7
 8001066:	4960      	ldr	r1, [pc, #384]	; (80011e8 <main+0x248>)
 8001068:	f005 fea8 	bl	8006dbc <siprintf>
			 printinserial(msg);
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fbae 	bl	80017d0 <printinserial>


			 //Read digital value of sensor
			 GPIO_PinState statedig;
			 statedig = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f002 fd4c 	bl	8003b18 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			 bool valuedig = (statedig == GPIO_PIN_SET);
 8001086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108a:	2b01      	cmp	r3, #1
 800108c:	bf0c      	ite	eq
 800108e:	2301      	moveq	r3, #1
 8001090:	2300      	movne	r3, #0
 8001092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			 //Print of digital value
			 sprintf(msg, "Digital value: %d\r\n\n", valuedig);
 8001096:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800109a:	463b      	mov	r3, r7
 800109c:	4953      	ldr	r1, [pc, #332]	; (80011ec <main+0x24c>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fe8c 	bl	8006dbc <siprintf>
			 printinserial(msg);
 80010a4:	463b      	mov	r3, r7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fb92 	bl	80017d0 <printinserial>

			 break;
 80010ac:	e05f      	b.n	800116e <main+0x1ce>
		 case 'V':
			 //Read the input voltage
			 HAL_ADC_Start(&hadc2);
 80010ae:	4850      	ldr	r0, [pc, #320]	; (80011f0 <main+0x250>)
 80010b0:	f001 fad8 	bl	8002664 <HAL_ADC_Start>
			 HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	484d      	ldr	r0, [pc, #308]	; (80011f0 <main+0x250>)
 80010ba:	f001 fbb7 	bl	800282c <HAL_ADC_PollForConversion>
			 float value = HAL_ADC_GetValue(&hadc2) * (3.3/4096); //Convert adc(0, 4096) to volt(0, 3.3)
 80010be:	484c      	ldr	r0, [pc, #304]	; (80011f0 <main+0x250>)
 80010c0:	f001 fcba 	bl	8002a38 <HAL_ADC_GetValue>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa44 	bl	8000554 <__aeabi_ui2d>
 80010cc:	a33a      	add	r3, pc, #232	; (adr r3, 80011b8 <main+0x218>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fab9 	bl	8000648 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd8b 	bl	8000bf8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38

			 //Print of analog value
			 sprintf(msg, "Voltage: %.2f V\r\n", value);
 80010e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4638      	mov	r0, r7
 80010f2:	4940      	ldr	r1, [pc, #256]	; (80011f4 <main+0x254>)
 80010f4:	f005 fe62 	bl	8006dbc <siprintf>
			 printinserial(msg);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fb68 	bl	80017d0 <printinserial>

			 //Check the value of led
			 if(value>2.7){
 8001100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001102:	f7ff fa49 	bl	8000598 <__aeabi_f2d>
 8001106:	a32e      	add	r3, pc, #184	; (adr r3, 80011c0 <main+0x220>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fd2c 	bl	8000b68 <__aeabi_dcmpgt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <main+0x184>
			 	//Danger state led 1
			 	selectedled=true;
 8001116:	2301      	movs	r3, #1
 8001118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			 	state='D';
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <main+0x238>)
 800111e:	2244      	movs	r2, #68	; 0x44
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e009      	b.n	8001138 <main+0x198>
			 }else{
			 	//Reset of led 1
			 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f002 fd0b 	bl	8003b48 <HAL_GPIO_WritePin>

			 	//Print info of led 1
			 	printinserial("led 1 off\r\n");
 8001132:	4831      	ldr	r0, [pc, #196]	; (80011f8 <main+0x258>)
 8001134:	f000 fb4c 	bl	80017d0 <printinserial>
			 }if(value<1.8){
 8001138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800113a:	f7ff fa2d 	bl	8000598 <__aeabi_f2d>
 800113e:	a322      	add	r3, pc, #136	; (adr r3, 80011c8 <main+0x228>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fcf2 	bl	8000b2c <__aeabi_dcmplt>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <main+0x1bc>
			 	//Danger state led 2
			 	selectedled=false;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			 	state='D';
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <main+0x238>)
 8001156:	2244      	movs	r2, #68	; 0x44
 8001158:	701a      	strb	r2, [r3, #0]
			 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

			 	//Print info of led 2
			 	printinserial("led 2 off\r\n");
			 }
			 break;
 800115a:	e007      	b.n	800116c <main+0x1cc>
			 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2120      	movs	r1, #32
 8001160:	4826      	ldr	r0, [pc, #152]	; (80011fc <main+0x25c>)
 8001162:	f002 fcf1 	bl	8003b48 <HAL_GPIO_WritePin>
			 	printinserial("led 2 off\r\n");
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <main+0x260>)
 8001168:	f000 fb32 	bl	80017d0 <printinserial>
			 break;
 800116c:	bf00      	nop
		 }
		 //Reset
		 sensortoread='N';
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <main+0x240>)
 8001170:	224e      	movs	r2, #78	; 0x4e
 8001172:	701a      	strb	r2, [r3, #0]
		 break;
 8001174:	e01d      	b.n	80011b2 <main+0x212>

	 case 'D': //DANGER STATE
		 if(selectedled){
 8001176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <main+0x1f4>
			 //Set of led 1
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f002 fcde 	bl	8003b48 <HAL_GPIO_WritePin>

			 //Print state
			 printinserial("Danger state sovratensione, led 1 acceso\r\n\n");
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <main+0x264>)
 800118e:	f000 fb1f 	bl	80017d0 <printinserial>
 8001192:	e007      	b.n	80011a4 <main+0x204>
		 }
		 else{
			 //Set of led 2
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2120      	movs	r1, #32
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <main+0x25c>)
 800119a:	f002 fcd5 	bl	8003b48 <HAL_GPIO_WritePin>

			 //Print state
			 printinserial("Danger state sottotensione, led 2 acceso\r\n\n");
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <main+0x268>)
 80011a0:	f000 fb16 	bl	80017d0 <printinserial>
		}
		 //Reset
		 selectedled=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		 state='R';
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <main+0x238>)
 80011ac:	2252      	movs	r2, #82	; 0x52
 80011ae:	701a      	strb	r2, [r3, #0]
		break;
 80011b0:	bf00      	nop
	 switch (state){
 80011b2:	e71b      	b.n	8000fec <main+0x4c>
 80011b4:	f3af 8000 	nop.w
 80011b8:	66666666 	.word	0x66666666
 80011bc:	3f4a6666 	.word	0x3f4a6666
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	40059999 	.word	0x40059999
 80011c8:	cccccccd 	.word	0xcccccccd
 80011cc:	3ffccccc 	.word	0x3ffccccc
 80011d0:	200002d4 	.word	0x200002d4
 80011d4:	20000320 	.word	0x20000320
 80011d8:	20000000 	.word	0x20000000
 80011dc:	080092c8 	.word	0x080092c8
 80011e0:	20000001 	.word	0x20000001
 80011e4:	200001fc 	.word	0x200001fc
 80011e8:	08009308 	.word	0x08009308
 80011ec:	08009320 	.word	0x08009320
 80011f0:	20000268 	.word	0x20000268
 80011f4:	08009338 	.word	0x08009338
 80011f8:	0800934c 	.word	0x0800934c
 80011fc:	48000400 	.word	0x48000400
 8001200:	08009358 	.word	0x08009358
 8001204:	08009364 	.word	0x08009364
 8001208:	08009390 	.word	0x08009390

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2238      	movs	r2, #56	; 0x38
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 f95c 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001232:	f002 fcb9 	bl	8003ba8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800124c:	2301      	movs	r3, #1
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001250:	230a      	movs	r3, #10
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fd43 	bl	8003cf0 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001270:	f000 fac4 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2303      	movs	r3, #3
 800127a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2102      	movs	r1, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f003 f847 	bl	8004320 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001298:	f000 fab0 	bl	80017fc <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	; 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 f90b 	bl	80064d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <MX_ADC1_Init+0xe8>)
 80012c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_ADC1_Init+0xe8>)
 80012cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <MX_ADC1_Init+0xe8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_ADC1_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MX_ADC1_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_ADC1_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_ADC1_Init+0xe8>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_ADC1_Init+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_ADC1_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <MX_ADC1_Init+0xe8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_ADC1_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_ADC1_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_ADC1_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <MX_ADC1_Init+0xe8>)
 800132e:	f000 ffd7 	bl	80022e0 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001338:	f000 fa60 	bl	80017fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	; (800138c <MX_ADC1_Init+0xe8>)
 8001348:	f002 f84c 	bl	80033e4 <HAL_ADCEx_MultiModeConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001352:	f000 fa53 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_ADC1_Init+0xec>)
 8001358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800135a:	2306      	movs	r3, #6
 800135c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001362:	237f      	movs	r3, #127	; 0x7f
 8001364:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001366:	2304      	movs	r3, #4
 8001368:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_ADC1_Init+0xe8>)
 8001374:	f001 fb6e 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800137e:	f000 fa3d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001fc 	.word	0x200001fc
 8001390:	04300002 	.word	0x04300002

08001394 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 f899 	bl	80064d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <MX_ADC2_Init+0xc4>)
 80013aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_ADC2_Init+0xc0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC2_Init+0xc0>)
 8001402:	2200      	movs	r2, #0
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_ADC2_Init+0xc0>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_ADC2_Init+0xc0>)
 8001410:	f000 ff66 	bl	80022e0 <HAL_ADC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800141a:	f000 f9ef 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_ADC2_Init+0xc8>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001422:	2306      	movs	r3, #6
 8001424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142a:	237f      	movs	r3, #127	; 0x7f
 800142c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142e:	2304      	movs	r3, #4
 8001430:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC2_Init+0xc0>)
 800143c:	f001 fb0a 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001446:	f000 f9d9 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000268 	.word	0x20000268
 8001458:	50000100 	.word	0x50000100
 800145c:	08600004 	.word	0x08600004

08001460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_TIM3_Init+0x98>)
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <MX_TIM3_Init+0x9c>)
 8001482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1450-1;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_TIM3_Init+0x98>)
 8001486:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800148a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM3_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_TIM3_Init+0x98>)
 8001494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001498:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_TIM3_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_TIM3_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_TIM3_Init+0x98>)
 80014a8:	f003 fba4 	bl	8004bf4 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014b2:	f000 f9a3 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_TIM3_Init+0x98>)
 80014c4:	f003 fde6 	bl	8005094 <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014ce:	f000 f995 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_TIM3_Init+0x98>)
 80014e0:	f004 f85a 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014ea:	f000 f987 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002d4 	.word	0x200002d4
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM4_Init+0x98>)
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <MX_TIM4_Init+0x9c>)
 8001522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2500-1;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM4_Init+0x98>)
 8001526:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800152a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM4_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM4_Init+0x98>)
 8001534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001538:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_TIM4_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM4_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_TIM4_Init+0x98>)
 8001548:	f003 fb54 	bl	8004bf4 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001552:	f000 f953 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM4_Init+0x98>)
 8001564:	f003 fd96 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800156e:	f000 f945 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM4_Init+0x98>)
 8001580:	f004 f80a 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800158a:	f000 f937 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000320 	.word	0x20000320
 800159c:	40000800 	.word	0x40000800

080015a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015a6:	4a23      	ldr	r2, [pc, #140]	; (8001634 <MX_USART2_UART_Init+0x94>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015ea:	f004 f8b1 	bl	8005750 <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 f902 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_USART2_UART_Init+0x90>)
 80015fc:	f004 fe78 	bl	80062f0 <HAL_UARTEx_SetTxFifoThreshold>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001606:	f000 f8f9 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x90>)
 800160e:	f004 fead 	bl	800636c <HAL_UARTEx_SetRxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 f8f0 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_USART2_UART_Init+0x90>)
 800161e:	f004 fe2e 	bl	800627e <HAL_UARTEx_DisableFifoMode>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001628:	f000 f8e8 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000036c 	.word	0x2000036c
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a40      	ldr	r2, [pc, #256]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <MX_GPIO_Init+0x11c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <MX_GPIO_Init+0x11c>)
 800166c:	f043 0320 	orr.w	r3, r3, #32
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <MX_GPIO_Init+0x11c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <MX_GPIO_Init+0x11c>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_GPIO_Init+0x11c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f002 fa46 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <MX_GPIO_Init+0x120>)
 80016c2:	f002 fa41 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <MX_GPIO_Init+0x124>)
 80016de:	f002 f899 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f002 f88b 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f002 f87b 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171e:	2320      	movs	r3, #32
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <MX_GPIO_Init+0x120>)
 8001736:	f002 f86d 	bl	8003814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2028      	movs	r0, #40	; 0x28
 8001740:	f002 f833 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001744:	2028      	movs	r0, #40	; 0x28
 8001746:	f002 f84a 	bl	80037de <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800

08001760 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) //Timer3 200ms
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d103      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x18>
		sensortoread='S';
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001772:	2253      	movs	r2, #83	; 0x53
 8001774:	701a      	strb	r2, [r3, #0]
	else if(htim == &htim4) //Timer4 350ms
		sensortoread='V';
}
 8001776:	e006      	b.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim == &htim4) //Timer4 350ms
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d102      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x26>
		sensortoread='V';
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001782:	2256      	movs	r2, #86	; 0x56
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200002d4 	.word	0x200002d4
 8001798:	20000001 	.word	0x20000001
 800179c:	20000320 	.word	0x20000320

080017a0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
	if(state!='W')state='W';
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b57      	cmp	r3, #87	; 0x57
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_EXTI_Callback+0x1a>
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2c>)
 80017b4:	2257      	movs	r2, #87	; 0x57
 80017b6:	701a      	strb	r2, [r3, #0]
	else state='R';
}
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_EXTI_Callback+0x20>
	else state='R';
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2c>)
 80017bc:	2252      	movs	r2, #82	; 0x52
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000000 	.word	0x20000000

080017d0 <printinserial>:

void printinserial(char msg[]){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe fd21 	bl	8000220 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4803      	ldr	r0, [pc, #12]	; (80017f8 <printinserial+0x28>)
 80017ea:	f004 f801 	bl	80057f0 <HAL_UART_Transmit>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000036c 	.word	0x2000036c

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x44>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	; 0x60
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x44>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0a0      	sub	sp, #128	; 0x80
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	2254      	movs	r2, #84	; 0x54
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fe31 	bl	80064d8 <memset>
  if(hadc->Instance==ADC1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187e:	d13e      	bne.n	80018fe <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001884:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001886:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800188a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	4618      	mov	r0, r3
 8001892:	f002 ff61 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800189c:	f7ff ffae 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018a0:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_ADC_MspInit+0x13c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a39      	ldr	r2, [pc, #228]	; (800198c <HAL_ADC_MspInit+0x13c>)
 80018a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_ADC_MspInit+0x13c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10b      	bne.n	80018ca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a36      	ldr	r2, [pc, #216]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e2:	2301      	movs	r3, #1
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f001 ff8c 	bl	8003814 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018fc:	e042      	b.n	8001984 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a24      	ldr	r2, [pc, #144]	; (8001994 <HAL_ADC_MspInit+0x144>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d13d      	bne.n	8001984 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800190e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001912:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	4618      	mov	r0, r3
 800191a:	f002 ff1d 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001924:	f7ff ff6a 	bl	80017fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_ADC_MspInit+0x13c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d10b      	bne.n	8001952 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_ADC_MspInit+0x140>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <HAL_ADC_MspInit+0x140>)
 8001940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_ADC_MspInit+0x140>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_ADC_MspInit+0x140>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_ADC_MspInit+0x140>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_ADC_MspInit+0x140>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800196a:	2302      	movs	r3, #2
 800196c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f001 ff48 	bl	8003814 <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	3780      	adds	r7, #128	; 0x80
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200003fc 	.word	0x200003fc
 8001990:	40021000 	.word	0x40021000
 8001994:	50000100 	.word	0x50000100

08001998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d114      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201d      	movs	r0, #29
 80019c8:	f001 feef 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019cc:	201d      	movs	r0, #29
 80019ce:	f001 ff06 	bl	80037de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d2:	e018      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_TIM_Base_MspInit+0x80>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	201e      	movs	r0, #30
 80019fc:	f001 fed5 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a00:	201e      	movs	r0, #30
 8001a02:	f001 feec 	bl	80037de <HAL_NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40000800 	.word	0x40000800

08001a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09e      	sub	sp, #120	; 0x78
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2254      	movs	r2, #84	; 0x54
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fd4b 	bl	80064d8 <memset>
  if(huart->Instance==USART2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_UART_MspInit+0xa8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d136      	bne.n	8001aba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fe7d 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a64:	f7ff feca 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_UART_MspInit+0xac>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f001 fead 	bl	8003814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3778      	adds	r7, #120	; 0x78
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40021000 	.word	0x40021000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f972 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <TIM3_IRQHandler+0x10>)
 8001b26:	f003 f935 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200002d4 	.word	0x200002d4

08001b34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM4_IRQHandler+0x10>)
 8001b3a:	f003 f92b 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000320 	.word	0x20000320

08001b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b50:	f002 f812 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b72:	f004 fc87 	bl	8006484 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
	}

return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
	}
	return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f004 fbec 	bl	8006484 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000400 	.word	0x20000400
 8001ce0:	20000418 	.word	0x20000418

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d32:	f7ff ffd7 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f004 fbab 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff f931 	bl	8000fa0 <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   r0, =_estack
 8001d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d4c:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8001d50:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d54:	20000418 	.word	0x20000418

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f001 fd15 	bl	8003794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fd44 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]

}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_InitTick+0x68>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_InitTick+0x6c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_InitTick+0x68>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fd20 	bl	80037fa <HAL_SYSTICK_Config>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	d809      	bhi.n	8001dda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	f001 fcec 	bl	80037aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_InitTick+0x70>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e004      	b.n	8001dea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	20000008 	.word	0x20000008

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x20>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000404 	.word	0x20000404
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000404 	.word	0x20000404

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d004      	beq.n	8001e60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_Delay+0x40>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e60:	bf00      	nop
 8001e62:	f7ff ffdf 	bl	8001e24 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d8f7      	bhi.n	8001e62 <HAL_Delay+0x26>
  {
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000000c 	.word	0x2000000c

08001e80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3360      	adds	r3, #96	; 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <LL_ADC_SetOffset+0x44>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	03fff000 	.word	0x03fff000

08001f30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3360      	adds	r3, #96	; 0x60
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3360      	adds	r3, #96	; 0x60
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3360      	adds	r3, #96	; 0x60
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3360      	adds	r3, #96	; 0x60
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	615a      	str	r2, [r3, #20]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3330      	adds	r3, #48	; 0x30
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	211f      	movs	r1, #31
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	f003 011f 	and.w	r1, r3, #31
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	431a      	orrs	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b087      	sub	sp, #28
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3314      	adds	r3, #20
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0e5b      	lsrs	r3, r3, #25
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0d1b      	lsrs	r3, r3, #20
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2107      	movs	r1, #7
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0d1b      	lsrs	r3, r3, #20
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	431a      	orrs	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d10a      	bne.n	8002122 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002120:	e00a      	b.n	8002138 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	407f0000 	.word	0x407f0000

08002148 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 031f 	and.w	r3, r3, #31
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6093      	str	r3, [r2, #8]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b8:	d101      	bne.n	80021be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002208:	d101      	bne.n	800220e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800222c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <LL_ADC_IsEnabled+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_ADC_IsEnabled+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800227a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d101      	bne.n	80022aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1af      	b.n	800265a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff faa1 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff3f 	bl	80021a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff25 	bl	8002180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff5a 	bl	80021f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d115      	bne.n	8002372 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff3e 	bl	80021cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002350:	4b9f      	ldr	r3, [pc, #636]	; (80025d0 <HAL_ADC_Init+0x2f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	4a9f      	ldr	r2, [pc, #636]	; (80025d4 <HAL_ADC_Init+0x2f4>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002364:	e002      	b.n	800236c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff3c 	bl	80021f4 <LL_ADC_IsInternalRegulatorEnabled>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff75 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8148 	bne.w	8002648 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8144 	bne.w	8002648 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023c8:	f043 0202 	orr.w	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff35 	bl	8002244 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d141      	bne.n	8002464 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_Init+0x114>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7a      	ldr	r2, [pc, #488]	; (80025d8 <HAL_ADC_Init+0x2f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10f      	bne.n	8002414 <HAL_ADC_Init+0x134>
 80023f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023f8:	f7ff ff24 	bl	8002244 <LL_ADC_IsEnabled>
 80023fc:	4604      	mov	r4, r0
 80023fe:	4876      	ldr	r0, [pc, #472]	; (80025d8 <HAL_ADC_Init+0x2f8>)
 8002400:	f7ff ff20 	bl	8002244 <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	4323      	orrs	r3, r4
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e012      	b.n	800243a <HAL_ADC_Init+0x15a>
 8002414:	4871      	ldr	r0, [pc, #452]	; (80025dc <HAL_ADC_Init+0x2fc>)
 8002416:	f7ff ff15 	bl	8002244 <LL_ADC_IsEnabled>
 800241a:	4604      	mov	r4, r0
 800241c:	4870      	ldr	r0, [pc, #448]	; (80025e0 <HAL_ADC_Init+0x300>)
 800241e:	f7ff ff11 	bl	8002244 <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	431c      	orrs	r4, r3
 8002426:	486f      	ldr	r0, [pc, #444]	; (80025e4 <HAL_ADC_Init+0x304>)
 8002428:	f7ff ff0c 	bl	8002244 <LL_ADC_IsEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	4323      	orrs	r3, r4
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Init+0x172>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a62      	ldr	r2, [pc, #392]	; (80025d8 <HAL_ADC_Init+0x2f8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Init+0x176>
 8002452:	4a65      	ldr	r2, [pc, #404]	; (80025e8 <HAL_ADC_Init+0x308>)
 8002454:	e000      	b.n	8002458 <HAL_ADC_Init+0x178>
 8002456:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_ADC_Init+0x30c>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7ff fd0e 	bl	8001e80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7f5b      	ldrb	r3, [r3, #29]
 8002468:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002474:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800247a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002482:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	2b01      	cmp	r3, #1
 8002490:	d106      	bne.n	80024a0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	045b      	lsls	r3, r3, #17
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_ADC_Init+0x310>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	69b9      	ldr	r1, [r7, #24]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fed1 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fede 	bl	80022b8 <LL_ADC_INJ_IsConversionOngoing>
 80024fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d17f      	bne.n	8002604 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d17c      	bne.n	8002604 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800250e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002516:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002526:	f023 0302 	bic.w	r3, r3, #2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	430b      	orrs	r3, r1
 8002532:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d017      	beq.n	800256c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800254a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002554:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6911      	ldr	r1, [r2, #16]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800256a:	e013      	b.n	8002594 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800257a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800258c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002590:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12a      	bne.n	80025f4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025c0:	430a      	orrs	r2, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e019      	b.n	8002604 <HAL_ADC_Init+0x324>
 80025d0:	20000004 	.word	0x20000004
 80025d4:	053e2d63 	.word	0x053e2d63
 80025d8:	50000100 	.word	0x50000100
 80025dc:	50000400 	.word	0x50000400
 80025e0:	50000500 	.word	0x50000500
 80025e4:	50000600 	.word	0x50000600
 80025e8:	50000300 	.word	0x50000300
 80025ec:	50000700 	.word	0x50000700
 80025f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10c      	bne.n	8002626 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f023 010f 	bic.w	r1, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	1e5a      	subs	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
 8002624:	e007      	b.n	8002636 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 020f 	bic.w	r2, r2, #15
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c
 8002646:	e007      	b.n	8002658 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	f043 0210 	orr.w	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002658:	7ffb      	ldrb	r3, [r7, #31]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop

08002664 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002674:	d004      	beq.n	8002680 <HAL_ADC_Start+0x1c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a67      	ldr	r2, [pc, #412]	; (8002818 <HAL_ADC_Start+0x1b4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_ADC_Start+0x20>
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_ADC_Start+0x1b8>)
 8002682:	e000      	b.n	8002686 <HAL_ADC_Start+0x22>
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_ADC_Start+0x1bc>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fd5e 	bl	8002148 <LL_ADC_GetMultimode>
 800268c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fdfd 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80b4 	bne.w	8002808 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Start+0x4a>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0af      	b.n	800280e <HAL_ADC_Start+0x1aa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fe0c 	bl	80032d4 <ADC_Enable>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 809b 	bne.w	80027fe <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_ADC_Start+0x1b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_ADC_Start+0x96>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <HAL_ADC_Start+0x1c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d002      	beq.n	80026f6 <HAL_ADC_Start+0x92>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	e003      	b.n	80026fe <HAL_ADC_Start+0x9a>
 80026f6:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_ADC_Start+0x1c4>)
 80026f8:	e001      	b.n	80026fe <HAL_ADC_Start+0x9a>
 80026fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	4293      	cmp	r3, r2
 8002704:	d002      	beq.n	800270c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002724:	d106      	bne.n	8002734 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272a:	f023 0206 	bic.w	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	661a      	str	r2, [r3, #96]	; 0x60
 8002732:	e002      	b.n	800273a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	221c      	movs	r2, #28
 8002740:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a32      	ldr	r2, [pc, #200]	; (8002818 <HAL_ADC_Start+0x1b4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_ADC_Start+0x104>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a32      	ldr	r2, [pc, #200]	; (8002824 <HAL_ADC_Start+0x1c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d002      	beq.n	8002764 <HAL_ADC_Start+0x100>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e003      	b.n	800276c <HAL_ADC_Start+0x108>
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_ADC_Start+0x1c4>)
 8002766:	e001      	b.n	800276c <HAL_ADC_Start+0x108>
 8002768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d008      	beq.n	8002786 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b05      	cmp	r3, #5
 800277e:	d002      	beq.n	8002786 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b09      	cmp	r3, #9
 8002784:	d114      	bne.n	80027b0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800279c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fd5e 	bl	800226a <LL_ADC_REG_StartConversion>
 80027ae:	e02d      	b.n	800280c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a15      	ldr	r2, [pc, #84]	; (8002818 <HAL_ADC_Start+0x1b4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_ADC_Start+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <HAL_ADC_Start+0x1c0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d002      	beq.n	80027d6 <HAL_ADC_Start+0x172>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	e003      	b.n	80027de <HAL_ADC_Start+0x17a>
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_ADC_Start+0x1c4>)
 80027d8:	e001      	b.n	80027de <HAL_ADC_Start+0x17a>
 80027da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027de:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00f      	beq.n	800280c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80027fc:	e006      	b.n	800280c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002806:	e001      	b.n	800280c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	50000100 	.word	0x50000100
 800281c:	50000300 	.word	0x50000300
 8002820:	50000700 	.word	0x50000700
 8002824:	50000500 	.word	0x50000500
 8002828:	50000400 	.word	0x50000400

0800282c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283e:	d004      	beq.n	800284a <HAL_ADC_PollForConversion+0x1e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_ADC_PollForConversion+0x1f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_ADC_PollForConversion+0x22>
 800284a:	4b77      	ldr	r3, [pc, #476]	; (8002a28 <HAL_ADC_PollForConversion+0x1fc>)
 800284c:	e000      	b.n	8002850 <HAL_ADC_PollForConversion+0x24>
 800284e:	4b77      	ldr	r3, [pc, #476]	; (8002a2c <HAL_ADC_PollForConversion+0x200>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc79 	bl	8002148 <LL_ADC_GetMultimode>
 8002856:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d102      	bne.n	8002866 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002860:	2308      	movs	r3, #8
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e037      	b.n	80028d6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d002      	beq.n	8002878 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d111      	bne.n	800289c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0c1      	b.n	8002a1a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002896:	2304      	movs	r3, #4
 8002898:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800289a:	e01c      	b.n	80028d6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_PollForConversion+0x84>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5e      	ldr	r2, [pc, #376]	; (8002a24 <HAL_ADC_PollForConversion+0x1f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x88>
 80028b0:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_ADC_PollForConversion+0x1fc>)
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_PollForConversion+0x8a>
 80028b4:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_ADC_PollForConversion+0x200>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc54 	bl	8002164 <LL_ADC_GetMultiDMATransfer>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0a3      	b.n	8002a1a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028d2:	2304      	movs	r3, #4
 80028d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028d6:	f7ff faa5 	bl	8001e24 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028dc:	e021      	b.n	8002922 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d01d      	beq.n	8002922 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028e6:	f7ff fa9d 	bl	8001e24 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <HAL_ADC_PollForConversion+0xd0>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d112      	bne.n	8002922 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e07b      	b.n	8002a1a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0d6      	beq.n	80028de <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fb6f 	bl	8002024 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7f5b      	ldrb	r3, [r3, #29]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d111      	bne.n	8002986 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_ADC_PollForConversion+0x1f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x178>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <HAL_ADC_PollForConversion+0x204>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d002      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x174>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e003      	b.n	80029a8 <HAL_ADC_PollForConversion+0x17c>
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_ADC_PollForConversion+0x208>)
 80029a2:	e001      	b.n	80029a8 <HAL_ADC_PollForConversion+0x17c>
 80029a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d008      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d002      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b09      	cmp	r3, #9
 80029c0:	d104      	bne.n	80029cc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e014      	b.n	80029f6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_ADC_PollForConversion+0x1f8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_ADC_PollForConversion+0x1be>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_ADC_PollForConversion+0x204>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x1ba>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e003      	b.n	80029ee <HAL_ADC_PollForConversion+0x1c2>
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_ADC_PollForConversion+0x208>)
 80029e8:	e001      	b.n	80029ee <HAL_ADC_PollForConversion+0x1c2>
 80029ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d104      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2208      	movs	r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e008      	b.n	8002a18 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	220c      	movs	r2, #12
 8002a16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	50000100 	.word	0x50000100
 8002a28:	50000300 	.word	0x50000300
 8002a2c:	50000700 	.word	0x50000700
 8002a30:	50000500 	.word	0x50000500
 8002a34:	50000400 	.word	0x50000400

08002a38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0b6      	sub	sp, #216	; 0xd8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x24>
 8002a72:	2302      	movs	r3, #2
 8002a74:	f000 bc13 	b.w	800329e <HAL_ADC_ConfigChannel+0x84a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fc04 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 83f3 	bne.w	8003278 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7ff fad3 	bl	800204a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fbf2 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002aae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fbfe 	bl	80022b8 <LL_ADC_INJ_IsConversionOngoing>
 8002abc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 81d9 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 81d4 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002adc:	d10f      	bne.n	8002afe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7ff fada 	bl	80020a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fa81 	bl	8001ffe <LL_ADC_SetSamplingTimeCommonConfig>
 8002afc:	e00e      	b.n	8002b1c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff fac9 	bl	80020a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fa71 	bl	8001ffe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	08db      	lsrs	r3, r3, #3
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d022      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b4e:	f7ff f9cb 	bl	8001ee8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7ff fa17 	bl	8001f92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6919      	ldr	r1, [r3, #16]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	7f1b      	ldrb	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x126>
 8002b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x128>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f7ff fa23 	bl	8001fc8 <LL_ADC_SetOffsetSaturation>
 8002b82:	e17b      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f9d0 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x15c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f9c5 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	e01e      	b.n	8002bee <HAL_ADC_ConfigChannel+0x19a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f9ba 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e004      	b.n	8002bec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1b2>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	e018      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x1e4>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f989 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f96d 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x222>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f962 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	e01e      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x260>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f957 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e004      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x278>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	e018      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x2aa>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e004      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f926 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f90a 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x2e8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f8ff 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	e01e      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x326>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f8f4 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e004      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x33e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	e016      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x36c>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e004      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d106      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f8c5 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2103      	movs	r1, #3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff f8a9 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x3aa>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2103      	movs	r1, #3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f89e 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	e017      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x3da>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2103      	movs	r1, #3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f893 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d105      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3f2>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0e9b      	lsrs	r3, r3, #26
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	e011      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x416>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d106      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2103      	movs	r1, #3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f870 	bl	8001f5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f9df 	bl	8002244 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 813d 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f7ff f92c 	bl	80020f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4aa2      	ldr	r2, [pc, #648]	; (8003130 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f040 812e 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x480>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e019      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4b4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	bf94      	ite	ls
 8002f02:	2301      	movls	r3, #1
 8002f04:	2300      	movhi	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d079      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x4d4>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	e015      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x500>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e003      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x520>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	e017      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x550>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	ea42 0103 	orr.w	r1, r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x576>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	051b      	lsls	r3, r3, #20
 8002fc8:	e018      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x5a8>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e003      	b.n	8002fee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	e07e      	b.n	80030fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_ADC_ConfigChannel+0x5c8>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	3301      	adds	r3, #1
 8003014:	069b      	lsls	r3, r3, #26
 8003016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301a:	e015      	b.n	8003048 <HAL_ADC_ConfigChannel+0x5f4>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	069b      	lsls	r3, r3, #26
 8003044:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x614>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	3301      	adds	r3, #1
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	e017      	b.n	8003098 <HAL_ADC_ConfigChannel+0x644>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	61fb      	str	r3, [r7, #28]
  return result;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e003      	b.n	800308c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x670>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	3b1e      	subs	r3, #30
 80030bc:	051b      	lsls	r3, r3, #20
 80030be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030c2:	e01b      	b.n	80030fc <HAL_ADC_ConfigChannel+0x6a8>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	613b      	str	r3, [r7, #16]
  return result;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030dc:	2320      	movs	r3, #32
 80030de:	e003      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	3b1e      	subs	r3, #30
 80030f6:	051b      	lsls	r3, r3, #20
 80030f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fc:	430b      	orrs	r3, r1
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	4619      	mov	r1, r3
 8003104:	f7fe ffcd 	bl	80020a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_ADC_ConfigChannel+0x6e0>)
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80be 	beq.w	8003292 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800311e:	d004      	beq.n	800312a <HAL_ADC_ConfigChannel+0x6d6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_ADC_ConfigChannel+0x6e4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10a      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x6ec>
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <HAL_ADC_ConfigChannel+0x6e8>)
 800312c:	e009      	b.n	8003142 <HAL_ADC_ConfigChannel+0x6ee>
 800312e:	bf00      	nop
 8003130:	407f0000 	.word	0x407f0000
 8003134:	80080000 	.word	0x80080000
 8003138:	50000100 	.word	0x50000100
 800313c:	50000300 	.word	0x50000300
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_ADC_ConfigChannel+0x854>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fec2 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 8003148:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_ADC_ConfigChannel+0x858>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x70c>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a55      	ldr	r2, [pc, #340]	; (80032b0 <HAL_ADC_ConfigChannel+0x85c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d13a      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d134      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003174:	d005      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x72e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <HAL_ADC_ConfigChannel+0x860>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f040 8085 	bne.w	800328c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318a:	d004      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x742>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_ADC_ConfigChannel+0x864>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x746>
 8003196:	4a49      	ldr	r2, [pc, #292]	; (80032bc <HAL_ADC_ConfigChannel+0x868>)
 8003198:	e000      	b.n	800319c <HAL_ADC_ConfigChannel+0x748>
 800319a:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <HAL_ADC_ConfigChannel+0x854>)
 800319c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f7fe fe7d 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_ADC_ConfigChannel+0x86c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	4a44      	ldr	r2, [pc, #272]	; (80032c4 <HAL_ADC_ConfigChannel+0x870>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031c6:	e002      	b.n	80031ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d4:	e05a      	b.n	800328c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <HAL_ADC_ConfigChannel+0x874>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <HAL_ADC_ConfigChannel+0x7d8>
 80031e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11f      	bne.n	800322c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <HAL_ADC_ConfigChannel+0x864>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d104      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x7ac>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_ADC_ConfigChannel+0x878>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d047      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003208:	d004      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x7c0>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <HAL_ADC_ConfigChannel+0x864>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x7c4>
 8003214:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_ADC_ConfigChannel+0x868>)
 8003216:	e000      	b.n	800321a <HAL_ADC_ConfigChannel+0x7c6>
 8003218:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <HAL_ADC_ConfigChannel+0x854>)
 800321a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f7fe fe3e 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800322a:	e031      	b.n	8003290 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_ADC_ConfigChannel+0x87c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12d      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d127      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_ADC_ConfigChannel+0x864>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003254:	d004      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x80c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_ADC_ConfigChannel+0x864>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x810>
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_ADC_ConfigChannel+0x868>)
 8003262:	e000      	b.n	8003266 <HAL_ADC_ConfigChannel+0x812>
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <HAL_ADC_ConfigChannel+0x854>)
 8003266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800326a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe fe18 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
 8003276:	e00c      	b.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800328a:	e002      	b.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003290:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800329a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	37d8      	adds	r7, #216	; 0xd8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	50000700 	.word	0x50000700
 80032ac:	c3210000 	.word	0xc3210000
 80032b0:	90c00010 	.word	0x90c00010
 80032b4:	50000600 	.word	0x50000600
 80032b8:	50000100 	.word	0x50000100
 80032bc:	50000300 	.word	0x50000300
 80032c0:	20000004 	.word	0x20000004
 80032c4:	053e2d63 	.word	0x053e2d63
 80032c8:	c7520000 	.word	0xc7520000
 80032cc:	50000500 	.word	0x50000500
 80032d0:	cb840000 	.word	0xcb840000

080032d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe ffaf 	bl	8002244 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d14d      	bne.n	8003388 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <ADC_Enable+0xc0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e039      	b.n	800338a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ff7e 	bl	800221c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003320:	f7fe fd80 	bl	8001e24 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003326:	e028      	b.n	800337a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe ff89 	bl	8002244 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe ff6d 	bl	800221c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003342:	f7fe fd6f 	bl	8001e24 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d914      	bls.n	800337a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d00d      	beq.n	800337a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	f043 0210 	orr.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d1cf      	bne.n	8003328 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	8000003f 	.word	0x8000003f

08003398 <LL_ADC_IsEnabled>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <LL_ADC_IsEnabled+0x18>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <LL_ADC_IsEnabled+0x1a>
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_ADC_REG_IsConversionOngoing>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d101      	bne.n	80033d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b0a1      	sub	sp, #132	; 0x84
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0e7      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800340a:	2300      	movs	r3, #0
 800340c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800340e:	2300      	movs	r3, #0
 8003410:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341a:	d102      	bne.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	e009      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d102      	bne.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800342c:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e001      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0be      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ffb1 	bl	80033be <LL_ADC_REG_IsConversionOngoing>
 800345c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ffab 	bl	80033be <LL_ADC_REG_IsConversionOngoing>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 80a0 	bne.w	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 809c 	bne.w	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003480:	d004      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a55      	ldr	r2, [pc, #340]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800348e:	e000      	b.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003492:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04b      	beq.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ae:	035b      	lsls	r3, r3, #13
 80034b0:	430b      	orrs	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a45      	ldr	r2, [pc, #276]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10f      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034d0:	f7ff ff62 	bl	8003398 <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	4841      	ldr	r0, [pc, #260]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d8:	f7ff ff5e 	bl	8003398 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e012      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80034ec:	483c      	ldr	r0, [pc, #240]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034ee:	f7ff ff53 	bl	8003398 <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	483b      	ldr	r0, [pc, #236]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034f6:	f7ff ff4f 	bl	8003398 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	431c      	orrs	r4, r3
 80034fe:	483c      	ldr	r0, [pc, #240]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003500:	f7ff ff4a 	bl	8003398 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	4323      	orrs	r3, r4
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d056      	beq.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6811      	ldr	r1, [r2, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	430a      	orrs	r2, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003530:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003532:	e047      	b.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003548:	d004      	beq.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d10f      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003554:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003558:	f7ff ff1e 	bl	8003398 <LL_ADC_IsEnabled>
 800355c:	4604      	mov	r4, r0
 800355e:	481f      	ldr	r0, [pc, #124]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003560:	f7ff ff1a 	bl	8003398 <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	4323      	orrs	r3, r4
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e012      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003574:	481a      	ldr	r0, [pc, #104]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003576:	f7ff ff0f 	bl	8003398 <LL_ADC_IsEnabled>
 800357a:	4604      	mov	r4, r0
 800357c:	4819      	ldr	r0, [pc, #100]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800357e:	f7ff ff0b 	bl	8003398 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	431c      	orrs	r4, r3
 8003586:	481a      	ldr	r0, [pc, #104]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003588:	f7ff ff06 	bl	8003398 <LL_ADC_IsEnabled>
 800358c:	4603      	mov	r3, r0
 800358e:	4323      	orrs	r3, r4
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800359e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035a6:	f023 030f 	bic.w	r3, r3, #15
 80035aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ae:	e009      	b.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80035c2:	e000      	b.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3784      	adds	r7, #132	; 0x84
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000400 	.word	0x50000400
 80035e4:	50000500 	.word	0x50000500
 80035e8:	50000300 	.word	0x50000300
 80035ec:	50000700 	.word	0x50000700
 80035f0:	50000600 	.word	0x50000600

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	; (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	2b04      	cmp	r3, #4
 8003704:	bf28      	it	cs
 8003706:	2304      	movcs	r3, #4
 8003708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3304      	adds	r3, #4
 800370e:	2b06      	cmp	r3, #6
 8003710:	d902      	bls.n	8003718 <NVIC_EncodePriority+0x30>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3b03      	subs	r3, #3
 8003716:	e000      	b.n	800371a <NVIC_EncodePriority+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	401a      	ands	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43d9      	mvns	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	4313      	orrs	r3, r2
         );
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003760:	d301      	bcc.n	8003766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003762:	2301      	movs	r3, #1
 8003764:	e00f      	b.n	8003786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <SysTick_Config+0x40>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800376e:	210f      	movs	r1, #15
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f7ff ff8e 	bl	8003694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <SysTick_Config+0x40>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <SysTick_Config+0x40>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010

08003794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff29 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037b8:	f7ff ff40 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f7ff ff90 	bl	80036e8 <NVIC_EncodePriority>
 80037c8:	4602      	mov	r2, r0
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff5f 	bl	8003694 <__NVIC_SetPriority>
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff33 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ffa4 	bl	8003750 <SysTick_Config>
 8003808:	4603      	mov	r3, r0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003822:	e15a      	b.n	8003ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 814c 	beq.w	8003ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d005      	beq.n	8003854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003850:	2b02      	cmp	r3, #2
 8003852:	d130      	bne.n	80038b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800388a:	2201      	movs	r2, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0201 	and.w	r2, r3, #1
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d017      	beq.n	80038f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d123      	bne.n	8003946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	08da      	lsrs	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3208      	adds	r2, #8
 8003906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	08da      	lsrs	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3208      	adds	r2, #8
 8003940:	6939      	ldr	r1, [r7, #16]
 8003942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a6 	beq.w	8003ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003988:	4b5b      	ldr	r3, [pc, #364]	; (8003af8 <HAL_GPIO_Init+0x2e4>)
 800398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398c:	4a5a      	ldr	r2, [pc, #360]	; (8003af8 <HAL_GPIO_Init+0x2e4>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6613      	str	r3, [r2, #96]	; 0x60
 8003994:	4b58      	ldr	r3, [pc, #352]	; (8003af8 <HAL_GPIO_Init+0x2e4>)
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a0:	4a56      	ldr	r2, [pc, #344]	; (8003afc <HAL_GPIO_Init+0x2e8>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	3302      	adds	r3, #2
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ca:	d01f      	beq.n	8003a0c <HAL_GPIO_Init+0x1f8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a4c      	ldr	r2, [pc, #304]	; (8003b00 <HAL_GPIO_Init+0x2ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d019      	beq.n	8003a08 <HAL_GPIO_Init+0x1f4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <HAL_GPIO_Init+0x2f0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_GPIO_Init+0x1f0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a4a      	ldr	r2, [pc, #296]	; (8003b08 <HAL_GPIO_Init+0x2f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00d      	beq.n	8003a00 <HAL_GPIO_Init+0x1ec>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a49      	ldr	r2, [pc, #292]	; (8003b0c <HAL_GPIO_Init+0x2f8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_Init+0x1e8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_GPIO_Init+0x2fc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039f4:	2305      	movs	r3, #5
 80039f6:	e00a      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 80039f8:	2306      	movs	r3, #6
 80039fa:	e008      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e006      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a00:	2303      	movs	r3, #3
 8003a02:	e004      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e002      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_GPIO_Init+0x1fa>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	f002 0203 	and.w	r2, r2, #3
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	4093      	lsls	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1e:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_GPIO_Init+0x2e8>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a50:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ace:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_GPIO_Init+0x300>)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f ae9d 	bne.w	8003824 <HAL_GPIO_Init+0x10>
  }
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40010000 	.word	0x40010000
 8003b00:	48000400 	.word	0x48000400
 8003b04:	48000800 	.word	0x48000800
 8003b08:	48000c00 	.word	0x48000c00
 8003b0c:	48001000 	.word	0x48001000
 8003b10:	48001400 	.word	0x48001400
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e001      	b.n	8003b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fe02 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d141      	bne.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d131      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bca:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bdc:	4a41      	ldr	r2, [pc, #260]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2232      	movs	r2, #50	; 0x32
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfa:	e002      	b.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	4b38      	ldr	r3, [pc, #224]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d102      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f2      	bne.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d158      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e057      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c38:	e04d      	b.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d141      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d131      	bne.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2232      	movs	r2, #50	; 0x32
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	0c9b      	lsrs	r3, r3, #18
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c86:	e002      	b.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f2      	bne.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cae:	d112      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e011      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cc4:	e007      	b.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	20000004 	.word	0x20000004
 8003cec:	431bde83 	.word	0x431bde83

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e306      	b.n	8004310 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b94      	ldr	r3, [pc, #592]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d102      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3e>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_OscConfig+0x44>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d157      	bne.n	8003df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e2e1      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x74>
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a84      	ldr	r2, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7e      	ldr	r2, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d88:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a74      	ldr	r2, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe f83c 	bl	8001e24 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe f838 	bl	8001e24 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e2a6      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xc0>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f828 	bl	8001e24 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe f824 	bl	8001e24 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e292      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dea:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d075      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e06:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e10:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_OscConfig+0x136>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_OscConfig+0x13c>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11f      	bne.n	8003e6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_OscConfig+0x154>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e265      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	4946      	ldr	r1, [pc, #280]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e58:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd ff95 	bl	8001d8c <HAL_InitTick>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d043      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e251      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd ffd0 	bl	8001e24 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fd ffcc 	bl	8001e24 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e23a      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	492d      	ldr	r1, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd ffac 	bl	8001e24 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fd ffa8 	bl	8001e24 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e216      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1e0>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d041      	beq.n	8003f82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd ff85 	bl	8001e24 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fd ff81 	bl	8001e24 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1ef      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCC_OscConfig+0x22e>
 8003f3e:	e020      	b.n	8003f82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd ff68 	bl	8001e24 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f56:	e00d      	b.n	8003f74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd ff64 	bl	8001e24 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d906      	bls.n	8003f74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1d2      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f74:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ea      	bne.n	8003f58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a6 	beq.w	80040dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x2b4>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x2b6>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	4a7e      	ldr	r2, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb6:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc6:	4b79      	ldr	r3, [pc, #484]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d118      	bne.n	8004004 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fd ff21 	bl	8001e24 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd ff1d 	bl	8001e24 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e18b      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <HAL_RCC_OscConfig+0x32e>
 800400c:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800401c:	e024      	b.n	8004068 <HAL_RCC_OscConfig+0x378>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b05      	cmp	r3, #5
 8004024:	d110      	bne.n	8004048 <HAL_RCC_OscConfig+0x358>
 8004026:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a5e      	ldr	r2, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004046:	e00f      	b.n	8004068 <HAL_RCC_OscConfig+0x378>
 8004048:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fed8 	bl	8001e24 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd fed4 	bl	8001e24 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e140      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ed      	beq.n	8004078 <HAL_RCC_OscConfig+0x388>
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd fec1 	bl	8001e24 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd febd 	bl	8001e24 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e129      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ed      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4a34      	ldr	r2, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fe90 	bl	8001e24 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004108:	f7fd fe8c 	bl	8001e24 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0fa      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x418>
 8004128:	e01b      	b.n	8004162 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004130:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fe73 	bl	8001e24 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004142:	f7fd fe6f 	bl	8001e24 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0dd      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80d1 	beq.w	800430e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b0c      	cmp	r3, #12
 8004176:	f000 808b 	beq.w	8004290 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d15e      	bne.n	8004240 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd fe49 	bl	8001e24 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	e00c      	b.n	80041b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd fe45 	bl	8001e24 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d905      	bls.n	80041b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0b3      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	4b59      	ldr	r3, [pc, #356]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ec      	bne.n	8004196 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b56      	ldr	r3, [pc, #344]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <HAL_RCC_OscConfig+0x62c>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6a11      	ldr	r1, [r2, #32]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041cc:	3a01      	subs	r2, #1
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041d6:	0212      	lsls	r2, r2, #8
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0552      	lsls	r2, r2, #21
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0652      	lsls	r2, r2, #25
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041f6:	06d2      	lsls	r2, r2, #27
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4947      	ldr	r1, [pc, #284]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a44      	ldr	r2, [pc, #272]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fe04 	bl	8001e24 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fe00 	bl	8001e24 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e06e      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b39      	ldr	r3, [pc, #228]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x530>
 800423e:	e066      	b.n	800430e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800424c:	4b32      	ldr	r3, [pc, #200]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a31      	ldr	r2, [pc, #196]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800425e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fddc 	bl	8001e24 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd fdd8 	bl	8001e24 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e046      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x580>
 800428e:	e03e      	b.n	800430e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e039      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0203 	and.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d12c      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	3b01      	subs	r3, #1
 80042bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d123      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11b      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d113      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	3b01      	subs	r3, #1
 80042f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d109      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	019f800c 	.word	0x019f800c

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e11e      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b91      	ldr	r3, [pc, #580]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d910      	bls.n	8004368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b8e      	ldr	r3, [pc, #568]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	498c      	ldr	r1, [pc, #560]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b8a      	ldr	r3, [pc, #552]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e106      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d073      	beq.n	800445c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d129      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f4      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800438c:	f000 f99e 	bl	80046cc <RCC_GetSysClockFreqFromPLLSource>
 8004390:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d93f      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800439a:	4b7a      	ldr	r3, [pc, #488]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d033      	beq.n	800441a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12f      	bne.n	800441a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ba:	4b72      	ldr	r3, [pc, #456]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e024      	b.n	800441a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0c6      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0be      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043f8:	f000 f8ce 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a61      	ldr	r2, [pc, #388]	; (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d909      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440e:	4a5d      	ldr	r2, [pc, #372]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b5a      	ldr	r3, [pc, #360]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4957      	ldr	r1, [pc, #348]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd fcfa 	bl	8001e24 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fd fcf6 	bl	8001e24 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e095      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a42      	ldr	r2, [pc, #264]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800447a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800447e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800449a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4936      	ldr	r1, [pc, #216]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4a32      	ldr	r2, [pc, #200]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d21d      	bcs.n	800450c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 020f 	bic.w	r2, r3, #15
 80044d8:	4929      	ldr	r1, [pc, #164]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e0:	f7fd fca0 	bl	8001e24 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fd fc9c 	bl	8001e24 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e03b      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ed      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4917      	ldr	r1, [pc, #92]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490f      	ldr	r1, [pc, #60]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454a:	f000 f825 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490c      	ldr	r1, [pc, #48]	; (800458c <HAL_RCC_ClockConfig+0x26c>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x270>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd fc0c 	bl	8001d8c <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000
 8004584:	40021000 	.word	0x40021000
 8004588:	04c4b400 	.word	0x04c4b400
 800458c:	080093bc 	.word	0x080093bc
 8004590:	20000004 	.word	0x20000004
 8004594:	20000008 	.word	0x20000008

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e047      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045bc:	4b26      	ldr	r3, [pc, #152]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e03e      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d136      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a16      	ldr	r2, [pc, #88]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e001      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004640:	693b      	ldr	r3, [r7, #16]
}
 8004642:	4618      	mov	r0, r3
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	00f42400 	.word	0x00f42400
 8004658:	016e3600 	.word	0x016e3600

0800465c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <HAL_RCC_GetHCLKFreq+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000004 	.word	0x20000004

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004678:	f7ff fff0 	bl	800465c <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCC_GetPCLK1Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	080093cc 	.word	0x080093cc

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046a4:	f7ff ffda 	bl	800465c <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0adb      	lsrs	r3, r3, #11
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	080093cc 	.word	0x080093cc

080046cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d10c      	bne.n	800470a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f0:	4a17      	ldr	r2, [pc, #92]	; (8004750 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fa:	68d2      	ldr	r2, [r2, #12]
 80046fc:	0a12      	lsrs	r2, r2, #8
 80046fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
    break;
 8004708:	e00c      	b.n	8004724 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
    break;
 8004722:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0e5b      	lsrs	r3, r3, #25
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800473e:	687b      	ldr	r3, [r7, #4]
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40021000 	.word	0x40021000
 8004750:	016e3600 	.word	0x016e3600
 8004754:	00f42400 	.word	0x00f42400

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8098 	beq.w	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477a:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	4b40      	ldr	r3, [pc, #256]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	4a3f      	ldr	r2, [pc, #252]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	; 0x58
 8004792:	4b3d      	ldr	r3, [pc, #244]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a2:	4b3a      	ldr	r3, [pc, #232]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a39      	ldr	r2, [pc, #228]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ae:	f7fd fb39 	bl	8001e24 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fd fb35 	bl	8001e24 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	74fb      	strb	r3, [r7, #19]
        break;
 80047c8:	e005      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d159      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d019      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047f8:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd faf5 	bl	8001e24 <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	e00b      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd faf1 	bl	8001e24 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d902      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	74fb      	strb	r3, [r7, #19]
            break;
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ec      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004888:	40021000 	.word	0x40021000
 800488c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004894:	7c7b      	ldrb	r3, [r7, #17]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489a:	4ba7      	ldr	r3, [pc, #668]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	4aa6      	ldr	r2, [pc, #664]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b2:	4ba1      	ldr	r3, [pc, #644]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f023 0203 	bic.w	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	499d      	ldr	r1, [pc, #628]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d4:	4b98      	ldr	r3, [pc, #608]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f023 020c 	bic.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4995      	ldr	r1, [pc, #596]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f6:	4b90      	ldr	r3, [pc, #576]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	498c      	ldr	r1, [pc, #560]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004918:	4b87      	ldr	r3, [pc, #540]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4984      	ldr	r1, [pc, #528]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800493a:	4b7f      	ldr	r3, [pc, #508]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	497b      	ldr	r1, [pc, #492]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800495c:	4b76      	ldr	r3, [pc, #472]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	4973      	ldr	r1, [pc, #460]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800497e:	4b6e      	ldr	r3, [pc, #440]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	496a      	ldr	r1, [pc, #424]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a0:	4b65      	ldr	r3, [pc, #404]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4962      	ldr	r1, [pc, #392]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c2:	4b5d      	ldr	r3, [pc, #372]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	4959      	ldr	r1, [pc, #356]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049e4:	4b54      	ldr	r3, [pc, #336]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	4951      	ldr	r1, [pc, #324]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a06:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4948      	ldr	r1, [pc, #288]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	4940      	ldr	r1, [pc, #256]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a48:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a3a      	ldr	r2, [pc, #232]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	4932      	ldr	r1, [pc, #200]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d015      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4924      	ldr	r1, [pc, #144]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	4916      	ldr	r1, [pc, #88]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aee:	d105      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a02      	ldr	r2, [pc, #8]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b32:	60d3      	str	r3, [r2, #12]
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	4926      	ldr	r1, [pc, #152]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b68:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	4918      	ldr	r1, [pc, #96]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004baa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc febc 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fb6c 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e054      	b.n	8004d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d115      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_TIM_Base_Start_IT+0xec>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d015      	beq.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d011      	beq.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e008      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e000      	b.n	8004d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40015000 	.word	0x40015000
 8004d90:	00010007 	.word	0x00010007

08004d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa7c 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa6e 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa7f 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0204 	mvn.w	r2, #4
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa52 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa44 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa55 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0208 	mvn.w	r2, #8
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa28 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa1a 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fa2b 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9fe 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9f0 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa01 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0201 	mvn.w	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fc24 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fbca 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fbbd 	bl	80056ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f9af 	bl	80052fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0220 	mvn.w	r2, #32
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fb7d 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd8:	d10f      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe8:	d107      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb83 	bl	8005700 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005008:	d10f      	bne.n	800502a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb75 	bl	8005714 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005038:	d10f      	bne.n	800505a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d107      	bne.n	800505a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb67 	bl	8005728 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005068:	d10f      	bne.n	800508a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005078:	d107      	bne.n	800508a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb59 	bl	800573c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_ConfigClockSource+0x1c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0f6      	b.n	800529e <HAL_TIM_ConfigClockSource+0x20a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80050ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6f      	ldr	r2, [pc, #444]	; (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	f000 80c1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80050f0:	4a6d      	ldr	r2, [pc, #436]	; (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f200 80c6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f8:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	f000 80b9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005100:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f200 80be 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005108:	4a69      	ldr	r2, [pc, #420]	; (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f000 80b1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005110:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f200 80b6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005118:	4a66      	ldr	r2, [pc, #408]	; (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f000 80a9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005120:	4a64      	ldr	r2, [pc, #400]	; (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f200 80ae 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f000 80a1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005130:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 8005132:	4293      	cmp	r3, r2
 8005134:	f200 80a6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	4a60      	ldr	r2, [pc, #384]	; (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 800513a:	4293      	cmp	r3, r2
 800513c:	f000 8099 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005140:	4a5e      	ldr	r2, [pc, #376]	; (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f200 809e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005148:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800514c:	f000 8091 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005150:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005154:	f200 8096 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515c:	f000 8089 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005164:	f200 808e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516c:	d03e      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x158>
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	f200 8087 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517a:	f000 8086 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1f6>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	d87f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	2b70      	cmp	r3, #112	; 0x70
 8005186:	d01a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x12a>
 8005188:	2b70      	cmp	r3, #112	; 0x70
 800518a:	d87b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d050      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x19e>
 8005190:	2b60      	cmp	r3, #96	; 0x60
 8005192:	d877      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d03c      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x17e>
 8005198:	2b50      	cmp	r3, #80	; 0x50
 800519a:	d873      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d058      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x1be>
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d86f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d064      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051a8:	2b30      	cmp	r3, #48	; 0x30
 80051aa:	d86b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d060      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d867      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d05a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	e062      	b.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f000 f9c3 	bl	8005558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	609a      	str	r2, [r3, #8]
      break;
 80051ea:	e04f      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f000 f9ac 	bl	8005558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800520e:	609a      	str	r2, [r3, #8]
      break;
 8005210:	e03c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 f91e 	bl	8005460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2150      	movs	r1, #80	; 0x50
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f977 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005230:	e02c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 f93d 	bl	80054be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2160      	movs	r1, #96	; 0x60
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f967 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005250:	e01c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 f8fe 	bl	8005460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f957 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005270:	e00c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 f94e 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005282:	e003      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800528a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00100070 	.word	0x00100070
 80052ac:	00100060 	.word	0x00100060
 80052b0:	00100050 	.word	0x00100050
 80052b4:	00100040 	.word	0x00100040
 80052b8:	00100030 	.word	0x00100030
 80052bc:	00100020 	.word	0x00100020

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a46      	ldr	r2, [pc, #280]	; (800543c <TIM_Base_SetConfig+0x12c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d017      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532e:	d013      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a43      	ldr	r2, [pc, #268]	; (8005440 <TIM_Base_SetConfig+0x130>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00f      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a42      	ldr	r2, [pc, #264]	; (8005444 <TIM_Base_SetConfig+0x134>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a41      	ldr	r2, [pc, #260]	; (8005448 <TIM_Base_SetConfig+0x138>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a40      	ldr	r2, [pc, #256]	; (800544c <TIM_Base_SetConfig+0x13c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3f      	ldr	r2, [pc, #252]	; (8005450 <TIM_Base_SetConfig+0x140>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a33      	ldr	r2, [pc, #204]	; (800543c <TIM_Base_SetConfig+0x12c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d023      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005378:	d01f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <TIM_Base_SetConfig+0x130>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2f      	ldr	r2, [pc, #188]	; (8005444 <TIM_Base_SetConfig+0x134>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2e      	ldr	r2, [pc, #184]	; (8005448 <TIM_Base_SetConfig+0x138>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2d      	ldr	r2, [pc, #180]	; (800544c <TIM_Base_SetConfig+0x13c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <TIM_Base_SetConfig+0x144>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <TIM_Base_SetConfig+0x148>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <TIM_Base_SetConfig+0x14c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a26      	ldr	r2, [pc, #152]	; (8005450 <TIM_Base_SetConfig+0x140>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <TIM_Base_SetConfig+0x12c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a14      	ldr	r2, [pc, #80]	; (800544c <TIM_Base_SetConfig+0x13c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a14      	ldr	r2, [pc, #80]	; (8005454 <TIM_Base_SetConfig+0x144>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <TIM_Base_SetConfig+0x148>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <TIM_Base_SetConfig+0x14c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <TIM_Base_SetConfig+0x140>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40013400 	.word	0x40013400
 8005450:	40015000 	.word	0x40015000
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800

08005460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 030a 	bic.w	r3, r3, #10
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054be:	b480      	push	{r7}
 80054c0:	b087      	sub	sp, #28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	031b      	lsls	r3, r3, #12
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	f043 0307 	orr.w	r3, r3, #7
 8005544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	609a      	str	r2, [r3, #8]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	431a      	orrs	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4313      	orrs	r3, r2
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e074      	b.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a34      	ldr	r2, [pc, #208]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a33      	ldr	r2, [pc, #204]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a31      	ldr	r2, [pc, #196]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d108      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d01d      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a15      	ldr	r2, [pc, #84]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d10c      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4313      	orrs	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40015000 	.word	0x40015000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40014000 	.word	0x40014000

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e042      	b.n	80057e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc f951 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2224      	movs	r2, #36	; 0x24
 800577e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f8c2 	bl	800591c <UART_SetConfig>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e022      	b.n	80057e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fbb2 	bl	8005f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc39 	bl	8006058 <UART_CheckIdleState>
 80057e6:	4603      	mov	r3, r0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 8083 	bne.w	8005912 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Transmit+0x28>
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e07b      	b.n	8005914 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_UART_Transmit+0x3a>
 8005826:	2302      	movs	r3, #2
 8005828:	e074      	b.n	8005914 <HAL_UART_Transmit+0x124>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2221      	movs	r2, #33	; 0x21
 800583e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005842:	f7fc faef 	bl	8001e24 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005860:	d108      	bne.n	8005874 <HAL_UART_Transmit+0x84>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e003      	b.n	800587c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005884:	e02c      	b.n	80058e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2200      	movs	r2, #0
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fc2c 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e039      	b.n	8005914 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	3302      	adds	r3, #2
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e007      	b.n	80058ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1cc      	bne.n	8005886 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fbf9 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e006      	b.n	8005914 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	e000      	b.n	8005914 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005912:	2302      	movs	r3, #2
  }
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800591c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005920:	b08c      	sub	sp, #48	; 0x30
 8005922:	af00      	add	r7, sp, #0
 8005924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	431a      	orrs	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	431a      	orrs	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4313      	orrs	r3, r2
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4baa      	ldr	r3, [pc, #680]	; (8005bf4 <UART_SetConfig+0x2d8>)
 800594c:	4013      	ands	r3, r2
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005954:	430b      	orrs	r3, r1
 8005956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a9f      	ldr	r2, [pc, #636]	; (8005bf8 <UART_SetConfig+0x2dc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005984:	4313      	orrs	r3, r2
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005992:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800599c:	430b      	orrs	r3, r1
 800599e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f023 010f 	bic.w	r1, r3, #15
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a90      	ldr	r2, [pc, #576]	; (8005bfc <UART_SetConfig+0x2e0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d125      	bne.n	8005a0c <UART_SetConfig+0xf0>
 80059c0:	4b8f      	ldr	r3, [pc, #572]	; (8005c00 <UART_SetConfig+0x2e4>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d81a      	bhi.n	8005a04 <UART_SetConfig+0xe8>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0xb8>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e116      	b.n	8005c1a <UART_SetConfig+0x2fe>
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e112      	b.n	8005c1a <UART_SetConfig+0x2fe>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e10e      	b.n	8005c1a <UART_SetConfig+0x2fe>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e10a      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e106      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a7c      	ldr	r2, [pc, #496]	; (8005c04 <UART_SetConfig+0x2e8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d138      	bne.n	8005a88 <UART_SetConfig+0x16c>
 8005a16:	4b7a      	ldr	r3, [pc, #488]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d82d      	bhi.n	8005a80 <UART_SetConfig+0x164>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x110>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a81 	.word	0x08005a81
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a79 	.word	0x08005a79
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e0d8      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e0d4      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a76:	e0d0      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e0cc      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e0c8      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5e      	ldr	r2, [pc, #376]	; (8005c08 <UART_SetConfig+0x2ec>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d125      	bne.n	8005ade <UART_SetConfig+0x1c2>
 8005a92:	4b5b      	ldr	r3, [pc, #364]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d016      	beq.n	8005ace <UART_SetConfig+0x1b2>
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d818      	bhi.n	8005ad6 <UART_SetConfig+0x1ba>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d00a      	beq.n	8005abe <UART_SetConfig+0x1a2>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d814      	bhi.n	8005ad6 <UART_SetConfig+0x1ba>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <UART_SetConfig+0x19a>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d008      	beq.n	8005ac6 <UART_SetConfig+0x1aa>
 8005ab4:	e00f      	b.n	8005ad6 <UART_SetConfig+0x1ba>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005abc:	e0ad      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac4:	e0a9      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005acc:	e0a5      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad4:	e0a1      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005adc:	e09d      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a4a      	ldr	r2, [pc, #296]	; (8005c0c <UART_SetConfig+0x2f0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d125      	bne.n	8005b34 <UART_SetConfig+0x218>
 8005ae8:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d016      	beq.n	8005b24 <UART_SetConfig+0x208>
 8005af6:	2bc0      	cmp	r3, #192	; 0xc0
 8005af8:	d818      	bhi.n	8005b2c <UART_SetConfig+0x210>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d00a      	beq.n	8005b14 <UART_SetConfig+0x1f8>
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d814      	bhi.n	8005b2c <UART_SetConfig+0x210>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <UART_SetConfig+0x1f0>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d008      	beq.n	8005b1c <UART_SetConfig+0x200>
 8005b0a:	e00f      	b.n	8005b2c <UART_SetConfig+0x210>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e082      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b14:	2302      	movs	r3, #2
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e07e      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e07a      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b24:	2308      	movs	r3, #8
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e076      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b32:	e072      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a35      	ldr	r2, [pc, #212]	; (8005c10 <UART_SetConfig+0x2f4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d12a      	bne.n	8005b94 <UART_SetConfig+0x278>
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4c:	d01a      	beq.n	8005b84 <UART_SetConfig+0x268>
 8005b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b52:	d81b      	bhi.n	8005b8c <UART_SetConfig+0x270>
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b58:	d00c      	beq.n	8005b74 <UART_SetConfig+0x258>
 8005b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5e:	d815      	bhi.n	8005b8c <UART_SetConfig+0x270>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <UART_SetConfig+0x250>
 8005b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b68:	d008      	beq.n	8005b7c <UART_SetConfig+0x260>
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x270>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b72:	e052      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e04e      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e04a      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e046      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e042      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <UART_SetConfig+0x2dc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d13a      	bne.n	8005c14 <UART_SetConfig+0x2f8>
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bac:	d01a      	beq.n	8005be4 <UART_SetConfig+0x2c8>
 8005bae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bb2:	d81b      	bhi.n	8005bec <UART_SetConfig+0x2d0>
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d00c      	beq.n	8005bd4 <UART_SetConfig+0x2b8>
 8005bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbe:	d815      	bhi.n	8005bec <UART_SetConfig+0x2d0>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <UART_SetConfig+0x2b0>
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d008      	beq.n	8005bdc <UART_SetConfig+0x2c0>
 8005bca:	e00f      	b.n	8005bec <UART_SetConfig+0x2d0>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e022      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e01e      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e01a      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e016      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e012      	b.n	8005c1a <UART_SetConfig+0x2fe>
 8005bf4:	cfff69f3 	.word	0xcfff69f3
 8005bf8:	40008000 	.word	0x40008000
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	40021000 	.word	0x40021000
 8005c04:	40004400 	.word	0x40004400
 8005c08:	40004800 	.word	0x40004800
 8005c0c:	40004c00 	.word	0x40004c00
 8005c10:	40005000 	.word	0x40005000
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4aae      	ldr	r2, [pc, #696]	; (8005ed8 <UART_SetConfig+0x5bc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	f040 8097 	bne.w	8005d54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d823      	bhi.n	8005c76 <UART_SetConfig+0x35a>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <UART_SetConfig+0x318>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c77 	.word	0x08005c77
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c77 	.word	0x08005c77
 8005c44:	08005c67 	.word	0x08005c67
 8005c48:	08005c77 	.word	0x08005c77
 8005c4c:	08005c77 	.word	0x08005c77
 8005c50:	08005c77 	.word	0x08005c77
 8005c54:	08005c6f 	.word	0x08005c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c58:	f7fe fd0c 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8005c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c5e:	e010      	b.n	8005c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b9e      	ldr	r3, [pc, #632]	; (8005edc <UART_SetConfig+0x5c0>)
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c64:	e00d      	b.n	8005c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fe fc97 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c6c:	e009      	b.n	8005c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c74:	e005      	b.n	8005c82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8130 	beq.w	8005eea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	4a94      	ldr	r2, [pc, #592]	; (8005ee0 <UART_SetConfig+0x5c4>)
 8005c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d305      	bcc.n	8005cba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cc0:	e113      	b.n	8005eea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	60fa      	str	r2, [r7, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	4a84      	ldr	r2, [pc, #528]	; (8005ee0 <UART_SetConfig+0x5c4>)
 8005cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ce4:	f7fa ffd8 	bl	8000c98 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	020b      	lsls	r3, r1, #8
 8005cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cfe:	0202      	lsls	r2, r0, #8
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	6849      	ldr	r1, [r1, #4]
 8005d04:	0849      	lsrs	r1, r1, #1
 8005d06:	2000      	movs	r0, #0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	eb12 0804 	adds.w	r8, r2, r4
 8005d10:	eb43 0905 	adc.w	r9, r3, r5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	469a      	mov	sl, r3
 8005d1c:	4693      	mov	fp, r2
 8005d1e:	4652      	mov	r2, sl
 8005d20:	465b      	mov	r3, fp
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	f7fa ffb7 	bl	8000c98 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d38:	d308      	bcc.n	8005d4c <UART_SetConfig+0x430>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d40:	d204      	bcs.n	8005d4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e0ce      	b.n	8005eea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d52:	e0ca      	b.n	8005eea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5c:	d166      	bne.n	8005e2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d827      	bhi.n	8005db6 <UART_SetConfig+0x49a>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x450>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005db7 	.word	0x08005db7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fc70 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8005d94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d96:	e014      	b.n	8005dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fe fc82 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9e:	e010      	b.n	8005dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b4e      	ldr	r3, [pc, #312]	; (8005edc <UART_SetConfig+0x5c0>)
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fe fbf7 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dac:	e009      	b.n	8005dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db4:	e005      	b.n	8005dc2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8090 	beq.w	8005eea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	4a44      	ldr	r2, [pc, #272]	; (8005ee0 <UART_SetConfig+0x5c4>)
 8005dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ddc:	005a      	lsls	r2, r3, #1
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	441a      	add	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d916      	bls.n	8005e24 <UART_SetConfig+0x508>
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d212      	bcs.n	8005e24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f023 030f 	bic.w	r3, r3, #15
 8005e06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	8bfb      	ldrh	r3, [r7, #30]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	8bfa      	ldrh	r2, [r7, #30]
 8005e20:	60da      	str	r2, [r3, #12]
 8005e22:	e062      	b.n	8005eea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e2a:	e05e      	b.n	8005eea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d828      	bhi.n	8005e86 <UART_SetConfig+0x56a>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x520>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e87 	.word	0x08005e87
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e60:	f7fe fc08 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e66:	e014      	b.n	8005e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e68:	f7fe fc1a 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <UART_SetConfig+0x5c0>)
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e74:	e00d      	b.n	8005e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fb8f 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8005e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e7c:	e009      	b.n	8005e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e84:	e005      	b.n	8005e92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e90:	bf00      	nop
    }

    if (pclk != 0U)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d028      	beq.n	8005eea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <UART_SetConfig+0x5c4>)
 8005e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	441a      	add	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	d910      	bls.n	8005ee4 <UART_SetConfig+0x5c8>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d20c      	bcs.n	8005ee4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
 8005ed4:	e009      	b.n	8005eea <UART_SetConfig+0x5ce>
 8005ed6:	bf00      	nop
 8005ed8:	40008000 	.word	0x40008000
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	080093d4 	.word	0x080093d4
      }
      else
      {
        ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3730      	adds	r7, #48	; 0x30
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01a      	beq.n	800602a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006012:	d10a      	bne.n	800602a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	605a      	str	r2, [r3, #4]
  }
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006068:	f7fb fedc 	bl	8001e24 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d10e      	bne.n	800609a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f82f 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e025      	b.n	80060e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d10e      	bne.n	80060c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f819 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e00f      	b.n	80060e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	e0a9      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	f000 80a5 	beq.w	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fb fe8b 	bl	8001e24 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
 800611a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611c:	2b00      	cmp	r3, #0
 800611e:	d140      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006134:	667b      	str	r3, [r7, #100]	; 0x64
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006140:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800614c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e6      	bne.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006172:	64ba      	str	r2, [r7, #72]	; 0x48
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e069      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d051      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d149      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e6      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	613b      	str	r3, [r7, #16]
   return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	66bb      	str	r3, [r7, #104]	; 0x68
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800621c:	623a      	str	r2, [r7, #32]
 800621e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	61bb      	str	r3, [r7, #24]
   return(result);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e010      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	429a      	cmp	r2, r3
 8006270:	f43f af46 	beq.w	8006100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3770      	adds	r7, #112	; 0x70
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_UARTEx_DisableFifoMode+0x16>
 8006290:	2302      	movs	r3, #2
 8006292:	e027      	b.n	80062e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2224      	movs	r2, #36	; 0x24
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e02d      	b.n	8006364 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	; 0x24
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f84f 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e02d      	b.n	80063e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f811 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d108      	bne.n	800640a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006408:	e031      	b.n	800646e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800640a:	2308      	movs	r3, #8
 800640c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800640e:	2308      	movs	r3, #8
 8006410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0e5b      	lsrs	r3, r3, #25
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0f5b      	lsrs	r3, r3, #29
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	7b3a      	ldrb	r2, [r7, #12]
 8006436:	4911      	ldr	r1, [pc, #68]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800643e:	7b3a      	ldrb	r2, [r7, #12]
 8006440:	490f      	ldr	r1, [pc, #60]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006444:	fb93 f3f2 	sdiv	r3, r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	4909      	ldr	r1, [pc, #36]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006456:	5c8a      	ldrb	r2, [r1, r2]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800645c:	7b7a      	ldrb	r2, [r7, #13]
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006462:	fb93 f3f2 	sdiv	r3, r3, r2
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	080093ec 	.word	0x080093ec
 8006480:	080093f4 	.word	0x080093f4

08006484 <__errno>:
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <__errno+0x8>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4d0d      	ldr	r5, [pc, #52]	; (80064c8 <__libc_init_array+0x38>)
 8006494:	4c0d      	ldr	r4, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	2600      	movs	r6, #0
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	4d0b      	ldr	r5, [pc, #44]	; (80064d0 <__libc_init_array+0x40>)
 80064a2:	4c0c      	ldr	r4, [pc, #48]	; (80064d4 <__libc_init_array+0x44>)
 80064a4:	f002 ff04 	bl	80092b0 <_init>
 80064a8:	1b64      	subs	r4, r4, r5
 80064aa:	10a4      	asrs	r4, r4, #2
 80064ac:	2600      	movs	r6, #0
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	080097dc 	.word	0x080097dc
 80064cc:	080097dc 	.word	0x080097dc
 80064d0:	080097dc 	.word	0x080097dc
 80064d4:	080097e0 	.word	0x080097e0

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <__cvt>:
 80064e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	ec55 4b10 	vmov	r4, r5, d0
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	460e      	mov	r6, r1
 80064f4:	4619      	mov	r1, r3
 80064f6:	462b      	mov	r3, r5
 80064f8:	bfbb      	ittet	lt
 80064fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064fe:	461d      	movlt	r5, r3
 8006500:	2300      	movge	r3, #0
 8006502:	232d      	movlt	r3, #45	; 0x2d
 8006504:	700b      	strb	r3, [r1, #0]
 8006506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800650c:	4691      	mov	r9, r2
 800650e:	f023 0820 	bic.w	r8, r3, #32
 8006512:	bfbc      	itt	lt
 8006514:	4622      	movlt	r2, r4
 8006516:	4614      	movlt	r4, r2
 8006518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651c:	d005      	beq.n	800652a <__cvt+0x42>
 800651e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006522:	d100      	bne.n	8006526 <__cvt+0x3e>
 8006524:	3601      	adds	r6, #1
 8006526:	2102      	movs	r1, #2
 8006528:	e000      	b.n	800652c <__cvt+0x44>
 800652a:	2103      	movs	r1, #3
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	ab02      	add	r3, sp, #8
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	ec45 4b10 	vmov	d0, r4, r5
 8006538:	4653      	mov	r3, sl
 800653a:	4632      	mov	r2, r6
 800653c:	f000 fcec 	bl	8006f18 <_dtoa_r>
 8006540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006544:	4607      	mov	r7, r0
 8006546:	d102      	bne.n	800654e <__cvt+0x66>
 8006548:	f019 0f01 	tst.w	r9, #1
 800654c:	d022      	beq.n	8006594 <__cvt+0xac>
 800654e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006552:	eb07 0906 	add.w	r9, r7, r6
 8006556:	d110      	bne.n	800657a <__cvt+0x92>
 8006558:	783b      	ldrb	r3, [r7, #0]
 800655a:	2b30      	cmp	r3, #48	; 0x30
 800655c:	d10a      	bne.n	8006574 <__cvt+0x8c>
 800655e:	2200      	movs	r2, #0
 8006560:	2300      	movs	r3, #0
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7fa fad7 	bl	8000b18 <__aeabi_dcmpeq>
 800656a:	b918      	cbnz	r0, 8006574 <__cvt+0x8c>
 800656c:	f1c6 0601 	rsb	r6, r6, #1
 8006570:	f8ca 6000 	str.w	r6, [sl]
 8006574:	f8da 3000 	ldr.w	r3, [sl]
 8006578:	4499      	add	r9, r3
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa fac9 	bl	8000b18 <__aeabi_dcmpeq>
 8006586:	b108      	cbz	r0, 800658c <__cvt+0xa4>
 8006588:	f8cd 900c 	str.w	r9, [sp, #12]
 800658c:	2230      	movs	r2, #48	; 0x30
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	454b      	cmp	r3, r9
 8006592:	d307      	bcc.n	80065a4 <__cvt+0xbc>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006598:	1bdb      	subs	r3, r3, r7
 800659a:	4638      	mov	r0, r7
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	b004      	add	sp, #16
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	9103      	str	r1, [sp, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e7f0      	b.n	800658e <__cvt+0xa6>

080065ac <__exponent>:
 80065ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ae:	4603      	mov	r3, r0
 80065b0:	2900      	cmp	r1, #0
 80065b2:	bfb8      	it	lt
 80065b4:	4249      	neglt	r1, r1
 80065b6:	f803 2b02 	strb.w	r2, [r3], #2
 80065ba:	bfb4      	ite	lt
 80065bc:	222d      	movlt	r2, #45	; 0x2d
 80065be:	222b      	movge	r2, #43	; 0x2b
 80065c0:	2909      	cmp	r1, #9
 80065c2:	7042      	strb	r2, [r0, #1]
 80065c4:	dd2a      	ble.n	800661c <__exponent+0x70>
 80065c6:	f10d 0407 	add.w	r4, sp, #7
 80065ca:	46a4      	mov	ip, r4
 80065cc:	270a      	movs	r7, #10
 80065ce:	46a6      	mov	lr, r4
 80065d0:	460a      	mov	r2, r1
 80065d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80065d6:	fb07 1516 	mls	r5, r7, r6, r1
 80065da:	3530      	adds	r5, #48	; 0x30
 80065dc:	2a63      	cmp	r2, #99	; 0x63
 80065de:	f104 34ff 	add.w	r4, r4, #4294967295
 80065e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065e6:	4631      	mov	r1, r6
 80065e8:	dcf1      	bgt.n	80065ce <__exponent+0x22>
 80065ea:	3130      	adds	r1, #48	; 0x30
 80065ec:	f1ae 0502 	sub.w	r5, lr, #2
 80065f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065f4:	1c44      	adds	r4, r0, #1
 80065f6:	4629      	mov	r1, r5
 80065f8:	4561      	cmp	r1, ip
 80065fa:	d30a      	bcc.n	8006612 <__exponent+0x66>
 80065fc:	f10d 0209 	add.w	r2, sp, #9
 8006600:	eba2 020e 	sub.w	r2, r2, lr
 8006604:	4565      	cmp	r5, ip
 8006606:	bf88      	it	hi
 8006608:	2200      	movhi	r2, #0
 800660a:	4413      	add	r3, r2
 800660c:	1a18      	subs	r0, r3, r0
 800660e:	b003      	add	sp, #12
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800661a:	e7ed      	b.n	80065f8 <__exponent+0x4c>
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	3130      	adds	r1, #48	; 0x30
 8006620:	7083      	strb	r3, [r0, #2]
 8006622:	70c1      	strb	r1, [r0, #3]
 8006624:	1d03      	adds	r3, r0, #4
 8006626:	e7f1      	b.n	800660c <__exponent+0x60>

08006628 <_printf_float>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b02 	vpush	{d8}
 8006630:	b08d      	sub	sp, #52	; 0x34
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f001 fa59 	bl	8007af4 <_localeconv_r>
 8006642:	f8d0 a000 	ldr.w	sl, [r0]
 8006646:	4650      	mov	r0, sl
 8006648:	f7f9 fdea 	bl	8000220 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930a      	str	r3, [sp, #40]	; 0x28
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	f8d8 3000 	ldr.w	r3, [r8]
 8006658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800665c:	3307      	adds	r3, #7
 800665e:	f023 0307 	bic.w	r3, r3, #7
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	f8c8 2000 	str.w	r2, [r8]
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006680:	ee08 0a10 	vmov	s16, r0
 8006684:	4b9f      	ldr	r3, [pc, #636]	; (8006904 <_printf_float+0x2dc>)
 8006686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	f7fa fa75 	bl	8000b7c <__aeabi_dcmpun>
 8006692:	bb88      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 8006694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006698:	4b9a      	ldr	r3, [pc, #616]	; (8006904 <_printf_float+0x2dc>)
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	f7fa fa4f 	bl	8000b40 <__aeabi_dcmple>
 80066a2:	bb48      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 80066a4:	2200      	movs	r2, #0
 80066a6:	2300      	movs	r3, #0
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	f7fa fa3e 	bl	8000b2c <__aeabi_dcmplt>
 80066b0:	b110      	cbz	r0, 80066b8 <_printf_float+0x90>
 80066b2:	232d      	movs	r3, #45	; 0x2d
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	4b93      	ldr	r3, [pc, #588]	; (8006908 <_printf_float+0x2e0>)
 80066ba:	4894      	ldr	r0, [pc, #592]	; (800690c <_printf_float+0x2e4>)
 80066bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066c0:	bf94      	ite	ls
 80066c2:	4698      	movls	r8, r3
 80066c4:	4680      	movhi	r8, r0
 80066c6:	2303      	movs	r3, #3
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	f023 0204 	bic.w	r2, r3, #4
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	9700      	str	r7, [sp, #0]
 80066d8:	4633      	mov	r3, r6
 80066da:	aa0b      	add	r2, sp, #44	; 0x2c
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f9d8 	bl	8006a94 <_printf_common>
 80066e4:	3001      	adds	r0, #1
 80066e6:	f040 8090 	bne.w	800680a <_printf_float+0x1e2>
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	b00d      	add	sp, #52	; 0x34
 80066f0:	ecbd 8b02 	vpop	{d8}
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7fa fa3c 	bl	8000b7c <__aeabi_dcmpun>
 8006704:	b140      	cbz	r0, 8006718 <_printf_float+0xf0>
 8006706:	464b      	mov	r3, r9
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbc      	itt	lt
 800670c:	232d      	movlt	r3, #45	; 0x2d
 800670e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006712:	487f      	ldr	r0, [pc, #508]	; (8006910 <_printf_float+0x2e8>)
 8006714:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <_printf_float+0x2ec>)
 8006716:	e7d1      	b.n	80066bc <_printf_float+0x94>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800671e:	9206      	str	r2, [sp, #24]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	d13f      	bne.n	80067a4 <_printf_float+0x17c>
 8006724:	2306      	movs	r3, #6
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	6861      	ldr	r1, [r4, #4]
 800672c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006730:	2300      	movs	r3, #0
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	ab0a      	add	r3, sp, #40	; 0x28
 8006736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800673a:	ab09      	add	r3, sp, #36	; 0x24
 800673c:	ec49 8b10 	vmov	d0, r8, r9
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff fecd 	bl	80064e8 <__cvt>
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006752:	2b47      	cmp	r3, #71	; 0x47
 8006754:	4680      	mov	r8, r0
 8006756:	d108      	bne.n	800676a <_printf_float+0x142>
 8006758:	1cc8      	adds	r0, r1, #3
 800675a:	db02      	blt.n	8006762 <_printf_float+0x13a>
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	4299      	cmp	r1, r3
 8006760:	dd41      	ble.n	80067e6 <_printf_float+0x1be>
 8006762:	f1ab 0b02 	sub.w	fp, fp, #2
 8006766:	fa5f fb8b 	uxtb.w	fp, fp
 800676a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800676e:	d820      	bhi.n	80067b2 <_printf_float+0x18a>
 8006770:	3901      	subs	r1, #1
 8006772:	465a      	mov	r2, fp
 8006774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006778:	9109      	str	r1, [sp, #36]	; 0x24
 800677a:	f7ff ff17 	bl	80065ac <__exponent>
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	1813      	adds	r3, r2, r0
 8006782:	2a01      	cmp	r2, #1
 8006784:	4681      	mov	r9, r0
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	dc02      	bgt.n	8006790 <_printf_float+0x168>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d2      	lsls	r2, r2, #31
 800678e:	d501      	bpl.n	8006794 <_printf_float+0x16c>
 8006790:	3301      	adds	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006798:	2b00      	cmp	r3, #0
 800679a:	d09c      	beq.n	80066d6 <_printf_float+0xae>
 800679c:	232d      	movs	r3, #45	; 0x2d
 800679e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a2:	e798      	b.n	80066d6 <_printf_float+0xae>
 80067a4:	9a06      	ldr	r2, [sp, #24]
 80067a6:	2a47      	cmp	r2, #71	; 0x47
 80067a8:	d1be      	bne.n	8006728 <_printf_float+0x100>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1bc      	bne.n	8006728 <_printf_float+0x100>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7b9      	b.n	8006726 <_printf_float+0xfe>
 80067b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067b6:	d118      	bne.n	80067ea <_printf_float+0x1c2>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	6863      	ldr	r3, [r4, #4]
 80067bc:	dd0b      	ble.n	80067d6 <_printf_float+0x1ae>
 80067be:	6121      	str	r1, [r4, #16]
 80067c0:	b913      	cbnz	r3, 80067c8 <_printf_float+0x1a0>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d502      	bpl.n	80067ce <_printf_float+0x1a6>
 80067c8:	3301      	adds	r3, #1
 80067ca:	440b      	add	r3, r1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	e7de      	b.n	8006794 <_printf_float+0x16c>
 80067d6:	b913      	cbnz	r3, 80067de <_printf_float+0x1b6>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	07d2      	lsls	r2, r2, #31
 80067dc:	d501      	bpl.n	80067e2 <_printf_float+0x1ba>
 80067de:	3302      	adds	r3, #2
 80067e0:	e7f4      	b.n	80067cc <_printf_float+0x1a4>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7f2      	b.n	80067cc <_printf_float+0x1a4>
 80067e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	4299      	cmp	r1, r3
 80067ee:	db05      	blt.n	80067fc <_printf_float+0x1d4>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	6121      	str	r1, [r4, #16]
 80067f4:	07d8      	lsls	r0, r3, #31
 80067f6:	d5ea      	bpl.n	80067ce <_printf_float+0x1a6>
 80067f8:	1c4b      	adds	r3, r1, #1
 80067fa:	e7e7      	b.n	80067cc <_printf_float+0x1a4>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	bfd4      	ite	le
 8006800:	f1c1 0202 	rsble	r2, r1, #2
 8006804:	2201      	movgt	r2, #1
 8006806:	4413      	add	r3, r2
 8006808:	e7e0      	b.n	80067cc <_printf_float+0x1a4>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	055a      	lsls	r2, r3, #21
 800680e:	d407      	bmi.n	8006820 <_printf_float+0x1f8>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	4642      	mov	r2, r8
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	d12c      	bne.n	8006878 <_printf_float+0x250>
 800681e:	e764      	b.n	80066ea <_printf_float+0xc2>
 8006820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006824:	f240 80e0 	bls.w	80069e8 <_printf_float+0x3c0>
 8006828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	f7fa f972 	bl	8000b18 <__aeabi_dcmpeq>
 8006834:	2800      	cmp	r0, #0
 8006836:	d034      	beq.n	80068a2 <_printf_float+0x27a>
 8006838:	4a37      	ldr	r2, [pc, #220]	; (8006918 <_printf_float+0x2f0>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af51 	beq.w	80066ea <_printf_float+0xc2>
 8006848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800684c:	429a      	cmp	r2, r3
 800684e:	db02      	blt.n	8006856 <_printf_float+0x22e>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d8      	lsls	r0, r3, #31
 8006854:	d510      	bpl.n	8006878 <_printf_float+0x250>
 8006856:	ee18 3a10 	vmov	r3, s16
 800685a:	4652      	mov	r2, sl
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af41 	beq.w	80066ea <_printf_float+0xc2>
 8006868:	f04f 0800 	mov.w	r8, #0
 800686c:	f104 091a 	add.w	r9, r4, #26
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	4543      	cmp	r3, r8
 8006876:	dc09      	bgt.n	800688c <_printf_float+0x264>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	f100 8105 	bmi.w	8006a8a <_printf_float+0x462>
 8006880:	68e0      	ldr	r0, [r4, #12]
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	4298      	cmp	r0, r3
 8006886:	bfb8      	it	lt
 8006888:	4618      	movlt	r0, r3
 800688a:	e730      	b.n	80066ee <_printf_float+0xc6>
 800688c:	2301      	movs	r3, #1
 800688e:	464a      	mov	r2, r9
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f af27 	beq.w	80066ea <_printf_float+0xc2>
 800689c:	f108 0801 	add.w	r8, r8, #1
 80068a0:	e7e6      	b.n	8006870 <_printf_float+0x248>
 80068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc39      	bgt.n	800691c <_printf_float+0x2f4>
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <_printf_float+0x2f0>)
 80068aa:	2301      	movs	r3, #1
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f af19 	beq.w	80066ea <_printf_float+0xc2>
 80068b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068bc:	4313      	orrs	r3, r2
 80068be:	d102      	bne.n	80068c6 <_printf_float+0x29e>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07d9      	lsls	r1, r3, #31
 80068c4:	d5d8      	bpl.n	8006878 <_printf_float+0x250>
 80068c6:	ee18 3a10 	vmov	r3, s16
 80068ca:	4652      	mov	r2, sl
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af09 	beq.w	80066ea <_printf_float+0xc2>
 80068d8:	f04f 0900 	mov.w	r9, #0
 80068dc:	f104 0a1a 	add.w	sl, r4, #26
 80068e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e2:	425b      	negs	r3, r3
 80068e4:	454b      	cmp	r3, r9
 80068e6:	dc01      	bgt.n	80068ec <_printf_float+0x2c4>
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	e792      	b.n	8006812 <_printf_float+0x1ea>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4652      	mov	r2, sl
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f aef7 	beq.w	80066ea <_printf_float+0xc2>
 80068fc:	f109 0901 	add.w	r9, r9, #1
 8006900:	e7ee      	b.n	80068e0 <_printf_float+0x2b8>
 8006902:	bf00      	nop
 8006904:	7fefffff 	.word	0x7fefffff
 8006908:	08009400 	.word	0x08009400
 800690c:	08009404 	.word	0x08009404
 8006910:	0800940c 	.word	0x0800940c
 8006914:	08009408 	.word	0x08009408
 8006918:	08009410 	.word	0x08009410
 800691c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006920:	429a      	cmp	r2, r3
 8006922:	bfa8      	it	ge
 8006924:	461a      	movge	r2, r3
 8006926:	2a00      	cmp	r2, #0
 8006928:	4691      	mov	r9, r2
 800692a:	dc37      	bgt.n	800699c <_printf_float+0x374>
 800692c:	f04f 0b00 	mov.w	fp, #0
 8006930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006934:	f104 021a 	add.w	r2, r4, #26
 8006938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	eba3 0309 	sub.w	r3, r3, r9
 8006940:	455b      	cmp	r3, fp
 8006942:	dc33      	bgt.n	80069ac <_printf_float+0x384>
 8006944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006948:	429a      	cmp	r2, r3
 800694a:	db3b      	blt.n	80069c4 <_printf_float+0x39c>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d438      	bmi.n	80069c4 <_printf_float+0x39c>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006958:	1a9a      	subs	r2, r3, r2
 800695a:	eba3 0901 	sub.w	r9, r3, r1
 800695e:	4591      	cmp	r9, r2
 8006960:	bfa8      	it	ge
 8006962:	4691      	movge	r9, r2
 8006964:	f1b9 0f00 	cmp.w	r9, #0
 8006968:	dc35      	bgt.n	80069d6 <_printf_float+0x3ae>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006972:	f104 0a1a 	add.w	sl, r4, #26
 8006976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	eba3 0309 	sub.w	r3, r3, r9
 8006980:	4543      	cmp	r3, r8
 8006982:	f77f af79 	ble.w	8006878 <_printf_float+0x250>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f aeaa 	beq.w	80066ea <_printf_float+0xc2>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	e7ec      	b.n	8006976 <_printf_float+0x34e>
 800699c:	4613      	mov	r3, r2
 800699e:	4631      	mov	r1, r6
 80069a0:	4642      	mov	r2, r8
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	d1c0      	bne.n	800692c <_printf_float+0x304>
 80069aa:	e69e      	b.n	80066ea <_printf_float+0xc2>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	9205      	str	r2, [sp, #20]
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f ae97 	beq.w	80066ea <_printf_float+0xc2>
 80069bc:	9a05      	ldr	r2, [sp, #20]
 80069be:	f10b 0b01 	add.w	fp, fp, #1
 80069c2:	e7b9      	b.n	8006938 <_printf_float+0x310>
 80069c4:	ee18 3a10 	vmov	r3, s16
 80069c8:	4652      	mov	r2, sl
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1be      	bne.n	8006952 <_printf_float+0x32a>
 80069d4:	e689      	b.n	80066ea <_printf_float+0xc2>
 80069d6:	9a05      	ldr	r2, [sp, #20]
 80069d8:	464b      	mov	r3, r9
 80069da:	4442      	add	r2, r8
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	d1c1      	bne.n	800696a <_printf_float+0x342>
 80069e6:	e680      	b.n	80066ea <_printf_float+0xc2>
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	dc01      	bgt.n	80069f2 <_printf_float+0x3ca>
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d538      	bpl.n	8006a64 <_printf_float+0x43c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae74 	beq.w	80066ea <_printf_float+0xc2>
 8006a02:	ee18 3a10 	vmov	r3, s16
 8006a06:	4652      	mov	r2, sl
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f ae6b 	beq.w	80066ea <_printf_float+0xc2>
 8006a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f7fa f87c 	bl	8000b18 <__aeabi_dcmpeq>
 8006a20:	b9d8      	cbnz	r0, 8006a5a <_printf_float+0x432>
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	f108 0201 	add.w	r2, r8, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d10e      	bne.n	8006a52 <_printf_float+0x42a>
 8006a34:	e659      	b.n	80066ea <_printf_float+0xc2>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f ae52 	beq.w	80066ea <_printf_float+0xc2>
 8006a46:	f108 0801 	add.w	r8, r8, #1
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4543      	cmp	r3, r8
 8006a50:	dcf1      	bgt.n	8006a36 <_printf_float+0x40e>
 8006a52:	464b      	mov	r3, r9
 8006a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a58:	e6dc      	b.n	8006814 <_printf_float+0x1ec>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 0a1a 	add.w	sl, r4, #26
 8006a62:	e7f2      	b.n	8006a4a <_printf_float+0x422>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4642      	mov	r2, r8
 8006a68:	e7df      	b.n	8006a2a <_printf_float+0x402>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	464a      	mov	r2, r9
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae38 	beq.w	80066ea <_printf_float+0xc2>
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dcf0      	bgt.n	8006a6a <_printf_float+0x442>
 8006a88:	e6fa      	b.n	8006880 <_printf_float+0x258>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 0919 	add.w	r9, r4, #25
 8006a92:	e7f4      	b.n	8006a7e <_printf_float+0x456>

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bfb8      	it	lt
 8006aa8:	4613      	movlt	r3, r2
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc26      	bgt.n	8006b2a <_printf_common+0x96>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42b      	bmi.n	8006b44 <_printf_common+0xb0>
 8006aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d01e      	beq.n	8006b38 <_printf_common+0xa4>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	68e5      	ldr	r5, [r4, #12]
 8006afe:	6832      	ldr	r2, [r6, #0]
 8006b00:	f003 0306 	and.w	r3, r3, #6
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	bf08      	it	eq
 8006b08:	1aad      	subeq	r5, r5, r2
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	bf0c      	ite	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	2500      	movne	r5, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfc4      	itt	gt
 8006b1a:	1a9b      	subgt	r3, r3, r2
 8006b1c:	18ed      	addgt	r5, r5, r3
 8006b1e:	2600      	movs	r6, #0
 8006b20:	341a      	adds	r4, #26
 8006b22:	42b5      	cmp	r5, r6
 8006b24:	d11a      	bne.n	8006b5c <_printf_common+0xc8>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e008      	b.n	8006b3c <_printf_common+0xa8>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4638      	mov	r0, r7
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d103      	bne.n	8006b40 <_printf_common+0xac>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7c6      	b.n	8006ad2 <_printf_common+0x3e>
 8006b44:	18e1      	adds	r1, r4, r3
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4e:	4422      	add	r2, r4
 8006b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b58:	3302      	adds	r3, #2
 8006b5a:	e7c7      	b.n	8006aec <_printf_common+0x58>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4649      	mov	r1, r9
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa4>
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7d9      	b.n	8006b22 <_printf_common+0x8e>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	7e0f      	ldrb	r7, [r1, #24]
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	2f78      	cmp	r7, #120	; 0x78
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	469a      	mov	sl, r3
 8006b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b86:	d807      	bhi.n	8006b98 <_printf_i+0x28>
 8006b88:	2f62      	cmp	r7, #98	; 0x62
 8006b8a:	d80a      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	f000 80d8 	beq.w	8006d42 <_printf_i+0x1d2>
 8006b92:	2f58      	cmp	r7, #88	; 0x58
 8006b94:	f000 80a3 	beq.w	8006cde <_printf_i+0x16e>
 8006b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba0:	e03a      	b.n	8006c18 <_printf_i+0xa8>
 8006ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba6:	2b15      	cmp	r3, #21
 8006ba8:	d8f6      	bhi.n	8006b98 <_printf_i+0x28>
 8006baa:	a101      	add	r1, pc, #4	; (adr r1, 8006bb0 <_printf_i+0x40>)
 8006bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006b99 	.word	0x08006b99
 8006bbc:	08006b99 	.word	0x08006b99
 8006bc0:	08006b99 	.word	0x08006b99
 8006bc4:	08006b99 	.word	0x08006b99
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006b99 	.word	0x08006b99
 8006bd0:	08006b99 	.word	0x08006b99
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006d29 	.word	0x08006d29
 8006be0:	08006c4d 	.word	0x08006c4d
 8006be4:	08006d0b 	.word	0x08006d0b
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d4b 	.word	0x08006d4b
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006d13 	.word	0x08006d13
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0a3      	b.n	8006d64 <_printf_i+0x1f4>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	6829      	ldr	r1, [r5, #0]
 8006c20:	0606      	lsls	r6, r0, #24
 8006c22:	f101 0304 	add.w	r3, r1, #4
 8006c26:	d50a      	bpl.n	8006c3e <_printf_i+0xce>
 8006c28:	680e      	ldr	r6, [r1, #0]
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	da03      	bge.n	8006c38 <_printf_i+0xc8>
 8006c30:	232d      	movs	r3, #45	; 0x2d
 8006c32:	4276      	negs	r6, r6
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	485e      	ldr	r0, [pc, #376]	; (8006db4 <_printf_i+0x244>)
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e019      	b.n	8006c72 <_printf_i+0x102>
 8006c3e:	680e      	ldr	r6, [r1, #0]
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c46:	bf18      	it	ne
 8006c48:	b236      	sxthne	r6, r6
 8006c4a:	e7ef      	b.n	8006c2c <_printf_i+0xbc>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	6029      	str	r1, [r5, #0]
 8006c54:	0601      	lsls	r1, r0, #24
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0xec>
 8006c58:	681e      	ldr	r6, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <_printf_i+0xf2>
 8006c5c:	0646      	lsls	r6, r0, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0xe8>
 8006c60:	881e      	ldrh	r6, [r3, #0]
 8006c62:	4854      	ldr	r0, [pc, #336]	; (8006db4 <_printf_i+0x244>)
 8006c64:	2f6f      	cmp	r7, #111	; 0x6f
 8006c66:	bf0c      	ite	eq
 8006c68:	2308      	moveq	r3, #8
 8006c6a:	230a      	movne	r3, #10
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c72:	6865      	ldr	r5, [r4, #4]
 8006c74:	60a5      	str	r5, [r4, #8]
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	bfa2      	ittt	ge
 8006c7a:	6821      	ldrge	r1, [r4, #0]
 8006c7c:	f021 0104 	bicge.w	r1, r1, #4
 8006c80:	6021      	strge	r1, [r4, #0]
 8006c82:	b90e      	cbnz	r6, 8006c88 <_printf_i+0x118>
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	d04d      	beq.n	8006d24 <_printf_i+0x1b4>
 8006c88:	4615      	mov	r5, r2
 8006c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c92:	5dc7      	ldrb	r7, [r0, r7]
 8006c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c98:	4637      	mov	r7, r6
 8006c9a:	42bb      	cmp	r3, r7
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d9f4      	bls.n	8006c8a <_printf_i+0x11a>
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d10b      	bne.n	8006cbc <_printf_i+0x14c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07de      	lsls	r6, r3, #31
 8006ca8:	d508      	bpl.n	8006cbc <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	bfde      	ittt	le
 8006cb2:	2330      	movle	r3, #48	; 0x30
 8006cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	6122      	str	r2, [r4, #16]
 8006cc0:	f8cd a000 	str.w	sl, [sp]
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	aa03      	add	r2, sp, #12
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff fee2 	bl	8006a94 <_printf_common>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d14c      	bne.n	8006d6e <_printf_i+0x1fe>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	b004      	add	sp, #16
 8006cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cde:	4835      	ldr	r0, [pc, #212]	; (8006db4 <_printf_i+0x244>)
 8006ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cec:	6029      	str	r1, [r5, #0]
 8006cee:	061d      	lsls	r5, r3, #24
 8006cf0:	d514      	bpl.n	8006d1c <_printf_i+0x1ac>
 8006cf2:	07df      	lsls	r7, r3, #31
 8006cf4:	bf44      	itt	mi
 8006cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfa:	6023      	strmi	r3, [r4, #0]
 8006cfc:	b91e      	cbnz	r6, 8006d06 <_printf_i+0x196>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f023 0320 	bic.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	2310      	movs	r3, #16
 8006d08:	e7b0      	b.n	8006c6c <_printf_i+0xfc>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	2378      	movs	r3, #120	; 0x78
 8006d14:	4828      	ldr	r0, [pc, #160]	; (8006db8 <_printf_i+0x248>)
 8006d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d1a:	e7e3      	b.n	8006ce4 <_printf_i+0x174>
 8006d1c:	0659      	lsls	r1, r3, #25
 8006d1e:	bf48      	it	mi
 8006d20:	b2b6      	uxthmi	r6, r6
 8006d22:	e7e6      	b.n	8006cf2 <_printf_i+0x182>
 8006d24:	4615      	mov	r5, r2
 8006d26:	e7bb      	b.n	8006ca0 <_printf_i+0x130>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	6826      	ldr	r6, [r4, #0]
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	1d18      	adds	r0, r3, #4
 8006d30:	6028      	str	r0, [r5, #0]
 8006d32:	0635      	lsls	r5, r6, #24
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	d501      	bpl.n	8006d3c <_printf_i+0x1cc>
 8006d38:	6019      	str	r1, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <_printf_i+0x1d2>
 8006d3c:	0670      	lsls	r0, r6, #25
 8006d3e:	d5fb      	bpl.n	8006d38 <_printf_i+0x1c8>
 8006d40:	8019      	strh	r1, [r3, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	4615      	mov	r5, r2
 8006d48:	e7ba      	b.n	8006cc0 <_printf_i+0x150>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	681d      	ldr	r5, [r3, #0]
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7f9 fa6a 	bl	8000230 <memchr>
 8006d5c:	b108      	cbz	r0, 8006d62 <_printf_i+0x1f2>
 8006d5e:	1b40      	subs	r0, r0, r5
 8006d60:	6060      	str	r0, [r4, #4]
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	2300      	movs	r3, #0
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	e7a8      	b.n	8006cc0 <_printf_i+0x150>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	462a      	mov	r2, r5
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0ab      	beq.n	8006cd4 <_printf_i+0x164>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d413      	bmi.n	8006daa <_printf_i+0x23a>
 8006d82:	68e0      	ldr	r0, [r4, #12]
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	4298      	cmp	r0, r3
 8006d88:	bfb8      	it	lt
 8006d8a:	4618      	movlt	r0, r3
 8006d8c:	e7a4      	b.n	8006cd8 <_printf_i+0x168>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4632      	mov	r2, r6
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d09b      	beq.n	8006cd4 <_printf_i+0x164>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	1a5b      	subs	r3, r3, r1
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dcf2      	bgt.n	8006d8e <_printf_i+0x21e>
 8006da8:	e7eb      	b.n	8006d82 <_printf_i+0x212>
 8006daa:	2500      	movs	r5, #0
 8006dac:	f104 0619 	add.w	r6, r4, #25
 8006db0:	e7f5      	b.n	8006d9e <_printf_i+0x22e>
 8006db2:	bf00      	nop
 8006db4:	08009412 	.word	0x08009412
 8006db8:	08009423 	.word	0x08009423

08006dbc <siprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b500      	push	{lr}
 8006dc0:	b09c      	sub	sp, #112	; 0x70
 8006dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9006      	str	r0, [sp, #24]
 8006dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dcc:	4809      	ldr	r0, [pc, #36]	; (8006df4 <siprintf+0x38>)
 8006dce:	9107      	str	r1, [sp, #28]
 8006dd0:	9104      	str	r1, [sp, #16]
 8006dd2:	4909      	ldr	r1, [pc, #36]	; (8006df8 <siprintf+0x3c>)
 8006dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd8:	9105      	str	r1, [sp, #20]
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	a902      	add	r1, sp, #8
 8006de0:	f001 fb78 	bl	80084d4 <_svfiprintf_r>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	b01c      	add	sp, #112	; 0x70
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b003      	add	sp, #12
 8006df2:	4770      	bx	lr
 8006df4:	20000010 	.word	0x20000010
 8006df8:	ffff0208 	.word	0xffff0208

08006dfc <quorem>:
 8006dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	6903      	ldr	r3, [r0, #16]
 8006e02:	690c      	ldr	r4, [r1, #16]
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	4607      	mov	r7, r0
 8006e08:	f2c0 8081 	blt.w	8006f0e <quorem+0x112>
 8006e0c:	3c01      	subs	r4, #1
 8006e0e:	f101 0814 	add.w	r8, r1, #20
 8006e12:	f100 0514 	add.w	r5, r0, #20
 8006e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e24:	3301      	adds	r3, #1
 8006e26:	429a      	cmp	r2, r3
 8006e28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e30:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e34:	d331      	bcc.n	8006e9a <quorem+0x9e>
 8006e36:	f04f 0e00 	mov.w	lr, #0
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	46ac      	mov	ip, r5
 8006e3e:	46f2      	mov	sl, lr
 8006e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e44:	b293      	uxth	r3, r2
 8006e46:	fb06 e303 	mla	r3, r6, r3, lr
 8006e4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ebaa 0303 	sub.w	r3, sl, r3
 8006e54:	f8dc a000 	ldr.w	sl, [ip]
 8006e58:	0c12      	lsrs	r2, r2, #16
 8006e5a:	fa13 f38a 	uxtah	r3, r3, sl
 8006e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	9b00      	ldr	r3, [sp, #0]
 8006e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e6a:	b292      	uxth	r2, r2
 8006e6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e74:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e78:	4581      	cmp	r9, r0
 8006e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7e:	f84c 3b04 	str.w	r3, [ip], #4
 8006e82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e86:	d2db      	bcs.n	8006e40 <quorem+0x44>
 8006e88:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e8c:	b92b      	cbnz	r3, 8006e9a <quorem+0x9e>
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	429d      	cmp	r5, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	d32e      	bcc.n	8006ef6 <quorem+0xfa>
 8006e98:	613c      	str	r4, [r7, #16]
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f001 f8c6 	bl	800802c <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	db24      	blt.n	8006eee <quorem+0xf2>
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f04f 0c00 	mov.w	ip, #0
 8006eac:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8006eb4:	b293      	uxth	r3, r2
 8006eb6:	ebac 0303 	sub.w	r3, ip, r3
 8006eba:	0c12      	lsrs	r2, r2, #16
 8006ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8006ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ece:	45c1      	cmp	r9, r8
 8006ed0:	f840 3b04 	str.w	r3, [r0], #4
 8006ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ed8:	d2e8      	bcs.n	8006eac <quorem+0xb0>
 8006eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee2:	b922      	cbnz	r2, 8006eee <quorem+0xf2>
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	429d      	cmp	r5, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	d30a      	bcc.n	8006f02 <quorem+0x106>
 8006eec:	613c      	str	r4, [r7, #16]
 8006eee:	4630      	mov	r0, r6
 8006ef0:	b003      	add	sp, #12
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d1cc      	bne.n	8006e98 <quorem+0x9c>
 8006efe:	3c01      	subs	r4, #1
 8006f00:	e7c7      	b.n	8006e92 <quorem+0x96>
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d1f0      	bne.n	8006eec <quorem+0xf0>
 8006f0a:	3c01      	subs	r4, #1
 8006f0c:	e7eb      	b.n	8006ee6 <quorem+0xea>
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e7ee      	b.n	8006ef0 <quorem+0xf4>
 8006f12:	0000      	movs	r0, r0
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <_dtoa_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	ed2d 8b04 	vpush	{d8-d9}
 8006f20:	ec57 6b10 	vmov	r6, r7, d0
 8006f24:	b093      	sub	sp, #76	; 0x4c
 8006f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f2c:	9106      	str	r1, [sp, #24]
 8006f2e:	ee10 aa10 	vmov	sl, s0
 8006f32:	4604      	mov	r4, r0
 8006f34:	9209      	str	r2, [sp, #36]	; 0x24
 8006f36:	930c      	str	r3, [sp, #48]	; 0x30
 8006f38:	46bb      	mov	fp, r7
 8006f3a:	b975      	cbnz	r5, 8006f5a <_dtoa_r+0x42>
 8006f3c:	2010      	movs	r0, #16
 8006f3e:	f000 fddd 	bl	8007afc <malloc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6260      	str	r0, [r4, #36]	; 0x24
 8006f46:	b920      	cbnz	r0, 8006f52 <_dtoa_r+0x3a>
 8006f48:	4ba7      	ldr	r3, [pc, #668]	; (80071e8 <_dtoa_r+0x2d0>)
 8006f4a:	21ea      	movs	r1, #234	; 0xea
 8006f4c:	48a7      	ldr	r0, [pc, #668]	; (80071ec <_dtoa_r+0x2d4>)
 8006f4e:	f001 fbd1 	bl	80086f4 <__assert_func>
 8006f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f56:	6005      	str	r5, [r0, #0]
 8006f58:	60c5      	str	r5, [r0, #12]
 8006f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	b151      	cbz	r1, 8006f76 <_dtoa_r+0x5e>
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	604a      	str	r2, [r1, #4]
 8006f64:	2301      	movs	r3, #1
 8006f66:	4093      	lsls	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fe1c 	bl	8007ba8 <_Bfree>
 8006f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	1e3b      	subs	r3, r7, #0
 8006f78:	bfaa      	itet	ge
 8006f7a:	2300      	movge	r3, #0
 8006f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f80:	f8c8 3000 	strge.w	r3, [r8]
 8006f84:	4b9a      	ldr	r3, [pc, #616]	; (80071f0 <_dtoa_r+0x2d8>)
 8006f86:	bfbc      	itt	lt
 8006f88:	2201      	movlt	r2, #1
 8006f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8006f8e:	ea33 030b 	bics.w	r3, r3, fp
 8006f92:	d11b      	bne.n	8006fcc <_dtoa_r+0xb4>
 8006f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fa0:	4333      	orrs	r3, r6
 8006fa2:	f000 8592 	beq.w	8007aca <_dtoa_r+0xbb2>
 8006fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa8:	b963      	cbnz	r3, 8006fc4 <_dtoa_r+0xac>
 8006faa:	4b92      	ldr	r3, [pc, #584]	; (80071f4 <_dtoa_r+0x2dc>)
 8006fac:	e022      	b.n	8006ff4 <_dtoa_r+0xdc>
 8006fae:	4b92      	ldr	r3, [pc, #584]	; (80071f8 <_dtoa_r+0x2e0>)
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	9801      	ldr	r0, [sp, #4]
 8006fba:	b013      	add	sp, #76	; 0x4c
 8006fbc:	ecbd 8b04 	vpop	{d8-d9}
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	4b8b      	ldr	r3, [pc, #556]	; (80071f4 <_dtoa_r+0x2dc>)
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	e7f3      	b.n	8006fb4 <_dtoa_r+0x9c>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	f7f9 fda0 	bl	8000b18 <__aeabi_dcmpeq>
 8006fd8:	ec4b ab19 	vmov	d9, sl, fp
 8006fdc:	4680      	mov	r8, r0
 8006fde:	b158      	cbz	r0, 8006ff8 <_dtoa_r+0xe0>
 8006fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 856b 	beq.w	8007ac4 <_dtoa_r+0xbac>
 8006fee:	4883      	ldr	r0, [pc, #524]	; (80071fc <_dtoa_r+0x2e4>)
 8006ff0:	6018      	str	r0, [r3, #0]
 8006ff2:	1e43      	subs	r3, r0, #1
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	e7df      	b.n	8006fb8 <_dtoa_r+0xa0>
 8006ff8:	ec4b ab10 	vmov	d0, sl, fp
 8006ffc:	aa10      	add	r2, sp, #64	; 0x40
 8006ffe:	a911      	add	r1, sp, #68	; 0x44
 8007000:	4620      	mov	r0, r4
 8007002:	f001 f8b9 	bl	8008178 <__d2b>
 8007006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800700a:	ee08 0a10 	vmov	s16, r0
 800700e:	2d00      	cmp	r5, #0
 8007010:	f000 8084 	beq.w	800711c <_dtoa_r+0x204>
 8007014:	ee19 3a90 	vmov	r3, s19
 8007018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800701c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007020:	4656      	mov	r6, sl
 8007022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800702a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800702e:	4b74      	ldr	r3, [pc, #464]	; (8007200 <_dtoa_r+0x2e8>)
 8007030:	2200      	movs	r2, #0
 8007032:	4630      	mov	r0, r6
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 f94f 	bl	80002d8 <__aeabi_dsub>
 800703a:	a365      	add	r3, pc, #404	; (adr r3, 80071d0 <_dtoa_r+0x2b8>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 fb02 	bl	8000648 <__aeabi_dmul>
 8007044:	a364      	add	r3, pc, #400	; (adr r3, 80071d8 <_dtoa_r+0x2c0>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 f947 	bl	80002dc <__adddf3>
 800704e:	4606      	mov	r6, r0
 8007050:	4628      	mov	r0, r5
 8007052:	460f      	mov	r7, r1
 8007054:	f7f9 fa8e 	bl	8000574 <__aeabi_i2d>
 8007058:	a361      	add	r3, pc, #388	; (adr r3, 80071e0 <_dtoa_r+0x2c8>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 faf3 	bl	8000648 <__aeabi_dmul>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 f937 	bl	80002dc <__adddf3>
 800706e:	4606      	mov	r6, r0
 8007070:	460f      	mov	r7, r1
 8007072:	f7f9 fd99 	bl	8000ba8 <__aeabi_d2iz>
 8007076:	2200      	movs	r2, #0
 8007078:	9000      	str	r0, [sp, #0]
 800707a:	2300      	movs	r3, #0
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 fd54 	bl	8000b2c <__aeabi_dcmplt>
 8007084:	b150      	cbz	r0, 800709c <_dtoa_r+0x184>
 8007086:	9800      	ldr	r0, [sp, #0]
 8007088:	f7f9 fa74 	bl	8000574 <__aeabi_i2d>
 800708c:	4632      	mov	r2, r6
 800708e:	463b      	mov	r3, r7
 8007090:	f7f9 fd42 	bl	8000b18 <__aeabi_dcmpeq>
 8007094:	b910      	cbnz	r0, 800709c <_dtoa_r+0x184>
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	3b01      	subs	r3, #1
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	9b00      	ldr	r3, [sp, #0]
 800709e:	2b16      	cmp	r3, #22
 80070a0:	d85a      	bhi.n	8007158 <_dtoa_r+0x240>
 80070a2:	9a00      	ldr	r2, [sp, #0]
 80070a4:	4b57      	ldr	r3, [pc, #348]	; (8007204 <_dtoa_r+0x2ec>)
 80070a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	ec51 0b19 	vmov	r0, r1, d9
 80070b2:	f7f9 fd3b 	bl	8000b2c <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d050      	beq.n	800715c <_dtoa_r+0x244>
 80070ba:	9b00      	ldr	r3, [sp, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070c6:	1b5d      	subs	r5, r3, r5
 80070c8:	1e6b      	subs	r3, r5, #1
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	bf45      	ittet	mi
 80070ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80070d2:	9304      	strmi	r3, [sp, #16]
 80070d4:	2300      	movpl	r3, #0
 80070d6:	2300      	movmi	r3, #0
 80070d8:	bf4c      	ite	mi
 80070da:	9305      	strmi	r3, [sp, #20]
 80070dc:	9304      	strpl	r3, [sp, #16]
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db3d      	blt.n	8007160 <_dtoa_r+0x248>
 80070e4:	9b05      	ldr	r3, [sp, #20]
 80070e6:	9a00      	ldr	r2, [sp, #0]
 80070e8:	920a      	str	r2, [sp, #40]	; 0x28
 80070ea:	4413      	add	r3, r2
 80070ec:	9305      	str	r3, [sp, #20]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	9b06      	ldr	r3, [sp, #24]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	f200 8089 	bhi.w	800720c <_dtoa_r+0x2f4>
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	bfc4      	itt	gt
 80070fe:	3b04      	subgt	r3, #4
 8007100:	9306      	strgt	r3, [sp, #24]
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	f1a3 0302 	sub.w	r3, r3, #2
 8007108:	bfcc      	ite	gt
 800710a:	2500      	movgt	r5, #0
 800710c:	2501      	movle	r5, #1
 800710e:	2b03      	cmp	r3, #3
 8007110:	f200 8087 	bhi.w	8007222 <_dtoa_r+0x30a>
 8007114:	e8df f003 	tbb	[pc, r3]
 8007118:	59383a2d 	.word	0x59383a2d
 800711c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007120:	441d      	add	r5, r3
 8007122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007126:	2b20      	cmp	r3, #32
 8007128:	bfc1      	itttt	gt
 800712a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800712e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007132:	fa0b f303 	lslgt.w	r3, fp, r3
 8007136:	fa26 f000 	lsrgt.w	r0, r6, r0
 800713a:	bfda      	itte	le
 800713c:	f1c3 0320 	rsble	r3, r3, #32
 8007140:	fa06 f003 	lslle.w	r0, r6, r3
 8007144:	4318      	orrgt	r0, r3
 8007146:	f7f9 fa05 	bl	8000554 <__aeabi_ui2d>
 800714a:	2301      	movs	r3, #1
 800714c:	4606      	mov	r6, r0
 800714e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007152:	3d01      	subs	r5, #1
 8007154:	930e      	str	r3, [sp, #56]	; 0x38
 8007156:	e76a      	b.n	800702e <_dtoa_r+0x116>
 8007158:	2301      	movs	r3, #1
 800715a:	e7b2      	b.n	80070c2 <_dtoa_r+0x1aa>
 800715c:	900b      	str	r0, [sp, #44]	; 0x2c
 800715e:	e7b1      	b.n	80070c4 <_dtoa_r+0x1ac>
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	9a00      	ldr	r2, [sp, #0]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	4253      	negs	r3, r2
 800716a:	9307      	str	r3, [sp, #28]
 800716c:	2300      	movs	r3, #0
 800716e:	930a      	str	r3, [sp, #40]	; 0x28
 8007170:	e7bf      	b.n	80070f2 <_dtoa_r+0x1da>
 8007172:	2300      	movs	r3, #0
 8007174:	9308      	str	r3, [sp, #32]
 8007176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc55      	bgt.n	8007228 <_dtoa_r+0x310>
 800717c:	2301      	movs	r3, #1
 800717e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007182:	461a      	mov	r2, r3
 8007184:	9209      	str	r2, [sp, #36]	; 0x24
 8007186:	e00c      	b.n	80071a2 <_dtoa_r+0x28a>
 8007188:	2301      	movs	r3, #1
 800718a:	e7f3      	b.n	8007174 <_dtoa_r+0x25c>
 800718c:	2300      	movs	r3, #0
 800718e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	4413      	add	r3, r2
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	3301      	adds	r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	9303      	str	r3, [sp, #12]
 800719e:	bfb8      	it	lt
 80071a0:	2301      	movlt	r3, #1
 80071a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071a4:	2200      	movs	r2, #0
 80071a6:	6042      	str	r2, [r0, #4]
 80071a8:	2204      	movs	r2, #4
 80071aa:	f102 0614 	add.w	r6, r2, #20
 80071ae:	429e      	cmp	r6, r3
 80071b0:	6841      	ldr	r1, [r0, #4]
 80071b2:	d93d      	bls.n	8007230 <_dtoa_r+0x318>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fcb7 	bl	8007b28 <_Balloc>
 80071ba:	9001      	str	r0, [sp, #4]
 80071bc:	2800      	cmp	r0, #0
 80071be:	d13b      	bne.n	8007238 <_dtoa_r+0x320>
 80071c0:	4b11      	ldr	r3, [pc, #68]	; (8007208 <_dtoa_r+0x2f0>)
 80071c2:	4602      	mov	r2, r0
 80071c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071c8:	e6c0      	b.n	8006f4c <_dtoa_r+0x34>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7df      	b.n	800718e <_dtoa_r+0x276>
 80071ce:	bf00      	nop
 80071d0:	636f4361 	.word	0x636f4361
 80071d4:	3fd287a7 	.word	0x3fd287a7
 80071d8:	8b60c8b3 	.word	0x8b60c8b3
 80071dc:	3fc68a28 	.word	0x3fc68a28
 80071e0:	509f79fb 	.word	0x509f79fb
 80071e4:	3fd34413 	.word	0x3fd34413
 80071e8:	08009441 	.word	0x08009441
 80071ec:	08009458 	.word	0x08009458
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	0800943d 	.word	0x0800943d
 80071f8:	08009434 	.word	0x08009434
 80071fc:	08009411 	.word	0x08009411
 8007200:	3ff80000 	.word	0x3ff80000
 8007204:	08009548 	.word	0x08009548
 8007208:	080094b3 	.word	0x080094b3
 800720c:	2501      	movs	r5, #1
 800720e:	2300      	movs	r3, #0
 8007210:	9306      	str	r3, [sp, #24]
 8007212:	9508      	str	r5, [sp, #32]
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
 8007218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	2312      	movs	r3, #18
 8007220:	e7b0      	b.n	8007184 <_dtoa_r+0x26c>
 8007222:	2301      	movs	r3, #1
 8007224:	9308      	str	r3, [sp, #32]
 8007226:	e7f5      	b.n	8007214 <_dtoa_r+0x2fc>
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800722e:	e7b8      	b.n	80071a2 <_dtoa_r+0x28a>
 8007230:	3101      	adds	r1, #1
 8007232:	6041      	str	r1, [r0, #4]
 8007234:	0052      	lsls	r2, r2, #1
 8007236:	e7b8      	b.n	80071aa <_dtoa_r+0x292>
 8007238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800723a:	9a01      	ldr	r2, [sp, #4]
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	2b0e      	cmp	r3, #14
 8007242:	f200 809d 	bhi.w	8007380 <_dtoa_r+0x468>
 8007246:	2d00      	cmp	r5, #0
 8007248:	f000 809a 	beq.w	8007380 <_dtoa_r+0x468>
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd32      	ble.n	80072b8 <_dtoa_r+0x3a0>
 8007252:	4ab7      	ldr	r2, [pc, #732]	; (8007530 <_dtoa_r+0x618>)
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800725c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	05d8      	lsls	r0, r3, #23
 8007264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007268:	d516      	bpl.n	8007298 <_dtoa_r+0x380>
 800726a:	4bb2      	ldr	r3, [pc, #712]	; (8007534 <_dtoa_r+0x61c>)
 800726c:	ec51 0b19 	vmov	r0, r1, d9
 8007270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007274:	f7f9 fb12 	bl	800089c <__aeabi_ddiv>
 8007278:	f007 070f 	and.w	r7, r7, #15
 800727c:	4682      	mov	sl, r0
 800727e:	468b      	mov	fp, r1
 8007280:	2503      	movs	r5, #3
 8007282:	4eac      	ldr	r6, [pc, #688]	; (8007534 <_dtoa_r+0x61c>)
 8007284:	b957      	cbnz	r7, 800729c <_dtoa_r+0x384>
 8007286:	4642      	mov	r2, r8
 8007288:	464b      	mov	r3, r9
 800728a:	4650      	mov	r0, sl
 800728c:	4659      	mov	r1, fp
 800728e:	f7f9 fb05 	bl	800089c <__aeabi_ddiv>
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	e028      	b.n	80072ea <_dtoa_r+0x3d2>
 8007298:	2502      	movs	r5, #2
 800729a:	e7f2      	b.n	8007282 <_dtoa_r+0x36a>
 800729c:	07f9      	lsls	r1, r7, #31
 800729e:	d508      	bpl.n	80072b2 <_dtoa_r+0x39a>
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072a8:	f7f9 f9ce 	bl	8000648 <__aeabi_dmul>
 80072ac:	3501      	adds	r5, #1
 80072ae:	4680      	mov	r8, r0
 80072b0:	4689      	mov	r9, r1
 80072b2:	107f      	asrs	r7, r7, #1
 80072b4:	3608      	adds	r6, #8
 80072b6:	e7e5      	b.n	8007284 <_dtoa_r+0x36c>
 80072b8:	f000 809b 	beq.w	80073f2 <_dtoa_r+0x4da>
 80072bc:	9b00      	ldr	r3, [sp, #0]
 80072be:	4f9d      	ldr	r7, [pc, #628]	; (8007534 <_dtoa_r+0x61c>)
 80072c0:	425e      	negs	r6, r3
 80072c2:	4b9b      	ldr	r3, [pc, #620]	; (8007530 <_dtoa_r+0x618>)
 80072c4:	f006 020f 	and.w	r2, r6, #15
 80072c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	ec51 0b19 	vmov	r0, r1, d9
 80072d4:	f7f9 f9b8 	bl	8000648 <__aeabi_dmul>
 80072d8:	1136      	asrs	r6, r6, #4
 80072da:	4682      	mov	sl, r0
 80072dc:	468b      	mov	fp, r1
 80072de:	2300      	movs	r3, #0
 80072e0:	2502      	movs	r5, #2
 80072e2:	2e00      	cmp	r6, #0
 80072e4:	d17a      	bne.n	80073dc <_dtoa_r+0x4c4>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d3      	bne.n	8007292 <_dtoa_r+0x37a>
 80072ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8082 	beq.w	80073f6 <_dtoa_r+0x4de>
 80072f2:	4b91      	ldr	r3, [pc, #580]	; (8007538 <_dtoa_r+0x620>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	4650      	mov	r0, sl
 80072f8:	4659      	mov	r1, fp
 80072fa:	f7f9 fc17 	bl	8000b2c <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d079      	beq.n	80073f6 <_dtoa_r+0x4de>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d076      	beq.n	80073f6 <_dtoa_r+0x4de>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd36      	ble.n	800737c <_dtoa_r+0x464>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	4650      	mov	r0, sl
 8007312:	4659      	mov	r1, fp
 8007314:	1e5f      	subs	r7, r3, #1
 8007316:	2200      	movs	r2, #0
 8007318:	4b88      	ldr	r3, [pc, #544]	; (800753c <_dtoa_r+0x624>)
 800731a:	f7f9 f995 	bl	8000648 <__aeabi_dmul>
 800731e:	9e02      	ldr	r6, [sp, #8]
 8007320:	4682      	mov	sl, r0
 8007322:	468b      	mov	fp, r1
 8007324:	3501      	adds	r5, #1
 8007326:	4628      	mov	r0, r5
 8007328:	f7f9 f924 	bl	8000574 <__aeabi_i2d>
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	f7f9 f98a 	bl	8000648 <__aeabi_dmul>
 8007334:	4b82      	ldr	r3, [pc, #520]	; (8007540 <_dtoa_r+0x628>)
 8007336:	2200      	movs	r2, #0
 8007338:	f7f8 ffd0 	bl	80002dc <__adddf3>
 800733c:	46d0      	mov	r8, sl
 800733e:	46d9      	mov	r9, fp
 8007340:	4682      	mov	sl, r0
 8007342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007346:	2e00      	cmp	r6, #0
 8007348:	d158      	bne.n	80073fc <_dtoa_r+0x4e4>
 800734a:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <_dtoa_r+0x62c>)
 800734c:	2200      	movs	r2, #0
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	f7f8 ffc1 	bl	80002d8 <__aeabi_dsub>
 8007356:	4652      	mov	r2, sl
 8007358:	465b      	mov	r3, fp
 800735a:	4680      	mov	r8, r0
 800735c:	4689      	mov	r9, r1
 800735e:	f7f9 fc03 	bl	8000b68 <__aeabi_dcmpgt>
 8007362:	2800      	cmp	r0, #0
 8007364:	f040 8295 	bne.w	8007892 <_dtoa_r+0x97a>
 8007368:	4652      	mov	r2, sl
 800736a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f7f9 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	f040 8289 	bne.w	800788e <_dtoa_r+0x976>
 800737c:	ec5b ab19 	vmov	sl, fp, d9
 8007380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007382:	2b00      	cmp	r3, #0
 8007384:	f2c0 8148 	blt.w	8007618 <_dtoa_r+0x700>
 8007388:	9a00      	ldr	r2, [sp, #0]
 800738a:	2a0e      	cmp	r2, #14
 800738c:	f300 8144 	bgt.w	8007618 <_dtoa_r+0x700>
 8007390:	4b67      	ldr	r3, [pc, #412]	; (8007530 <_dtoa_r+0x618>)
 8007392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007396:	e9d3 8900 	ldrd	r8, r9, [r3]
 800739a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	f280 80d5 	bge.w	800754c <_dtoa_r+0x634>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f300 80d1 	bgt.w	800754c <_dtoa_r+0x634>
 80073aa:	f040 826f 	bne.w	800788c <_dtoa_r+0x974>
 80073ae:	4b65      	ldr	r3, [pc, #404]	; (8007544 <_dtoa_r+0x62c>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f9 f947 	bl	8000648 <__aeabi_dmul>
 80073ba:	4652      	mov	r2, sl
 80073bc:	465b      	mov	r3, fp
 80073be:	f7f9 fbc9 	bl	8000b54 <__aeabi_dcmpge>
 80073c2:	9e03      	ldr	r6, [sp, #12]
 80073c4:	4637      	mov	r7, r6
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f040 8245 	bne.w	8007856 <_dtoa_r+0x93e>
 80073cc:	9d01      	ldr	r5, [sp, #4]
 80073ce:	2331      	movs	r3, #49	; 0x31
 80073d0:	f805 3b01 	strb.w	r3, [r5], #1
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	e240      	b.n	800785e <_dtoa_r+0x946>
 80073dc:	07f2      	lsls	r2, r6, #31
 80073de:	d505      	bpl.n	80073ec <_dtoa_r+0x4d4>
 80073e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e4:	f7f9 f930 	bl	8000648 <__aeabi_dmul>
 80073e8:	3501      	adds	r5, #1
 80073ea:	2301      	movs	r3, #1
 80073ec:	1076      	asrs	r6, r6, #1
 80073ee:	3708      	adds	r7, #8
 80073f0:	e777      	b.n	80072e2 <_dtoa_r+0x3ca>
 80073f2:	2502      	movs	r5, #2
 80073f4:	e779      	b.n	80072ea <_dtoa_r+0x3d2>
 80073f6:	9f00      	ldr	r7, [sp, #0]
 80073f8:	9e03      	ldr	r6, [sp, #12]
 80073fa:	e794      	b.n	8007326 <_dtoa_r+0x40e>
 80073fc:	9901      	ldr	r1, [sp, #4]
 80073fe:	4b4c      	ldr	r3, [pc, #304]	; (8007530 <_dtoa_r+0x618>)
 8007400:	4431      	add	r1, r6
 8007402:	910d      	str	r1, [sp, #52]	; 0x34
 8007404:	9908      	ldr	r1, [sp, #32]
 8007406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800740a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800740e:	2900      	cmp	r1, #0
 8007410:	d043      	beq.n	800749a <_dtoa_r+0x582>
 8007412:	494d      	ldr	r1, [pc, #308]	; (8007548 <_dtoa_r+0x630>)
 8007414:	2000      	movs	r0, #0
 8007416:	f7f9 fa41 	bl	800089c <__aeabi_ddiv>
 800741a:	4652      	mov	r2, sl
 800741c:	465b      	mov	r3, fp
 800741e:	f7f8 ff5b 	bl	80002d8 <__aeabi_dsub>
 8007422:	9d01      	ldr	r5, [sp, #4]
 8007424:	4682      	mov	sl, r0
 8007426:	468b      	mov	fp, r1
 8007428:	4649      	mov	r1, r9
 800742a:	4640      	mov	r0, r8
 800742c:	f7f9 fbbc 	bl	8000ba8 <__aeabi_d2iz>
 8007430:	4606      	mov	r6, r0
 8007432:	f7f9 f89f 	bl	8000574 <__aeabi_i2d>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f8 ff4b 	bl	80002d8 <__aeabi_dsub>
 8007442:	3630      	adds	r6, #48	; 0x30
 8007444:	f805 6b01 	strb.w	r6, [r5], #1
 8007448:	4652      	mov	r2, sl
 800744a:	465b      	mov	r3, fp
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	f7f9 fb6c 	bl	8000b2c <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	d163      	bne.n	8007520 <_dtoa_r+0x608>
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	4936      	ldr	r1, [pc, #216]	; (8007538 <_dtoa_r+0x620>)
 800745e:	2000      	movs	r0, #0
 8007460:	f7f8 ff3a 	bl	80002d8 <__aeabi_dsub>
 8007464:	4652      	mov	r2, sl
 8007466:	465b      	mov	r3, fp
 8007468:	f7f9 fb60 	bl	8000b2c <__aeabi_dcmplt>
 800746c:	2800      	cmp	r0, #0
 800746e:	f040 80b5 	bne.w	80075dc <_dtoa_r+0x6c4>
 8007472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007474:	429d      	cmp	r5, r3
 8007476:	d081      	beq.n	800737c <_dtoa_r+0x464>
 8007478:	4b30      	ldr	r3, [pc, #192]	; (800753c <_dtoa_r+0x624>)
 800747a:	2200      	movs	r2, #0
 800747c:	4650      	mov	r0, sl
 800747e:	4659      	mov	r1, fp
 8007480:	f7f9 f8e2 	bl	8000648 <__aeabi_dmul>
 8007484:	4b2d      	ldr	r3, [pc, #180]	; (800753c <_dtoa_r+0x624>)
 8007486:	4682      	mov	sl, r0
 8007488:	468b      	mov	fp, r1
 800748a:	4640      	mov	r0, r8
 800748c:	4649      	mov	r1, r9
 800748e:	2200      	movs	r2, #0
 8007490:	f7f9 f8da 	bl	8000648 <__aeabi_dmul>
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	e7c6      	b.n	8007428 <_dtoa_r+0x510>
 800749a:	4650      	mov	r0, sl
 800749c:	4659      	mov	r1, fp
 800749e:	f7f9 f8d3 	bl	8000648 <__aeabi_dmul>
 80074a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a4:	9d01      	ldr	r5, [sp, #4]
 80074a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074a8:	4682      	mov	sl, r0
 80074aa:	468b      	mov	fp, r1
 80074ac:	4649      	mov	r1, r9
 80074ae:	4640      	mov	r0, r8
 80074b0:	f7f9 fb7a 	bl	8000ba8 <__aeabi_d2iz>
 80074b4:	4606      	mov	r6, r0
 80074b6:	f7f9 f85d 	bl	8000574 <__aeabi_i2d>
 80074ba:	3630      	adds	r6, #48	; 0x30
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4640      	mov	r0, r8
 80074c2:	4649      	mov	r1, r9
 80074c4:	f7f8 ff08 	bl	80002d8 <__aeabi_dsub>
 80074c8:	f805 6b01 	strb.w	r6, [r5], #1
 80074cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ce:	429d      	cmp	r5, r3
 80074d0:	4680      	mov	r8, r0
 80074d2:	4689      	mov	r9, r1
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	d124      	bne.n	8007524 <_dtoa_r+0x60c>
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <_dtoa_r+0x630>)
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	f7f8 fefc 	bl	80002dc <__adddf3>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f9 fb3c 	bl	8000b68 <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d173      	bne.n	80075dc <_dtoa_r+0x6c4>
 80074f4:	4652      	mov	r2, sl
 80074f6:	465b      	mov	r3, fp
 80074f8:	4913      	ldr	r1, [pc, #76]	; (8007548 <_dtoa_r+0x630>)
 80074fa:	2000      	movs	r0, #0
 80074fc:	f7f8 feec 	bl	80002d8 <__aeabi_dsub>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4640      	mov	r0, r8
 8007506:	4649      	mov	r1, r9
 8007508:	f7f9 fb10 	bl	8000b2c <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f af35 	beq.w	800737c <_dtoa_r+0x464>
 8007512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007514:	1e6b      	subs	r3, r5, #1
 8007516:	930f      	str	r3, [sp, #60]	; 0x3c
 8007518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d0f8      	beq.n	8007512 <_dtoa_r+0x5fa>
 8007520:	9700      	str	r7, [sp, #0]
 8007522:	e049      	b.n	80075b8 <_dtoa_r+0x6a0>
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <_dtoa_r+0x624>)
 8007526:	f7f9 f88f 	bl	8000648 <__aeabi_dmul>
 800752a:	4680      	mov	r8, r0
 800752c:	4689      	mov	r9, r1
 800752e:	e7bd      	b.n	80074ac <_dtoa_r+0x594>
 8007530:	08009548 	.word	0x08009548
 8007534:	08009520 	.word	0x08009520
 8007538:	3ff00000 	.word	0x3ff00000
 800753c:	40240000 	.word	0x40240000
 8007540:	401c0000 	.word	0x401c0000
 8007544:	40140000 	.word	0x40140000
 8007548:	3fe00000 	.word	0x3fe00000
 800754c:	9d01      	ldr	r5, [sp, #4]
 800754e:	4656      	mov	r6, sl
 8007550:	465f      	mov	r7, fp
 8007552:	4642      	mov	r2, r8
 8007554:	464b      	mov	r3, r9
 8007556:	4630      	mov	r0, r6
 8007558:	4639      	mov	r1, r7
 800755a:	f7f9 f99f 	bl	800089c <__aeabi_ddiv>
 800755e:	f7f9 fb23 	bl	8000ba8 <__aeabi_d2iz>
 8007562:	4682      	mov	sl, r0
 8007564:	f7f9 f806 	bl	8000574 <__aeabi_i2d>
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	f7f9 f86c 	bl	8000648 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800757c:	f7f8 feac 	bl	80002d8 <__aeabi_dsub>
 8007580:	f805 6b01 	strb.w	r6, [r5], #1
 8007584:	9e01      	ldr	r6, [sp, #4]
 8007586:	9f03      	ldr	r7, [sp, #12]
 8007588:	1bae      	subs	r6, r5, r6
 800758a:	42b7      	cmp	r7, r6
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	d135      	bne.n	80075fe <_dtoa_r+0x6e6>
 8007592:	f7f8 fea3 	bl	80002dc <__adddf3>
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	f7f9 fae3 	bl	8000b68 <__aeabi_dcmpgt>
 80075a2:	b9d0      	cbnz	r0, 80075da <_dtoa_r+0x6c2>
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 fab4 	bl	8000b18 <__aeabi_dcmpeq>
 80075b0:	b110      	cbz	r0, 80075b8 <_dtoa_r+0x6a0>
 80075b2:	f01a 0f01 	tst.w	sl, #1
 80075b6:	d110      	bne.n	80075da <_dtoa_r+0x6c2>
 80075b8:	4620      	mov	r0, r4
 80075ba:	ee18 1a10 	vmov	r1, s16
 80075be:	f000 faf3 	bl	8007ba8 <_Bfree>
 80075c2:	2300      	movs	r3, #0
 80075c4:	9800      	ldr	r0, [sp, #0]
 80075c6:	702b      	strb	r3, [r5, #0]
 80075c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ca:	3001      	adds	r0, #1
 80075cc:	6018      	str	r0, [r3, #0]
 80075ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f43f acf1 	beq.w	8006fb8 <_dtoa_r+0xa0>
 80075d6:	601d      	str	r5, [r3, #0]
 80075d8:	e4ee      	b.n	8006fb8 <_dtoa_r+0xa0>
 80075da:	9f00      	ldr	r7, [sp, #0]
 80075dc:	462b      	mov	r3, r5
 80075de:	461d      	mov	r5, r3
 80075e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e4:	2a39      	cmp	r2, #57	; 0x39
 80075e6:	d106      	bne.n	80075f6 <_dtoa_r+0x6de>
 80075e8:	9a01      	ldr	r2, [sp, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d1f7      	bne.n	80075de <_dtoa_r+0x6c6>
 80075ee:	9901      	ldr	r1, [sp, #4]
 80075f0:	2230      	movs	r2, #48	; 0x30
 80075f2:	3701      	adds	r7, #1
 80075f4:	700a      	strb	r2, [r1, #0]
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	3201      	adds	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e790      	b.n	8007520 <_dtoa_r+0x608>
 80075fe:	4ba6      	ldr	r3, [pc, #664]	; (8007898 <_dtoa_r+0x980>)
 8007600:	2200      	movs	r2, #0
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	f7f9 fa83 	bl	8000b18 <__aeabi_dcmpeq>
 8007612:	2800      	cmp	r0, #0
 8007614:	d09d      	beq.n	8007552 <_dtoa_r+0x63a>
 8007616:	e7cf      	b.n	80075b8 <_dtoa_r+0x6a0>
 8007618:	9a08      	ldr	r2, [sp, #32]
 800761a:	2a00      	cmp	r2, #0
 800761c:	f000 80d7 	beq.w	80077ce <_dtoa_r+0x8b6>
 8007620:	9a06      	ldr	r2, [sp, #24]
 8007622:	2a01      	cmp	r2, #1
 8007624:	f300 80ba 	bgt.w	800779c <_dtoa_r+0x884>
 8007628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800762a:	2a00      	cmp	r2, #0
 800762c:	f000 80b2 	beq.w	8007794 <_dtoa_r+0x87c>
 8007630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007634:	9e07      	ldr	r6, [sp, #28]
 8007636:	9d04      	ldr	r5, [sp, #16]
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	441a      	add	r2, r3
 800763c:	9204      	str	r2, [sp, #16]
 800763e:	9a05      	ldr	r2, [sp, #20]
 8007640:	2101      	movs	r1, #1
 8007642:	441a      	add	r2, r3
 8007644:	4620      	mov	r0, r4
 8007646:	9205      	str	r2, [sp, #20]
 8007648:	f000 fb66 	bl	8007d18 <__i2b>
 800764c:	4607      	mov	r7, r0
 800764e:	2d00      	cmp	r5, #0
 8007650:	dd0c      	ble.n	800766c <_dtoa_r+0x754>
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd09      	ble.n	800766c <_dtoa_r+0x754>
 8007658:	42ab      	cmp	r3, r5
 800765a:	9a04      	ldr	r2, [sp, #16]
 800765c:	bfa8      	it	ge
 800765e:	462b      	movge	r3, r5
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	9204      	str	r2, [sp, #16]
 8007664:	9a05      	ldr	r2, [sp, #20]
 8007666:	1aed      	subs	r5, r5, r3
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	b31b      	cbz	r3, 80076b8 <_dtoa_r+0x7a0>
 8007670:	9b08      	ldr	r3, [sp, #32]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80af 	beq.w	80077d6 <_dtoa_r+0x8be>
 8007678:	2e00      	cmp	r6, #0
 800767a:	dd13      	ble.n	80076a4 <_dtoa_r+0x78c>
 800767c:	4639      	mov	r1, r7
 800767e:	4632      	mov	r2, r6
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fc09 	bl	8007e98 <__pow5mult>
 8007686:	ee18 2a10 	vmov	r2, s16
 800768a:	4601      	mov	r1, r0
 800768c:	4607      	mov	r7, r0
 800768e:	4620      	mov	r0, r4
 8007690:	f000 fb58 	bl	8007d44 <__multiply>
 8007694:	ee18 1a10 	vmov	r1, s16
 8007698:	4680      	mov	r8, r0
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fa84 	bl	8007ba8 <_Bfree>
 80076a0:	ee08 8a10 	vmov	s16, r8
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	1b9a      	subs	r2, r3, r6
 80076a8:	d006      	beq.n	80076b8 <_dtoa_r+0x7a0>
 80076aa:	ee18 1a10 	vmov	r1, s16
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fbf2 	bl	8007e98 <__pow5mult>
 80076b4:	ee08 0a10 	vmov	s16, r0
 80076b8:	2101      	movs	r1, #1
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fb2c 	bl	8007d18 <__i2b>
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	4606      	mov	r6, r0
 80076c6:	f340 8088 	ble.w	80077da <_dtoa_r+0x8c2>
 80076ca:	461a      	mov	r2, r3
 80076cc:	4601      	mov	r1, r0
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fbe2 	bl	8007e98 <__pow5mult>
 80076d4:	9b06      	ldr	r3, [sp, #24]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	4606      	mov	r6, r0
 80076da:	f340 8081 	ble.w	80077e0 <_dtoa_r+0x8c8>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	6933      	ldr	r3, [r6, #16]
 80076e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076e8:	6918      	ldr	r0, [r3, #16]
 80076ea:	f000 fac5 	bl	8007c78 <__hi0bits>
 80076ee:	f1c0 0020 	rsb	r0, r0, #32
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	4418      	add	r0, r3
 80076f6:	f010 001f 	ands.w	r0, r0, #31
 80076fa:	f000 8092 	beq.w	8007822 <_dtoa_r+0x90a>
 80076fe:	f1c0 0320 	rsb	r3, r0, #32
 8007702:	2b04      	cmp	r3, #4
 8007704:	f340 808a 	ble.w	800781c <_dtoa_r+0x904>
 8007708:	f1c0 001c 	rsb	r0, r0, #28
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	4403      	add	r3, r0
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	9b05      	ldr	r3, [sp, #20]
 8007714:	4403      	add	r3, r0
 8007716:	4405      	add	r5, r0
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd07      	ble.n	8007730 <_dtoa_r+0x818>
 8007720:	ee18 1a10 	vmov	r1, s16
 8007724:	461a      	mov	r2, r3
 8007726:	4620      	mov	r0, r4
 8007728:	f000 fc10 	bl	8007f4c <__lshift>
 800772c:	ee08 0a10 	vmov	s16, r0
 8007730:	9b05      	ldr	r3, [sp, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dd05      	ble.n	8007742 <_dtoa_r+0x82a>
 8007736:	4631      	mov	r1, r6
 8007738:	461a      	mov	r2, r3
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fc06 	bl	8007f4c <__lshift>
 8007740:	4606      	mov	r6, r0
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d06e      	beq.n	8007826 <_dtoa_r+0x90e>
 8007748:	ee18 0a10 	vmov	r0, s16
 800774c:	4631      	mov	r1, r6
 800774e:	f000 fc6d 	bl	800802c <__mcmp>
 8007752:	2800      	cmp	r0, #0
 8007754:	da67      	bge.n	8007826 <_dtoa_r+0x90e>
 8007756:	9b00      	ldr	r3, [sp, #0]
 8007758:	3b01      	subs	r3, #1
 800775a:	ee18 1a10 	vmov	r1, s16
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	220a      	movs	r2, #10
 8007762:	2300      	movs	r3, #0
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fa41 	bl	8007bec <__multadd>
 800776a:	9b08      	ldr	r3, [sp, #32]
 800776c:	ee08 0a10 	vmov	s16, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 81b1 	beq.w	8007ad8 <_dtoa_r+0xbc0>
 8007776:	2300      	movs	r3, #0
 8007778:	4639      	mov	r1, r7
 800777a:	220a      	movs	r2, #10
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fa35 	bl	8007bec <__multadd>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	4607      	mov	r7, r0
 8007788:	f300 808e 	bgt.w	80078a8 <_dtoa_r+0x990>
 800778c:	9b06      	ldr	r3, [sp, #24]
 800778e:	2b02      	cmp	r3, #2
 8007790:	dc51      	bgt.n	8007836 <_dtoa_r+0x91e>
 8007792:	e089      	b.n	80078a8 <_dtoa_r+0x990>
 8007794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800779a:	e74b      	b.n	8007634 <_dtoa_r+0x71c>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	1e5e      	subs	r6, r3, #1
 80077a0:	9b07      	ldr	r3, [sp, #28]
 80077a2:	42b3      	cmp	r3, r6
 80077a4:	bfbf      	itttt	lt
 80077a6:	9b07      	ldrlt	r3, [sp, #28]
 80077a8:	9607      	strlt	r6, [sp, #28]
 80077aa:	1af2      	sublt	r2, r6, r3
 80077ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077ae:	bfb6      	itet	lt
 80077b0:	189b      	addlt	r3, r3, r2
 80077b2:	1b9e      	subge	r6, r3, r6
 80077b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	bfb8      	it	lt
 80077ba:	2600      	movlt	r6, #0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfb7      	itett	lt
 80077c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80077c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80077c8:	1a9d      	sublt	r5, r3, r2
 80077ca:	2300      	movlt	r3, #0
 80077cc:	e734      	b.n	8007638 <_dtoa_r+0x720>
 80077ce:	9e07      	ldr	r6, [sp, #28]
 80077d0:	9d04      	ldr	r5, [sp, #16]
 80077d2:	9f08      	ldr	r7, [sp, #32]
 80077d4:	e73b      	b.n	800764e <_dtoa_r+0x736>
 80077d6:	9a07      	ldr	r2, [sp, #28]
 80077d8:	e767      	b.n	80076aa <_dtoa_r+0x792>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	dc18      	bgt.n	8007812 <_dtoa_r+0x8fa>
 80077e0:	f1ba 0f00 	cmp.w	sl, #0
 80077e4:	d115      	bne.n	8007812 <_dtoa_r+0x8fa>
 80077e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ea:	b993      	cbnz	r3, 8007812 <_dtoa_r+0x8fa>
 80077ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077f0:	0d1b      	lsrs	r3, r3, #20
 80077f2:	051b      	lsls	r3, r3, #20
 80077f4:	b183      	cbz	r3, 8007818 <_dtoa_r+0x900>
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	3301      	adds	r3, #1
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	f04f 0801 	mov.w	r8, #1
 8007806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f af6a 	bne.w	80076e2 <_dtoa_r+0x7ca>
 800780e:	2001      	movs	r0, #1
 8007810:	e76f      	b.n	80076f2 <_dtoa_r+0x7da>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	e7f6      	b.n	8007806 <_dtoa_r+0x8ee>
 8007818:	4698      	mov	r8, r3
 800781a:	e7f4      	b.n	8007806 <_dtoa_r+0x8ee>
 800781c:	f43f af7d 	beq.w	800771a <_dtoa_r+0x802>
 8007820:	4618      	mov	r0, r3
 8007822:	301c      	adds	r0, #28
 8007824:	e772      	b.n	800770c <_dtoa_r+0x7f4>
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	dc37      	bgt.n	800789c <_dtoa_r+0x984>
 800782c:	9b06      	ldr	r3, [sp, #24]
 800782e:	2b02      	cmp	r3, #2
 8007830:	dd34      	ble.n	800789c <_dtoa_r+0x984>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	9302      	str	r3, [sp, #8]
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	b96b      	cbnz	r3, 8007856 <_dtoa_r+0x93e>
 800783a:	4631      	mov	r1, r6
 800783c:	2205      	movs	r2, #5
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f9d4 	bl	8007bec <__multadd>
 8007844:	4601      	mov	r1, r0
 8007846:	4606      	mov	r6, r0
 8007848:	ee18 0a10 	vmov	r0, s16
 800784c:	f000 fbee 	bl	800802c <__mcmp>
 8007850:	2800      	cmp	r0, #0
 8007852:	f73f adbb 	bgt.w	80073cc <_dtoa_r+0x4b4>
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	9d01      	ldr	r5, [sp, #4]
 800785a:	43db      	mvns	r3, r3
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	4631      	mov	r1, r6
 8007864:	4620      	mov	r0, r4
 8007866:	f000 f99f 	bl	8007ba8 <_Bfree>
 800786a:	2f00      	cmp	r7, #0
 800786c:	f43f aea4 	beq.w	80075b8 <_dtoa_r+0x6a0>
 8007870:	f1b8 0f00 	cmp.w	r8, #0
 8007874:	d005      	beq.n	8007882 <_dtoa_r+0x96a>
 8007876:	45b8      	cmp	r8, r7
 8007878:	d003      	beq.n	8007882 <_dtoa_r+0x96a>
 800787a:	4641      	mov	r1, r8
 800787c:	4620      	mov	r0, r4
 800787e:	f000 f993 	bl	8007ba8 <_Bfree>
 8007882:	4639      	mov	r1, r7
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f98f 	bl	8007ba8 <_Bfree>
 800788a:	e695      	b.n	80075b8 <_dtoa_r+0x6a0>
 800788c:	2600      	movs	r6, #0
 800788e:	4637      	mov	r7, r6
 8007890:	e7e1      	b.n	8007856 <_dtoa_r+0x93e>
 8007892:	9700      	str	r7, [sp, #0]
 8007894:	4637      	mov	r7, r6
 8007896:	e599      	b.n	80073cc <_dtoa_r+0x4b4>
 8007898:	40240000 	.word	0x40240000
 800789c:	9b08      	ldr	r3, [sp, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80ca 	beq.w	8007a38 <_dtoa_r+0xb20>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	9302      	str	r3, [sp, #8]
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	dd05      	ble.n	80078b8 <_dtoa_r+0x9a0>
 80078ac:	4639      	mov	r1, r7
 80078ae:	462a      	mov	r2, r5
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fb4b 	bl	8007f4c <__lshift>
 80078b6:	4607      	mov	r7, r0
 80078b8:	f1b8 0f00 	cmp.w	r8, #0
 80078bc:	d05b      	beq.n	8007976 <_dtoa_r+0xa5e>
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 f931 	bl	8007b28 <_Balloc>
 80078c6:	4605      	mov	r5, r0
 80078c8:	b928      	cbnz	r0, 80078d6 <_dtoa_r+0x9be>
 80078ca:	4b87      	ldr	r3, [pc, #540]	; (8007ae8 <_dtoa_r+0xbd0>)
 80078cc:	4602      	mov	r2, r0
 80078ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078d2:	f7ff bb3b 	b.w	8006f4c <_dtoa_r+0x34>
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	3202      	adds	r2, #2
 80078da:	0092      	lsls	r2, r2, #2
 80078dc:	f107 010c 	add.w	r1, r7, #12
 80078e0:	300c      	adds	r0, #12
 80078e2:	f000 f913 	bl	8007b0c <memcpy>
 80078e6:	2201      	movs	r2, #1
 80078e8:	4629      	mov	r1, r5
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fb2e 	bl	8007f4c <__lshift>
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	f103 0901 	add.w	r9, r3, #1
 80078f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078fa:	4413      	add	r3, r2
 80078fc:	9305      	str	r3, [sp, #20]
 80078fe:	f00a 0301 	and.w	r3, sl, #1
 8007902:	46b8      	mov	r8, r7
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	4607      	mov	r7, r0
 8007908:	4631      	mov	r1, r6
 800790a:	ee18 0a10 	vmov	r0, s16
 800790e:	f7ff fa75 	bl	8006dfc <quorem>
 8007912:	4641      	mov	r1, r8
 8007914:	9002      	str	r0, [sp, #8]
 8007916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800791a:	ee18 0a10 	vmov	r0, s16
 800791e:	f000 fb85 	bl	800802c <__mcmp>
 8007922:	463a      	mov	r2, r7
 8007924:	9003      	str	r0, [sp, #12]
 8007926:	4631      	mov	r1, r6
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fb9b 	bl	8008064 <__mdiff>
 800792e:	68c2      	ldr	r2, [r0, #12]
 8007930:	f109 3bff 	add.w	fp, r9, #4294967295
 8007934:	4605      	mov	r5, r0
 8007936:	bb02      	cbnz	r2, 800797a <_dtoa_r+0xa62>
 8007938:	4601      	mov	r1, r0
 800793a:	ee18 0a10 	vmov	r0, s16
 800793e:	f000 fb75 	bl	800802c <__mcmp>
 8007942:	4602      	mov	r2, r0
 8007944:	4629      	mov	r1, r5
 8007946:	4620      	mov	r0, r4
 8007948:	9207      	str	r2, [sp, #28]
 800794a:	f000 f92d 	bl	8007ba8 <_Bfree>
 800794e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007952:	ea43 0102 	orr.w	r1, r3, r2
 8007956:	9b04      	ldr	r3, [sp, #16]
 8007958:	430b      	orrs	r3, r1
 800795a:	464d      	mov	r5, r9
 800795c:	d10f      	bne.n	800797e <_dtoa_r+0xa66>
 800795e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007962:	d02a      	beq.n	80079ba <_dtoa_r+0xaa2>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dd02      	ble.n	8007970 <_dtoa_r+0xa58>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007970:	f88b a000 	strb.w	sl, [fp]
 8007974:	e775      	b.n	8007862 <_dtoa_r+0x94a>
 8007976:	4638      	mov	r0, r7
 8007978:	e7ba      	b.n	80078f0 <_dtoa_r+0x9d8>
 800797a:	2201      	movs	r2, #1
 800797c:	e7e2      	b.n	8007944 <_dtoa_r+0xa2c>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db04      	blt.n	800798e <_dtoa_r+0xa76>
 8007984:	9906      	ldr	r1, [sp, #24]
 8007986:	430b      	orrs	r3, r1
 8007988:	9904      	ldr	r1, [sp, #16]
 800798a:	430b      	orrs	r3, r1
 800798c:	d122      	bne.n	80079d4 <_dtoa_r+0xabc>
 800798e:	2a00      	cmp	r2, #0
 8007990:	ddee      	ble.n	8007970 <_dtoa_r+0xa58>
 8007992:	ee18 1a10 	vmov	r1, s16
 8007996:	2201      	movs	r2, #1
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fad7 	bl	8007f4c <__lshift>
 800799e:	4631      	mov	r1, r6
 80079a0:	ee08 0a10 	vmov	s16, r0
 80079a4:	f000 fb42 	bl	800802c <__mcmp>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dc03      	bgt.n	80079b4 <_dtoa_r+0xa9c>
 80079ac:	d1e0      	bne.n	8007970 <_dtoa_r+0xa58>
 80079ae:	f01a 0f01 	tst.w	sl, #1
 80079b2:	d0dd      	beq.n	8007970 <_dtoa_r+0xa58>
 80079b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079b8:	d1d7      	bne.n	800796a <_dtoa_r+0xa52>
 80079ba:	2339      	movs	r3, #57	; 0x39
 80079bc:	f88b 3000 	strb.w	r3, [fp]
 80079c0:	462b      	mov	r3, r5
 80079c2:	461d      	mov	r5, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079ca:	2a39      	cmp	r2, #57	; 0x39
 80079cc:	d071      	beq.n	8007ab2 <_dtoa_r+0xb9a>
 80079ce:	3201      	adds	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e746      	b.n	8007862 <_dtoa_r+0x94a>
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	dd07      	ble.n	80079e8 <_dtoa_r+0xad0>
 80079d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079dc:	d0ed      	beq.n	80079ba <_dtoa_r+0xaa2>
 80079de:	f10a 0301 	add.w	r3, sl, #1
 80079e2:	f88b 3000 	strb.w	r3, [fp]
 80079e6:	e73c      	b.n	8007862 <_dtoa_r+0x94a>
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079ee:	4599      	cmp	r9, r3
 80079f0:	d047      	beq.n	8007a82 <_dtoa_r+0xb6a>
 80079f2:	ee18 1a10 	vmov	r1, s16
 80079f6:	2300      	movs	r3, #0
 80079f8:	220a      	movs	r2, #10
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 f8f6 	bl	8007bec <__multadd>
 8007a00:	45b8      	cmp	r8, r7
 8007a02:	ee08 0a10 	vmov	s16, r0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	f04f 020a 	mov.w	r2, #10
 8007a0e:	4641      	mov	r1, r8
 8007a10:	4620      	mov	r0, r4
 8007a12:	d106      	bne.n	8007a22 <_dtoa_r+0xb0a>
 8007a14:	f000 f8ea 	bl	8007bec <__multadd>
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4607      	mov	r7, r0
 8007a1c:	f109 0901 	add.w	r9, r9, #1
 8007a20:	e772      	b.n	8007908 <_dtoa_r+0x9f0>
 8007a22:	f000 f8e3 	bl	8007bec <__multadd>
 8007a26:	4639      	mov	r1, r7
 8007a28:	4680      	mov	r8, r0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	220a      	movs	r2, #10
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 f8dc 	bl	8007bec <__multadd>
 8007a34:	4607      	mov	r7, r0
 8007a36:	e7f1      	b.n	8007a1c <_dtoa_r+0xb04>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	9302      	str	r3, [sp, #8]
 8007a3c:	9d01      	ldr	r5, [sp, #4]
 8007a3e:	ee18 0a10 	vmov	r0, s16
 8007a42:	4631      	mov	r1, r6
 8007a44:	f7ff f9da 	bl	8006dfc <quorem>
 8007a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007a52:	1aea      	subs	r2, r5, r3
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	dd09      	ble.n	8007a6e <_dtoa_r+0xb56>
 8007a5a:	ee18 1a10 	vmov	r1, s16
 8007a5e:	2300      	movs	r3, #0
 8007a60:	220a      	movs	r2, #10
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f8c2 	bl	8007bec <__multadd>
 8007a68:	ee08 0a10 	vmov	s16, r0
 8007a6c:	e7e7      	b.n	8007a3e <_dtoa_r+0xb26>
 8007a6e:	9b02      	ldr	r3, [sp, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfc8      	it	gt
 8007a74:	461d      	movgt	r5, r3
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	bfd8      	it	le
 8007a7a:	2501      	movle	r5, #1
 8007a7c:	441d      	add	r5, r3
 8007a7e:	f04f 0800 	mov.w	r8, #0
 8007a82:	ee18 1a10 	vmov	r1, s16
 8007a86:	2201      	movs	r2, #1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fa5f 	bl	8007f4c <__lshift>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	ee08 0a10 	vmov	s16, r0
 8007a94:	f000 faca 	bl	800802c <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dc91      	bgt.n	80079c0 <_dtoa_r+0xaa8>
 8007a9c:	d102      	bne.n	8007aa4 <_dtoa_r+0xb8c>
 8007a9e:	f01a 0f01 	tst.w	sl, #1
 8007aa2:	d18d      	bne.n	80079c0 <_dtoa_r+0xaa8>
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aac:	2a30      	cmp	r2, #48	; 0x30
 8007aae:	d0fa      	beq.n	8007aa6 <_dtoa_r+0xb8e>
 8007ab0:	e6d7      	b.n	8007862 <_dtoa_r+0x94a>
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d184      	bne.n	80079c2 <_dtoa_r+0xaaa>
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2331      	movs	r3, #49	; 0x31
 8007ac0:	7013      	strb	r3, [r2, #0]
 8007ac2:	e6ce      	b.n	8007862 <_dtoa_r+0x94a>
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <_dtoa_r+0xbd4>)
 8007ac6:	f7ff ba95 	b.w	8006ff4 <_dtoa_r+0xdc>
 8007aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f47f aa6e 	bne.w	8006fae <_dtoa_r+0x96>
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <_dtoa_r+0xbd8>)
 8007ad4:	f7ff ba8e 	b.w	8006ff4 <_dtoa_r+0xdc>
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dcae      	bgt.n	8007a3c <_dtoa_r+0xb24>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	f73f aea8 	bgt.w	8007836 <_dtoa_r+0x91e>
 8007ae6:	e7a9      	b.n	8007a3c <_dtoa_r+0xb24>
 8007ae8:	080094b3 	.word	0x080094b3
 8007aec:	08009410 	.word	0x08009410
 8007af0:	08009434 	.word	0x08009434

08007af4 <_localeconv_r>:
 8007af4:	4800      	ldr	r0, [pc, #0]	; (8007af8 <_localeconv_r+0x4>)
 8007af6:	4770      	bx	lr
 8007af8:	20000164 	.word	0x20000164

08007afc <malloc>:
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <malloc+0xc>)
 8007afe:	4601      	mov	r1, r0
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f000 bc17 	b.w	8008334 <_malloc_r>
 8007b06:	bf00      	nop
 8007b08:	20000010 	.word	0x20000010

08007b0c <memcpy>:
 8007b0c:	440a      	add	r2, r1
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b14:	d100      	bne.n	8007b18 <memcpy+0xc>
 8007b16:	4770      	bx	lr
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b22:	4291      	cmp	r1, r2
 8007b24:	d1f9      	bne.n	8007b1a <memcpy+0xe>
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <_Balloc>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	b976      	cbnz	r6, 8007b50 <_Balloc+0x28>
 8007b32:	2010      	movs	r0, #16
 8007b34:	f7ff ffe2 	bl	8007afc <malloc>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b3c:	b920      	cbnz	r0, 8007b48 <_Balloc+0x20>
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <_Balloc+0x78>)
 8007b40:	4818      	ldr	r0, [pc, #96]	; (8007ba4 <_Balloc+0x7c>)
 8007b42:	2166      	movs	r1, #102	; 0x66
 8007b44:	f000 fdd6 	bl	80086f4 <__assert_func>
 8007b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b4c:	6006      	str	r6, [r0, #0]
 8007b4e:	60c6      	str	r6, [r0, #12]
 8007b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b52:	68f3      	ldr	r3, [r6, #12]
 8007b54:	b183      	cbz	r3, 8007b78 <_Balloc+0x50>
 8007b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b5e:	b9b8      	cbnz	r0, 8007b90 <_Balloc+0x68>
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f605 	lsl.w	r6, r1, r5
 8007b66:	1d72      	adds	r2, r6, #5
 8007b68:	0092      	lsls	r2, r2, #2
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fb60 	bl	8008230 <_calloc_r>
 8007b70:	b160      	cbz	r0, 8007b8c <_Balloc+0x64>
 8007b72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b76:	e00e      	b.n	8007b96 <_Balloc+0x6e>
 8007b78:	2221      	movs	r2, #33	; 0x21
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fb57 	bl	8008230 <_calloc_r>
 8007b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b84:	60f0      	str	r0, [r6, #12]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <_Balloc+0x2e>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	6802      	ldr	r2, [r0, #0]
 8007b92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b96:	2300      	movs	r3, #0
 8007b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b9c:	e7f7      	b.n	8007b8e <_Balloc+0x66>
 8007b9e:	bf00      	nop
 8007ba0:	08009441 	.word	0x08009441
 8007ba4:	080094c4 	.word	0x080094c4

08007ba8 <_Bfree>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	b976      	cbnz	r6, 8007bd0 <_Bfree+0x28>
 8007bb2:	2010      	movs	r0, #16
 8007bb4:	f7ff ffa2 	bl	8007afc <malloc>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6268      	str	r0, [r5, #36]	; 0x24
 8007bbc:	b920      	cbnz	r0, 8007bc8 <_Bfree+0x20>
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <_Bfree+0x3c>)
 8007bc0:	4809      	ldr	r0, [pc, #36]	; (8007be8 <_Bfree+0x40>)
 8007bc2:	218a      	movs	r1, #138	; 0x8a
 8007bc4:	f000 fd96 	bl	80086f4 <__assert_func>
 8007bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bcc:	6006      	str	r6, [r0, #0]
 8007bce:	60c6      	str	r6, [r0, #12]
 8007bd0:	b13c      	cbz	r4, 8007be2 <_Bfree+0x3a>
 8007bd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bd4:	6862      	ldr	r2, [r4, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bdc:	6021      	str	r1, [r4, #0]
 8007bde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	08009441 	.word	0x08009441
 8007be8:	080094c4 	.word	0x080094c4

08007bec <__multadd>:
 8007bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf0:	690d      	ldr	r5, [r1, #16]
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	461e      	mov	r6, r3
 8007bf8:	f101 0c14 	add.w	ip, r1, #20
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8007c02:	b299      	uxth	r1, r3
 8007c04:	fb02 6101 	mla	r1, r2, r1, r6
 8007c08:	0c1e      	lsrs	r6, r3, #16
 8007c0a:	0c0b      	lsrs	r3, r1, #16
 8007c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c10:	b289      	uxth	r1, r1
 8007c12:	3001      	adds	r0, #1
 8007c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c18:	4285      	cmp	r5, r0
 8007c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c22:	dcec      	bgt.n	8007bfe <__multadd+0x12>
 8007c24:	b30e      	cbz	r6, 8007c6a <__multadd+0x7e>
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dc19      	bgt.n	8007c60 <__multadd+0x74>
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	3101      	adds	r1, #1
 8007c32:	f7ff ff79 	bl	8007b28 <_Balloc>
 8007c36:	4680      	mov	r8, r0
 8007c38:	b928      	cbnz	r0, 8007c46 <__multadd+0x5a>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <__multadd+0x84>)
 8007c3e:	480d      	ldr	r0, [pc, #52]	; (8007c74 <__multadd+0x88>)
 8007c40:	21b5      	movs	r1, #181	; 0xb5
 8007c42:	f000 fd57 	bl	80086f4 <__assert_func>
 8007c46:	6922      	ldr	r2, [r4, #16]
 8007c48:	3202      	adds	r2, #2
 8007c4a:	f104 010c 	add.w	r1, r4, #12
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	300c      	adds	r0, #12
 8007c52:	f7ff ff5b 	bl	8007b0c <memcpy>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7ff ffa5 	bl	8007ba8 <_Bfree>
 8007c5e:	4644      	mov	r4, r8
 8007c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c64:	3501      	adds	r5, #1
 8007c66:	615e      	str	r6, [r3, #20]
 8007c68:	6125      	str	r5, [r4, #16]
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	080094b3 	.word	0x080094b3
 8007c74:	080094c4 	.word	0x080094c4

08007c78 <__hi0bits>:
 8007c78:	0c03      	lsrs	r3, r0, #16
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	b9d3      	cbnz	r3, 8007cb4 <__hi0bits+0x3c>
 8007c7e:	0400      	lsls	r0, r0, #16
 8007c80:	2310      	movs	r3, #16
 8007c82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c86:	bf04      	itt	eq
 8007c88:	0200      	lsleq	r0, r0, #8
 8007c8a:	3308      	addeq	r3, #8
 8007c8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c90:	bf04      	itt	eq
 8007c92:	0100      	lsleq	r0, r0, #4
 8007c94:	3304      	addeq	r3, #4
 8007c96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c9a:	bf04      	itt	eq
 8007c9c:	0080      	lsleq	r0, r0, #2
 8007c9e:	3302      	addeq	r3, #2
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	db05      	blt.n	8007cb0 <__hi0bits+0x38>
 8007ca4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ca8:	f103 0301 	add.w	r3, r3, #1
 8007cac:	bf08      	it	eq
 8007cae:	2320      	moveq	r3, #32
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	4770      	bx	lr
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e7e4      	b.n	8007c82 <__hi0bits+0xa>

08007cb8 <__lo0bits>:
 8007cb8:	6803      	ldr	r3, [r0, #0]
 8007cba:	f013 0207 	ands.w	r2, r3, #7
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	d00b      	beq.n	8007cda <__lo0bits+0x22>
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	d423      	bmi.n	8007d0e <__lo0bits+0x56>
 8007cc6:	0798      	lsls	r0, r3, #30
 8007cc8:	bf49      	itett	mi
 8007cca:	085b      	lsrmi	r3, r3, #1
 8007ccc:	089b      	lsrpl	r3, r3, #2
 8007cce:	2001      	movmi	r0, #1
 8007cd0:	600b      	strmi	r3, [r1, #0]
 8007cd2:	bf5c      	itt	pl
 8007cd4:	600b      	strpl	r3, [r1, #0]
 8007cd6:	2002      	movpl	r0, #2
 8007cd8:	4770      	bx	lr
 8007cda:	b298      	uxth	r0, r3
 8007cdc:	b9a8      	cbnz	r0, 8007d0a <__lo0bits+0x52>
 8007cde:	0c1b      	lsrs	r3, r3, #16
 8007ce0:	2010      	movs	r0, #16
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	b90a      	cbnz	r2, 8007cea <__lo0bits+0x32>
 8007ce6:	3008      	adds	r0, #8
 8007ce8:	0a1b      	lsrs	r3, r3, #8
 8007cea:	071a      	lsls	r2, r3, #28
 8007cec:	bf04      	itt	eq
 8007cee:	091b      	lsreq	r3, r3, #4
 8007cf0:	3004      	addeq	r0, #4
 8007cf2:	079a      	lsls	r2, r3, #30
 8007cf4:	bf04      	itt	eq
 8007cf6:	089b      	lsreq	r3, r3, #2
 8007cf8:	3002      	addeq	r0, #2
 8007cfa:	07da      	lsls	r2, r3, #31
 8007cfc:	d403      	bmi.n	8007d06 <__lo0bits+0x4e>
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	f100 0001 	add.w	r0, r0, #1
 8007d04:	d005      	beq.n	8007d12 <__lo0bits+0x5a>
 8007d06:	600b      	str	r3, [r1, #0]
 8007d08:	4770      	bx	lr
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	e7e9      	b.n	8007ce2 <__lo0bits+0x2a>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	4770      	bx	lr
 8007d12:	2020      	movs	r0, #32
 8007d14:	4770      	bx	lr
	...

08007d18 <__i2b>:
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	f7ff ff03 	bl	8007b28 <_Balloc>
 8007d22:	4602      	mov	r2, r0
 8007d24:	b928      	cbnz	r0, 8007d32 <__i2b+0x1a>
 8007d26:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <__i2b+0x24>)
 8007d28:	4805      	ldr	r0, [pc, #20]	; (8007d40 <__i2b+0x28>)
 8007d2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d2e:	f000 fce1 	bl	80086f4 <__assert_func>
 8007d32:	2301      	movs	r3, #1
 8007d34:	6144      	str	r4, [r0, #20]
 8007d36:	6103      	str	r3, [r0, #16]
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	080094b3 	.word	0x080094b3
 8007d40:	080094c4 	.word	0x080094c4

08007d44 <__multiply>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4691      	mov	r9, r2
 8007d4a:	690a      	ldr	r2, [r1, #16]
 8007d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	bfb8      	it	lt
 8007d54:	460b      	movlt	r3, r1
 8007d56:	460c      	mov	r4, r1
 8007d58:	bfbc      	itt	lt
 8007d5a:	464c      	movlt	r4, r9
 8007d5c:	4699      	movlt	r9, r3
 8007d5e:	6927      	ldr	r7, [r4, #16]
 8007d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	6861      	ldr	r1, [r4, #4]
 8007d68:	eb07 060a 	add.w	r6, r7, sl
 8007d6c:	42b3      	cmp	r3, r6
 8007d6e:	b085      	sub	sp, #20
 8007d70:	bfb8      	it	lt
 8007d72:	3101      	addlt	r1, #1
 8007d74:	f7ff fed8 	bl	8007b28 <_Balloc>
 8007d78:	b930      	cbnz	r0, 8007d88 <__multiply+0x44>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	4b44      	ldr	r3, [pc, #272]	; (8007e90 <__multiply+0x14c>)
 8007d7e:	4845      	ldr	r0, [pc, #276]	; (8007e94 <__multiply+0x150>)
 8007d80:	f240 115d 	movw	r1, #349	; 0x15d
 8007d84:	f000 fcb6 	bl	80086f4 <__assert_func>
 8007d88:	f100 0514 	add.w	r5, r0, #20
 8007d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d90:	462b      	mov	r3, r5
 8007d92:	2200      	movs	r2, #0
 8007d94:	4543      	cmp	r3, r8
 8007d96:	d321      	bcc.n	8007ddc <__multiply+0x98>
 8007d98:	f104 0314 	add.w	r3, r4, #20
 8007d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007da0:	f109 0314 	add.w	r3, r9, #20
 8007da4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	1b3a      	subs	r2, r7, r4
 8007dac:	3a15      	subs	r2, #21
 8007dae:	f022 0203 	bic.w	r2, r2, #3
 8007db2:	3204      	adds	r2, #4
 8007db4:	f104 0115 	add.w	r1, r4, #21
 8007db8:	428f      	cmp	r7, r1
 8007dba:	bf38      	it	cc
 8007dbc:	2204      	movcc	r2, #4
 8007dbe:	9201      	str	r2, [sp, #4]
 8007dc0:	9a02      	ldr	r2, [sp, #8]
 8007dc2:	9303      	str	r3, [sp, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d80c      	bhi.n	8007de2 <__multiply+0x9e>
 8007dc8:	2e00      	cmp	r6, #0
 8007dca:	dd03      	ble.n	8007dd4 <__multiply+0x90>
 8007dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d05a      	beq.n	8007e8a <__multiply+0x146>
 8007dd4:	6106      	str	r6, [r0, #16]
 8007dd6:	b005      	add	sp, #20
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	f843 2b04 	str.w	r2, [r3], #4
 8007de0:	e7d8      	b.n	8007d94 <__multiply+0x50>
 8007de2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007de6:	f1ba 0f00 	cmp.w	sl, #0
 8007dea:	d024      	beq.n	8007e36 <__multiply+0xf2>
 8007dec:	f104 0e14 	add.w	lr, r4, #20
 8007df0:	46a9      	mov	r9, r5
 8007df2:	f04f 0c00 	mov.w	ip, #0
 8007df6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dfa:	f8d9 1000 	ldr.w	r1, [r9]
 8007dfe:	fa1f fb82 	uxth.w	fp, r2
 8007e02:	b289      	uxth	r1, r1
 8007e04:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e10:	4461      	add	r1, ip
 8007e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e16:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e1e:	b289      	uxth	r1, r1
 8007e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e24:	4577      	cmp	r7, lr
 8007e26:	f849 1b04 	str.w	r1, [r9], #4
 8007e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e2e:	d8e2      	bhi.n	8007df6 <__multiply+0xb2>
 8007e30:	9a01      	ldr	r2, [sp, #4]
 8007e32:	f845 c002 	str.w	ip, [r5, r2]
 8007e36:	9a03      	ldr	r2, [sp, #12]
 8007e38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	f1b9 0f00 	cmp.w	r9, #0
 8007e42:	d020      	beq.n	8007e86 <__multiply+0x142>
 8007e44:	6829      	ldr	r1, [r5, #0]
 8007e46:	f104 0c14 	add.w	ip, r4, #20
 8007e4a:	46ae      	mov	lr, r5
 8007e4c:	f04f 0a00 	mov.w	sl, #0
 8007e50:	f8bc b000 	ldrh.w	fp, [ip]
 8007e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e58:	fb09 220b 	mla	r2, r9, fp, r2
 8007e5c:	4492      	add	sl, r2
 8007e5e:	b289      	uxth	r1, r1
 8007e60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e64:	f84e 1b04 	str.w	r1, [lr], #4
 8007e68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e6c:	f8be 1000 	ldrh.w	r1, [lr]
 8007e70:	0c12      	lsrs	r2, r2, #16
 8007e72:	fb09 1102 	mla	r1, r9, r2, r1
 8007e76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e7a:	4567      	cmp	r7, ip
 8007e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e80:	d8e6      	bhi.n	8007e50 <__multiply+0x10c>
 8007e82:	9a01      	ldr	r2, [sp, #4]
 8007e84:	50a9      	str	r1, [r5, r2]
 8007e86:	3504      	adds	r5, #4
 8007e88:	e79a      	b.n	8007dc0 <__multiply+0x7c>
 8007e8a:	3e01      	subs	r6, #1
 8007e8c:	e79c      	b.n	8007dc8 <__multiply+0x84>
 8007e8e:	bf00      	nop
 8007e90:	080094b3 	.word	0x080094b3
 8007e94:	080094c4 	.word	0x080094c4

08007e98 <__pow5mult>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	f012 0203 	ands.w	r2, r2, #3
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	d007      	beq.n	8007eb8 <__pow5mult+0x20>
 8007ea8:	4c25      	ldr	r4, [pc, #148]	; (8007f40 <__pow5mult+0xa8>)
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	2300      	movs	r3, #0
 8007eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eb2:	f7ff fe9b 	bl	8007bec <__multadd>
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	10ad      	asrs	r5, r5, #2
 8007eba:	d03d      	beq.n	8007f38 <__pow5mult+0xa0>
 8007ebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ebe:	b97c      	cbnz	r4, 8007ee0 <__pow5mult+0x48>
 8007ec0:	2010      	movs	r0, #16
 8007ec2:	f7ff fe1b 	bl	8007afc <malloc>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8007eca:	b928      	cbnz	r0, 8007ed8 <__pow5mult+0x40>
 8007ecc:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <__pow5mult+0xac>)
 8007ece:	481e      	ldr	r0, [pc, #120]	; (8007f48 <__pow5mult+0xb0>)
 8007ed0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ed4:	f000 fc0e 	bl	80086f4 <__assert_func>
 8007ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007edc:	6004      	str	r4, [r0, #0]
 8007ede:	60c4      	str	r4, [r0, #12]
 8007ee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ee8:	b94c      	cbnz	r4, 8007efe <__pow5mult+0x66>
 8007eea:	f240 2171 	movw	r1, #625	; 0x271
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7ff ff12 	bl	8007d18 <__i2b>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007efa:	4604      	mov	r4, r0
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	f04f 0900 	mov.w	r9, #0
 8007f02:	07eb      	lsls	r3, r5, #31
 8007f04:	d50a      	bpl.n	8007f1c <__pow5mult+0x84>
 8007f06:	4639      	mov	r1, r7
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ff1a 	bl	8007d44 <__multiply>
 8007f10:	4639      	mov	r1, r7
 8007f12:	4680      	mov	r8, r0
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff fe47 	bl	8007ba8 <_Bfree>
 8007f1a:	4647      	mov	r7, r8
 8007f1c:	106d      	asrs	r5, r5, #1
 8007f1e:	d00b      	beq.n	8007f38 <__pow5mult+0xa0>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	b938      	cbnz	r0, 8007f34 <__pow5mult+0x9c>
 8007f24:	4622      	mov	r2, r4
 8007f26:	4621      	mov	r1, r4
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff ff0b 	bl	8007d44 <__multiply>
 8007f2e:	6020      	str	r0, [r4, #0]
 8007f30:	f8c0 9000 	str.w	r9, [r0]
 8007f34:	4604      	mov	r4, r0
 8007f36:	e7e4      	b.n	8007f02 <__pow5mult+0x6a>
 8007f38:	4638      	mov	r0, r7
 8007f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3e:	bf00      	nop
 8007f40:	08009610 	.word	0x08009610
 8007f44:	08009441 	.word	0x08009441
 8007f48:	080094c4 	.word	0x080094c4

08007f4c <__lshift>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	460c      	mov	r4, r1
 8007f52:	6849      	ldr	r1, [r1, #4]
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	4691      	mov	r9, r2
 8007f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f64:	f108 0601 	add.w	r6, r8, #1
 8007f68:	42b3      	cmp	r3, r6
 8007f6a:	db0b      	blt.n	8007f84 <__lshift+0x38>
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7ff fddb 	bl	8007b28 <_Balloc>
 8007f72:	4605      	mov	r5, r0
 8007f74:	b948      	cbnz	r0, 8007f8a <__lshift+0x3e>
 8007f76:	4602      	mov	r2, r0
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <__lshift+0xd8>)
 8007f7a:	482b      	ldr	r0, [pc, #172]	; (8008028 <__lshift+0xdc>)
 8007f7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f80:	f000 fbb8 	bl	80086f4 <__assert_func>
 8007f84:	3101      	adds	r1, #1
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	e7ee      	b.n	8007f68 <__lshift+0x1c>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f100 0114 	add.w	r1, r0, #20
 8007f90:	f100 0210 	add.w	r2, r0, #16
 8007f94:	4618      	mov	r0, r3
 8007f96:	4553      	cmp	r3, sl
 8007f98:	db37      	blt.n	800800a <__lshift+0xbe>
 8007f9a:	6920      	ldr	r0, [r4, #16]
 8007f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa0:	f104 0314 	add.w	r3, r4, #20
 8007fa4:	f019 091f 	ands.w	r9, r9, #31
 8007fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fb0:	d02f      	beq.n	8008012 <__lshift+0xc6>
 8007fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8007fb6:	468a      	mov	sl, r1
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	fa02 f209 	lsl.w	r2, r2, r9
 8007fc2:	ea42 020c 	orr.w	r2, r2, ip
 8007fc6:	f84a 2b04 	str.w	r2, [sl], #4
 8007fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fce:	4298      	cmp	r0, r3
 8007fd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fd4:	d8f2      	bhi.n	8007fbc <__lshift+0x70>
 8007fd6:	1b03      	subs	r3, r0, r4
 8007fd8:	3b15      	subs	r3, #21
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	3304      	adds	r3, #4
 8007fe0:	f104 0215 	add.w	r2, r4, #21
 8007fe4:	4290      	cmp	r0, r2
 8007fe6:	bf38      	it	cc
 8007fe8:	2304      	movcc	r3, #4
 8007fea:	f841 c003 	str.w	ip, [r1, r3]
 8007fee:	f1bc 0f00 	cmp.w	ip, #0
 8007ff2:	d001      	beq.n	8007ff8 <__lshift+0xac>
 8007ff4:	f108 0602 	add.w	r6, r8, #2
 8007ff8:	3e01      	subs	r6, #1
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	612e      	str	r6, [r5, #16]
 8007ffe:	4621      	mov	r1, r4
 8008000:	f7ff fdd2 	bl	8007ba8 <_Bfree>
 8008004:	4628      	mov	r0, r5
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	f842 0f04 	str.w	r0, [r2, #4]!
 800800e:	3301      	adds	r3, #1
 8008010:	e7c1      	b.n	8007f96 <__lshift+0x4a>
 8008012:	3904      	subs	r1, #4
 8008014:	f853 2b04 	ldr.w	r2, [r3], #4
 8008018:	f841 2f04 	str.w	r2, [r1, #4]!
 800801c:	4298      	cmp	r0, r3
 800801e:	d8f9      	bhi.n	8008014 <__lshift+0xc8>
 8008020:	e7ea      	b.n	8007ff8 <__lshift+0xac>
 8008022:	bf00      	nop
 8008024:	080094b3 	.word	0x080094b3
 8008028:	080094c4 	.word	0x080094c4

0800802c <__mcmp>:
 800802c:	b530      	push	{r4, r5, lr}
 800802e:	6902      	ldr	r2, [r0, #16]
 8008030:	690c      	ldr	r4, [r1, #16]
 8008032:	1b12      	subs	r2, r2, r4
 8008034:	d10e      	bne.n	8008054 <__mcmp+0x28>
 8008036:	f100 0314 	add.w	r3, r0, #20
 800803a:	3114      	adds	r1, #20
 800803c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800804c:	42a5      	cmp	r5, r4
 800804e:	d003      	beq.n	8008058 <__mcmp+0x2c>
 8008050:	d305      	bcc.n	800805e <__mcmp+0x32>
 8008052:	2201      	movs	r2, #1
 8008054:	4610      	mov	r0, r2
 8008056:	bd30      	pop	{r4, r5, pc}
 8008058:	4283      	cmp	r3, r0
 800805a:	d3f3      	bcc.n	8008044 <__mcmp+0x18>
 800805c:	e7fa      	b.n	8008054 <__mcmp+0x28>
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	e7f7      	b.n	8008054 <__mcmp+0x28>

08008064 <__mdiff>:
 8008064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	460c      	mov	r4, r1
 800806a:	4606      	mov	r6, r0
 800806c:	4611      	mov	r1, r2
 800806e:	4620      	mov	r0, r4
 8008070:	4690      	mov	r8, r2
 8008072:	f7ff ffdb 	bl	800802c <__mcmp>
 8008076:	1e05      	subs	r5, r0, #0
 8008078:	d110      	bne.n	800809c <__mdiff+0x38>
 800807a:	4629      	mov	r1, r5
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff fd53 	bl	8007b28 <_Balloc>
 8008082:	b930      	cbnz	r0, 8008092 <__mdiff+0x2e>
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <__mdiff+0x10c>)
 8008086:	4602      	mov	r2, r0
 8008088:	f240 2132 	movw	r1, #562	; 0x232
 800808c:	4839      	ldr	r0, [pc, #228]	; (8008174 <__mdiff+0x110>)
 800808e:	f000 fb31 	bl	80086f4 <__assert_func>
 8008092:	2301      	movs	r3, #1
 8008094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	bfa4      	itt	ge
 800809e:	4643      	movge	r3, r8
 80080a0:	46a0      	movge	r8, r4
 80080a2:	4630      	mov	r0, r6
 80080a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080a8:	bfa6      	itte	ge
 80080aa:	461c      	movge	r4, r3
 80080ac:	2500      	movge	r5, #0
 80080ae:	2501      	movlt	r5, #1
 80080b0:	f7ff fd3a 	bl	8007b28 <_Balloc>
 80080b4:	b920      	cbnz	r0, 80080c0 <__mdiff+0x5c>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <__mdiff+0x10c>)
 80080b8:	4602      	mov	r2, r0
 80080ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080be:	e7e5      	b.n	800808c <__mdiff+0x28>
 80080c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080c4:	6926      	ldr	r6, [r4, #16]
 80080c6:	60c5      	str	r5, [r0, #12]
 80080c8:	f104 0914 	add.w	r9, r4, #20
 80080cc:	f108 0514 	add.w	r5, r8, #20
 80080d0:	f100 0e14 	add.w	lr, r0, #20
 80080d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080dc:	f108 0210 	add.w	r2, r8, #16
 80080e0:	46f2      	mov	sl, lr
 80080e2:	2100      	movs	r1, #0
 80080e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80080e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080ec:	fa1f f883 	uxth.w	r8, r3
 80080f0:	fa11 f18b 	uxtah	r1, r1, fp
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	eba1 0808 	sub.w	r8, r1, r8
 80080fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008102:	fa1f f888 	uxth.w	r8, r8
 8008106:	1419      	asrs	r1, r3, #16
 8008108:	454e      	cmp	r6, r9
 800810a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800810e:	f84a 3b04 	str.w	r3, [sl], #4
 8008112:	d8e7      	bhi.n	80080e4 <__mdiff+0x80>
 8008114:	1b33      	subs	r3, r6, r4
 8008116:	3b15      	subs	r3, #21
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	3304      	adds	r3, #4
 800811e:	3415      	adds	r4, #21
 8008120:	42a6      	cmp	r6, r4
 8008122:	bf38      	it	cc
 8008124:	2304      	movcc	r3, #4
 8008126:	441d      	add	r5, r3
 8008128:	4473      	add	r3, lr
 800812a:	469e      	mov	lr, r3
 800812c:	462e      	mov	r6, r5
 800812e:	4566      	cmp	r6, ip
 8008130:	d30e      	bcc.n	8008150 <__mdiff+0xec>
 8008132:	f10c 0203 	add.w	r2, ip, #3
 8008136:	1b52      	subs	r2, r2, r5
 8008138:	f022 0203 	bic.w	r2, r2, #3
 800813c:	3d03      	subs	r5, #3
 800813e:	45ac      	cmp	ip, r5
 8008140:	bf38      	it	cc
 8008142:	2200      	movcc	r2, #0
 8008144:	441a      	add	r2, r3
 8008146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800814a:	b17b      	cbz	r3, 800816c <__mdiff+0x108>
 800814c:	6107      	str	r7, [r0, #16]
 800814e:	e7a3      	b.n	8008098 <__mdiff+0x34>
 8008150:	f856 8b04 	ldr.w	r8, [r6], #4
 8008154:	fa11 f288 	uxtah	r2, r1, r8
 8008158:	1414      	asrs	r4, r2, #16
 800815a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800815e:	b292      	uxth	r2, r2
 8008160:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008164:	f84e 2b04 	str.w	r2, [lr], #4
 8008168:	1421      	asrs	r1, r4, #16
 800816a:	e7e0      	b.n	800812e <__mdiff+0xca>
 800816c:	3f01      	subs	r7, #1
 800816e:	e7ea      	b.n	8008146 <__mdiff+0xe2>
 8008170:	080094b3 	.word	0x080094b3
 8008174:	080094c4 	.word	0x080094c4

08008178 <__d2b>:
 8008178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800817c:	4689      	mov	r9, r1
 800817e:	2101      	movs	r1, #1
 8008180:	ec57 6b10 	vmov	r6, r7, d0
 8008184:	4690      	mov	r8, r2
 8008186:	f7ff fccf 	bl	8007b28 <_Balloc>
 800818a:	4604      	mov	r4, r0
 800818c:	b930      	cbnz	r0, 800819c <__d2b+0x24>
 800818e:	4602      	mov	r2, r0
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <__d2b+0xb0>)
 8008192:	4826      	ldr	r0, [pc, #152]	; (800822c <__d2b+0xb4>)
 8008194:	f240 310a 	movw	r1, #778	; 0x30a
 8008198:	f000 faac 	bl	80086f4 <__assert_func>
 800819c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081a4:	bb35      	cbnz	r5, 80081f4 <__d2b+0x7c>
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	d028      	beq.n	80081fe <__d2b+0x86>
 80081ac:	4668      	mov	r0, sp
 80081ae:	9600      	str	r6, [sp, #0]
 80081b0:	f7ff fd82 	bl	8007cb8 <__lo0bits>
 80081b4:	9900      	ldr	r1, [sp, #0]
 80081b6:	b300      	cbz	r0, 80081fa <__d2b+0x82>
 80081b8:	9a01      	ldr	r2, [sp, #4]
 80081ba:	f1c0 0320 	rsb	r3, r0, #32
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	430b      	orrs	r3, r1
 80081c4:	40c2      	lsrs	r2, r0
 80081c6:	6163      	str	r3, [r4, #20]
 80081c8:	9201      	str	r2, [sp, #4]
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	61a3      	str	r3, [r4, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf14      	ite	ne
 80081d2:	2202      	movne	r2, #2
 80081d4:	2201      	moveq	r2, #1
 80081d6:	6122      	str	r2, [r4, #16]
 80081d8:	b1d5      	cbz	r5, 8008210 <__d2b+0x98>
 80081da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081de:	4405      	add	r5, r0
 80081e0:	f8c9 5000 	str.w	r5, [r9]
 80081e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081e8:	f8c8 0000 	str.w	r0, [r8]
 80081ec:	4620      	mov	r0, r4
 80081ee:	b003      	add	sp, #12
 80081f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081f8:	e7d5      	b.n	80081a6 <__d2b+0x2e>
 80081fa:	6161      	str	r1, [r4, #20]
 80081fc:	e7e5      	b.n	80081ca <__d2b+0x52>
 80081fe:	a801      	add	r0, sp, #4
 8008200:	f7ff fd5a 	bl	8007cb8 <__lo0bits>
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	2201      	movs	r2, #1
 800820a:	6122      	str	r2, [r4, #16]
 800820c:	3020      	adds	r0, #32
 800820e:	e7e3      	b.n	80081d8 <__d2b+0x60>
 8008210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008218:	f8c9 0000 	str.w	r0, [r9]
 800821c:	6918      	ldr	r0, [r3, #16]
 800821e:	f7ff fd2b 	bl	8007c78 <__hi0bits>
 8008222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008226:	e7df      	b.n	80081e8 <__d2b+0x70>
 8008228:	080094b3 	.word	0x080094b3
 800822c:	080094c4 	.word	0x080094c4

08008230 <_calloc_r>:
 8008230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008232:	fba1 2402 	umull	r2, r4, r1, r2
 8008236:	b94c      	cbnz	r4, 800824c <_calloc_r+0x1c>
 8008238:	4611      	mov	r1, r2
 800823a:	9201      	str	r2, [sp, #4]
 800823c:	f000 f87a 	bl	8008334 <_malloc_r>
 8008240:	9a01      	ldr	r2, [sp, #4]
 8008242:	4605      	mov	r5, r0
 8008244:	b930      	cbnz	r0, 8008254 <_calloc_r+0x24>
 8008246:	4628      	mov	r0, r5
 8008248:	b003      	add	sp, #12
 800824a:	bd30      	pop	{r4, r5, pc}
 800824c:	220c      	movs	r2, #12
 800824e:	6002      	str	r2, [r0, #0]
 8008250:	2500      	movs	r5, #0
 8008252:	e7f8      	b.n	8008246 <_calloc_r+0x16>
 8008254:	4621      	mov	r1, r4
 8008256:	f7fe f93f 	bl	80064d8 <memset>
 800825a:	e7f4      	b.n	8008246 <_calloc_r+0x16>

0800825c <_free_r>:
 800825c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825e:	2900      	cmp	r1, #0
 8008260:	d044      	beq.n	80082ec <_free_r+0x90>
 8008262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f1a1 0404 	sub.w	r4, r1, #4
 800826e:	bfb8      	it	lt
 8008270:	18e4      	addlt	r4, r4, r3
 8008272:	f000 fa9b 	bl	80087ac <__malloc_lock>
 8008276:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <_free_r+0x94>)
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	b933      	cbnz	r3, 800828c <_free_r+0x30>
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	b003      	add	sp, #12
 8008284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008288:	f000 ba96 	b.w	80087b8 <__malloc_unlock>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d908      	bls.n	80082a2 <_free_r+0x46>
 8008290:	6825      	ldr	r5, [r4, #0]
 8008292:	1961      	adds	r1, r4, r5
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1949      	addeq	r1, r1, r5
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	e7ed      	b.n	800827e <_free_r+0x22>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x50>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x46>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1855      	adds	r5, r2, r1
 80082b0:	42a5      	cmp	r5, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x70>
 80082b4:	6824      	ldr	r4, [r4, #0]
 80082b6:	4421      	add	r1, r4
 80082b8:	1854      	adds	r4, r2, r1
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1e0      	bne.n	8008282 <_free_r+0x26>
 80082c0:	681c      	ldr	r4, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	6053      	str	r3, [r2, #4]
 80082c6:	4421      	add	r1, r4
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	e7da      	b.n	8008282 <_free_r+0x26>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x78>
 80082ce:	230c      	movs	r3, #12
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	e7d6      	b.n	8008282 <_free_r+0x26>
 80082d4:	6825      	ldr	r5, [r4, #0]
 80082d6:	1961      	adds	r1, r4, r5
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf04      	itt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	bf04      	itt	eq
 80082e4:	1949      	addeq	r1, r1, r5
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	6054      	str	r4, [r2, #4]
 80082ea:	e7ca      	b.n	8008282 <_free_r+0x26>
 80082ec:	b003      	add	sp, #12
 80082ee:	bd30      	pop	{r4, r5, pc}
 80082f0:	20000408 	.word	0x20000408

080082f4 <sbrk_aligned>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4e0e      	ldr	r6, [pc, #56]	; (8008330 <sbrk_aligned+0x3c>)
 80082f8:	460c      	mov	r4, r1
 80082fa:	6831      	ldr	r1, [r6, #0]
 80082fc:	4605      	mov	r5, r0
 80082fe:	b911      	cbnz	r1, 8008306 <sbrk_aligned+0x12>
 8008300:	f000 f9e8 	bl	80086d4 <_sbrk_r>
 8008304:	6030      	str	r0, [r6, #0]
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 f9e3 	bl	80086d4 <_sbrk_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d00a      	beq.n	8008328 <sbrk_aligned+0x34>
 8008312:	1cc4      	adds	r4, r0, #3
 8008314:	f024 0403 	bic.w	r4, r4, #3
 8008318:	42a0      	cmp	r0, r4
 800831a:	d007      	beq.n	800832c <sbrk_aligned+0x38>
 800831c:	1a21      	subs	r1, r4, r0
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f9d8 	bl	80086d4 <_sbrk_r>
 8008324:	3001      	adds	r0, #1
 8008326:	d101      	bne.n	800832c <sbrk_aligned+0x38>
 8008328:	f04f 34ff 	mov.w	r4, #4294967295
 800832c:	4620      	mov	r0, r4
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	2000040c 	.word	0x2000040c

08008334 <_malloc_r>:
 8008334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008338:	1ccd      	adds	r5, r1, #3
 800833a:	f025 0503 	bic.w	r5, r5, #3
 800833e:	3508      	adds	r5, #8
 8008340:	2d0c      	cmp	r5, #12
 8008342:	bf38      	it	cc
 8008344:	250c      	movcc	r5, #12
 8008346:	2d00      	cmp	r5, #0
 8008348:	4607      	mov	r7, r0
 800834a:	db01      	blt.n	8008350 <_malloc_r+0x1c>
 800834c:	42a9      	cmp	r1, r5
 800834e:	d905      	bls.n	800835c <_malloc_r+0x28>
 8008350:	230c      	movs	r3, #12
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	2600      	movs	r6, #0
 8008356:	4630      	mov	r0, r6
 8008358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800835c:	4e2e      	ldr	r6, [pc, #184]	; (8008418 <_malloc_r+0xe4>)
 800835e:	f000 fa25 	bl	80087ac <__malloc_lock>
 8008362:	6833      	ldr	r3, [r6, #0]
 8008364:	461c      	mov	r4, r3
 8008366:	bb34      	cbnz	r4, 80083b6 <_malloc_r+0x82>
 8008368:	4629      	mov	r1, r5
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ffc2 	bl	80082f4 <sbrk_aligned>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	4604      	mov	r4, r0
 8008374:	d14d      	bne.n	8008412 <_malloc_r+0xde>
 8008376:	6834      	ldr	r4, [r6, #0]
 8008378:	4626      	mov	r6, r4
 800837a:	2e00      	cmp	r6, #0
 800837c:	d140      	bne.n	8008400 <_malloc_r+0xcc>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	4631      	mov	r1, r6
 8008382:	4638      	mov	r0, r7
 8008384:	eb04 0803 	add.w	r8, r4, r3
 8008388:	f000 f9a4 	bl	80086d4 <_sbrk_r>
 800838c:	4580      	cmp	r8, r0
 800838e:	d13a      	bne.n	8008406 <_malloc_r+0xd2>
 8008390:	6821      	ldr	r1, [r4, #0]
 8008392:	3503      	adds	r5, #3
 8008394:	1a6d      	subs	r5, r5, r1
 8008396:	f025 0503 	bic.w	r5, r5, #3
 800839a:	3508      	adds	r5, #8
 800839c:	2d0c      	cmp	r5, #12
 800839e:	bf38      	it	cc
 80083a0:	250c      	movcc	r5, #12
 80083a2:	4629      	mov	r1, r5
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ffa5 	bl	80082f4 <sbrk_aligned>
 80083aa:	3001      	adds	r0, #1
 80083ac:	d02b      	beq.n	8008406 <_malloc_r+0xd2>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	442b      	add	r3, r5
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	e00e      	b.n	80083d4 <_malloc_r+0xa0>
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	1b52      	subs	r2, r2, r5
 80083ba:	d41e      	bmi.n	80083fa <_malloc_r+0xc6>
 80083bc:	2a0b      	cmp	r2, #11
 80083be:	d916      	bls.n	80083ee <_malloc_r+0xba>
 80083c0:	1961      	adds	r1, r4, r5
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	6025      	str	r5, [r4, #0]
 80083c6:	bf18      	it	ne
 80083c8:	6059      	strne	r1, [r3, #4]
 80083ca:	6863      	ldr	r3, [r4, #4]
 80083cc:	bf08      	it	eq
 80083ce:	6031      	streq	r1, [r6, #0]
 80083d0:	5162      	str	r2, [r4, r5]
 80083d2:	604b      	str	r3, [r1, #4]
 80083d4:	4638      	mov	r0, r7
 80083d6:	f104 060b 	add.w	r6, r4, #11
 80083da:	f000 f9ed 	bl	80087b8 <__malloc_unlock>
 80083de:	f026 0607 	bic.w	r6, r6, #7
 80083e2:	1d23      	adds	r3, r4, #4
 80083e4:	1af2      	subs	r2, r6, r3
 80083e6:	d0b6      	beq.n	8008356 <_malloc_r+0x22>
 80083e8:	1b9b      	subs	r3, r3, r6
 80083ea:	50a3      	str	r3, [r4, r2]
 80083ec:	e7b3      	b.n	8008356 <_malloc_r+0x22>
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	bf0c      	ite	eq
 80083f4:	6032      	streq	r2, [r6, #0]
 80083f6:	605a      	strne	r2, [r3, #4]
 80083f8:	e7ec      	b.n	80083d4 <_malloc_r+0xa0>
 80083fa:	4623      	mov	r3, r4
 80083fc:	6864      	ldr	r4, [r4, #4]
 80083fe:	e7b2      	b.n	8008366 <_malloc_r+0x32>
 8008400:	4634      	mov	r4, r6
 8008402:	6876      	ldr	r6, [r6, #4]
 8008404:	e7b9      	b.n	800837a <_malloc_r+0x46>
 8008406:	230c      	movs	r3, #12
 8008408:	603b      	str	r3, [r7, #0]
 800840a:	4638      	mov	r0, r7
 800840c:	f000 f9d4 	bl	80087b8 <__malloc_unlock>
 8008410:	e7a1      	b.n	8008356 <_malloc_r+0x22>
 8008412:	6025      	str	r5, [r4, #0]
 8008414:	e7de      	b.n	80083d4 <_malloc_r+0xa0>
 8008416:	bf00      	nop
 8008418:	20000408 	.word	0x20000408

0800841c <__ssputs_r>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	688e      	ldr	r6, [r1, #8]
 8008422:	429e      	cmp	r6, r3
 8008424:	4682      	mov	sl, r0
 8008426:	460c      	mov	r4, r1
 8008428:	4690      	mov	r8, r2
 800842a:	461f      	mov	r7, r3
 800842c:	d838      	bhi.n	80084a0 <__ssputs_r+0x84>
 800842e:	898a      	ldrh	r2, [r1, #12]
 8008430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008434:	d032      	beq.n	800849c <__ssputs_r+0x80>
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	6909      	ldr	r1, [r1, #16]
 800843a:	eba5 0901 	sub.w	r9, r5, r1
 800843e:	6965      	ldr	r5, [r4, #20]
 8008440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008448:	3301      	adds	r3, #1
 800844a:	444b      	add	r3, r9
 800844c:	106d      	asrs	r5, r5, #1
 800844e:	429d      	cmp	r5, r3
 8008450:	bf38      	it	cc
 8008452:	461d      	movcc	r5, r3
 8008454:	0553      	lsls	r3, r2, #21
 8008456:	d531      	bpl.n	80084bc <__ssputs_r+0xa0>
 8008458:	4629      	mov	r1, r5
 800845a:	f7ff ff6b 	bl	8008334 <_malloc_r>
 800845e:	4606      	mov	r6, r0
 8008460:	b950      	cbnz	r0, 8008478 <__ssputs_r+0x5c>
 8008462:	230c      	movs	r3, #12
 8008464:	f8ca 3000 	str.w	r3, [sl]
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	6921      	ldr	r1, [r4, #16]
 800847a:	464a      	mov	r2, r9
 800847c:	f7ff fb46 	bl	8007b0c <memcpy>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	6126      	str	r6, [r4, #16]
 800848e:	6165      	str	r5, [r4, #20]
 8008490:	444e      	add	r6, r9
 8008492:	eba5 0509 	sub.w	r5, r5, r9
 8008496:	6026      	str	r6, [r4, #0]
 8008498:	60a5      	str	r5, [r4, #8]
 800849a:	463e      	mov	r6, r7
 800849c:	42be      	cmp	r6, r7
 800849e:	d900      	bls.n	80084a2 <__ssputs_r+0x86>
 80084a0:	463e      	mov	r6, r7
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	4632      	mov	r2, r6
 80084a6:	4641      	mov	r1, r8
 80084a8:	f000 f966 	bl	8008778 <memmove>
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	1b9b      	subs	r3, r3, r6
 80084b0:	60a3      	str	r3, [r4, #8]
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	4433      	add	r3, r6
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	2000      	movs	r0, #0
 80084ba:	e7db      	b.n	8008474 <__ssputs_r+0x58>
 80084bc:	462a      	mov	r2, r5
 80084be:	f000 f981 	bl	80087c4 <_realloc_r>
 80084c2:	4606      	mov	r6, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d1e1      	bne.n	800848c <__ssputs_r+0x70>
 80084c8:	6921      	ldr	r1, [r4, #16]
 80084ca:	4650      	mov	r0, sl
 80084cc:	f7ff fec6 	bl	800825c <_free_r>
 80084d0:	e7c7      	b.n	8008462 <__ssputs_r+0x46>
	...

080084d4 <_svfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4698      	mov	r8, r3
 80084da:	898b      	ldrh	r3, [r1, #12]
 80084dc:	061b      	lsls	r3, r3, #24
 80084de:	b09d      	sub	sp, #116	; 0x74
 80084e0:	4607      	mov	r7, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	d50e      	bpl.n	8008506 <_svfiprintf_r+0x32>
 80084e8:	690b      	ldr	r3, [r1, #16]
 80084ea:	b963      	cbnz	r3, 8008506 <_svfiprintf_r+0x32>
 80084ec:	2140      	movs	r1, #64	; 0x40
 80084ee:	f7ff ff21 	bl	8008334 <_malloc_r>
 80084f2:	6028      	str	r0, [r5, #0]
 80084f4:	6128      	str	r0, [r5, #16]
 80084f6:	b920      	cbnz	r0, 8008502 <_svfiprintf_r+0x2e>
 80084f8:	230c      	movs	r3, #12
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	e0d1      	b.n	80086a6 <_svfiprintf_r+0x1d2>
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	616b      	str	r3, [r5, #20]
 8008506:	2300      	movs	r3, #0
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	2320      	movs	r3, #32
 800850c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008510:	f8cd 800c 	str.w	r8, [sp, #12]
 8008514:	2330      	movs	r3, #48	; 0x30
 8008516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086c0 <_svfiprintf_r+0x1ec>
 800851a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800851e:	f04f 0901 	mov.w	r9, #1
 8008522:	4623      	mov	r3, r4
 8008524:	469a      	mov	sl, r3
 8008526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852a:	b10a      	cbz	r2, 8008530 <_svfiprintf_r+0x5c>
 800852c:	2a25      	cmp	r2, #37	; 0x25
 800852e:	d1f9      	bne.n	8008524 <_svfiprintf_r+0x50>
 8008530:	ebba 0b04 	subs.w	fp, sl, r4
 8008534:	d00b      	beq.n	800854e <_svfiprintf_r+0x7a>
 8008536:	465b      	mov	r3, fp
 8008538:	4622      	mov	r2, r4
 800853a:	4629      	mov	r1, r5
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff6d 	bl	800841c <__ssputs_r>
 8008542:	3001      	adds	r0, #1
 8008544:	f000 80aa 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854a:	445a      	add	r2, fp
 800854c:	9209      	str	r2, [sp, #36]	; 0x24
 800854e:	f89a 3000 	ldrb.w	r3, [sl]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80a2 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008558:	2300      	movs	r3, #0
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008562:	f10a 0a01 	add.w	sl, sl, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856e:	931a      	str	r3, [sp, #104]	; 0x68
 8008570:	4654      	mov	r4, sl
 8008572:	2205      	movs	r2, #5
 8008574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008578:	4851      	ldr	r0, [pc, #324]	; (80086c0 <_svfiprintf_r+0x1ec>)
 800857a:	f7f7 fe59 	bl	8000230 <memchr>
 800857e:	9a04      	ldr	r2, [sp, #16]
 8008580:	b9d8      	cbnz	r0, 80085ba <_svfiprintf_r+0xe6>
 8008582:	06d0      	lsls	r0, r2, #27
 8008584:	bf44      	itt	mi
 8008586:	2320      	movmi	r3, #32
 8008588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858c:	0711      	lsls	r1, r2, #28
 800858e:	bf44      	itt	mi
 8008590:	232b      	movmi	r3, #43	; 0x2b
 8008592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008596:	f89a 3000 	ldrb.w	r3, [sl]
 800859a:	2b2a      	cmp	r3, #42	; 0x2a
 800859c:	d015      	beq.n	80085ca <_svfiprintf_r+0xf6>
 800859e:	9a07      	ldr	r2, [sp, #28]
 80085a0:	4654      	mov	r4, sl
 80085a2:	2000      	movs	r0, #0
 80085a4:	f04f 0c0a 	mov.w	ip, #10
 80085a8:	4621      	mov	r1, r4
 80085aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ae:	3b30      	subs	r3, #48	; 0x30
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d94e      	bls.n	8008652 <_svfiprintf_r+0x17e>
 80085b4:	b1b0      	cbz	r0, 80085e4 <_svfiprintf_r+0x110>
 80085b6:	9207      	str	r2, [sp, #28]
 80085b8:	e014      	b.n	80085e4 <_svfiprintf_r+0x110>
 80085ba:	eba0 0308 	sub.w	r3, r0, r8
 80085be:	fa09 f303 	lsl.w	r3, r9, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	46a2      	mov	sl, r4
 80085c8:	e7d2      	b.n	8008570 <_svfiprintf_r+0x9c>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d19      	adds	r1, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9103      	str	r1, [sp, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfbb      	ittet	lt
 80085d6:	425b      	neglt	r3, r3
 80085d8:	f042 0202 	orrlt.w	r2, r2, #2
 80085dc:	9307      	strge	r3, [sp, #28]
 80085de:	9307      	strlt	r3, [sp, #28]
 80085e0:	bfb8      	it	lt
 80085e2:	9204      	strlt	r2, [sp, #16]
 80085e4:	7823      	ldrb	r3, [r4, #0]
 80085e6:	2b2e      	cmp	r3, #46	; 0x2e
 80085e8:	d10c      	bne.n	8008604 <_svfiprintf_r+0x130>
 80085ea:	7863      	ldrb	r3, [r4, #1]
 80085ec:	2b2a      	cmp	r3, #42	; 0x2a
 80085ee:	d135      	bne.n	800865c <_svfiprintf_r+0x188>
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	9203      	str	r2, [sp, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfb8      	it	lt
 80085fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008600:	3402      	adds	r4, #2
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086d0 <_svfiprintf_r+0x1fc>
 8008608:	7821      	ldrb	r1, [r4, #0]
 800860a:	2203      	movs	r2, #3
 800860c:	4650      	mov	r0, sl
 800860e:	f7f7 fe0f 	bl	8000230 <memchr>
 8008612:	b140      	cbz	r0, 8008626 <_svfiprintf_r+0x152>
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	eba0 000a 	sub.w	r0, r0, sl
 800861a:	fa03 f000 	lsl.w	r0, r3, r0
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	4303      	orrs	r3, r0
 8008622:	3401      	adds	r4, #1
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	4826      	ldr	r0, [pc, #152]	; (80086c4 <_svfiprintf_r+0x1f0>)
 800862c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008630:	2206      	movs	r2, #6
 8008632:	f7f7 fdfd 	bl	8000230 <memchr>
 8008636:	2800      	cmp	r0, #0
 8008638:	d038      	beq.n	80086ac <_svfiprintf_r+0x1d8>
 800863a:	4b23      	ldr	r3, [pc, #140]	; (80086c8 <_svfiprintf_r+0x1f4>)
 800863c:	bb1b      	cbnz	r3, 8008686 <_svfiprintf_r+0x1b2>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	3307      	adds	r3, #7
 8008642:	f023 0307 	bic.w	r3, r3, #7
 8008646:	3308      	adds	r3, #8
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	4433      	add	r3, r6
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	e767      	b.n	8008522 <_svfiprintf_r+0x4e>
 8008652:	fb0c 3202 	mla	r2, ip, r2, r3
 8008656:	460c      	mov	r4, r1
 8008658:	2001      	movs	r0, #1
 800865a:	e7a5      	b.n	80085a8 <_svfiprintf_r+0xd4>
 800865c:	2300      	movs	r3, #0
 800865e:	3401      	adds	r4, #1
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	4619      	mov	r1, r3
 8008664:	f04f 0c0a 	mov.w	ip, #10
 8008668:	4620      	mov	r0, r4
 800866a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866e:	3a30      	subs	r2, #48	; 0x30
 8008670:	2a09      	cmp	r2, #9
 8008672:	d903      	bls.n	800867c <_svfiprintf_r+0x1a8>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0c5      	beq.n	8008604 <_svfiprintf_r+0x130>
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	e7c3      	b.n	8008604 <_svfiprintf_r+0x130>
 800867c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008680:	4604      	mov	r4, r0
 8008682:	2301      	movs	r3, #1
 8008684:	e7f0      	b.n	8008668 <_svfiprintf_r+0x194>
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <_svfiprintf_r+0x1f8>)
 800868e:	a904      	add	r1, sp, #16
 8008690:	4638      	mov	r0, r7
 8008692:	f7fd ffc9 	bl	8006628 <_printf_float>
 8008696:	1c42      	adds	r2, r0, #1
 8008698:	4606      	mov	r6, r0
 800869a:	d1d6      	bne.n	800864a <_svfiprintf_r+0x176>
 800869c:	89ab      	ldrh	r3, [r5, #12]
 800869e:	065b      	lsls	r3, r3, #25
 80086a0:	f53f af2c 	bmi.w	80084fc <_svfiprintf_r+0x28>
 80086a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a6:	b01d      	add	sp, #116	; 0x74
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4b06      	ldr	r3, [pc, #24]	; (80086cc <_svfiprintf_r+0x1f8>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7fe fa5a 	bl	8006b70 <_printf_i>
 80086bc:	e7eb      	b.n	8008696 <_svfiprintf_r+0x1c2>
 80086be:	bf00      	nop
 80086c0:	0800961c 	.word	0x0800961c
 80086c4:	08009626 	.word	0x08009626
 80086c8:	08006629 	.word	0x08006629
 80086cc:	0800841d 	.word	0x0800841d
 80086d0:	08009622 	.word	0x08009622

080086d4 <_sbrk_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d06      	ldr	r5, [pc, #24]	; (80086f0 <_sbrk_r+0x1c>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7f9 faca 	bl	8001c78 <_sbrk>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_sbrk_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_sbrk_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000410 	.word	0x20000410

080086f4 <__assert_func>:
 80086f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f6:	4614      	mov	r4, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <__assert_func+0x2c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4605      	mov	r5, r0
 8008700:	68d8      	ldr	r0, [r3, #12]
 8008702:	b14c      	cbz	r4, 8008718 <__assert_func+0x24>
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <__assert_func+0x30>)
 8008706:	9100      	str	r1, [sp, #0]
 8008708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800870c:	4906      	ldr	r1, [pc, #24]	; (8008728 <__assert_func+0x34>)
 800870e:	462b      	mov	r3, r5
 8008710:	f000 f80e 	bl	8008730 <fiprintf>
 8008714:	f000 faac 	bl	8008c70 <abort>
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <__assert_func+0x38>)
 800871a:	461c      	mov	r4, r3
 800871c:	e7f3      	b.n	8008706 <__assert_func+0x12>
 800871e:	bf00      	nop
 8008720:	20000010 	.word	0x20000010
 8008724:	0800962d 	.word	0x0800962d
 8008728:	0800963a 	.word	0x0800963a
 800872c:	08009668 	.word	0x08009668

08008730 <fiprintf>:
 8008730:	b40e      	push	{r1, r2, r3}
 8008732:	b503      	push	{r0, r1, lr}
 8008734:	4601      	mov	r1, r0
 8008736:	ab03      	add	r3, sp, #12
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <fiprintf+0x20>)
 800873a:	f853 2b04 	ldr.w	r2, [r3], #4
 800873e:	6800      	ldr	r0, [r0, #0]
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f000 f897 	bl	8008874 <_vfiprintf_r>
 8008746:	b002      	add	sp, #8
 8008748:	f85d eb04 	ldr.w	lr, [sp], #4
 800874c:	b003      	add	sp, #12
 800874e:	4770      	bx	lr
 8008750:	20000010 	.word	0x20000010

08008754 <__ascii_mbtowc>:
 8008754:	b082      	sub	sp, #8
 8008756:	b901      	cbnz	r1, 800875a <__ascii_mbtowc+0x6>
 8008758:	a901      	add	r1, sp, #4
 800875a:	b142      	cbz	r2, 800876e <__ascii_mbtowc+0x1a>
 800875c:	b14b      	cbz	r3, 8008772 <__ascii_mbtowc+0x1e>
 800875e:	7813      	ldrb	r3, [r2, #0]
 8008760:	600b      	str	r3, [r1, #0]
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	1e10      	subs	r0, r2, #0
 8008766:	bf18      	it	ne
 8008768:	2001      	movne	r0, #1
 800876a:	b002      	add	sp, #8
 800876c:	4770      	bx	lr
 800876e:	4610      	mov	r0, r2
 8008770:	e7fb      	b.n	800876a <__ascii_mbtowc+0x16>
 8008772:	f06f 0001 	mvn.w	r0, #1
 8008776:	e7f8      	b.n	800876a <__ascii_mbtowc+0x16>

08008778 <memmove>:
 8008778:	4288      	cmp	r0, r1
 800877a:	b510      	push	{r4, lr}
 800877c:	eb01 0402 	add.w	r4, r1, r2
 8008780:	d902      	bls.n	8008788 <memmove+0x10>
 8008782:	4284      	cmp	r4, r0
 8008784:	4623      	mov	r3, r4
 8008786:	d807      	bhi.n	8008798 <memmove+0x20>
 8008788:	1e43      	subs	r3, r0, #1
 800878a:	42a1      	cmp	r1, r4
 800878c:	d008      	beq.n	80087a0 <memmove+0x28>
 800878e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008796:	e7f8      	b.n	800878a <memmove+0x12>
 8008798:	4402      	add	r2, r0
 800879a:	4601      	mov	r1, r0
 800879c:	428a      	cmp	r2, r1
 800879e:	d100      	bne.n	80087a2 <memmove+0x2a>
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087aa:	e7f7      	b.n	800879c <memmove+0x24>

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f000 bc1f 	b.w	8008ff0 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000414 	.word	0x20000414

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f000 bc1a 	b.w	8008ff2 <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20000414 	.word	0x20000414

080087c4 <_realloc_r>:
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	4680      	mov	r8, r0
 80087ca:	4614      	mov	r4, r2
 80087cc:	460e      	mov	r6, r1
 80087ce:	b921      	cbnz	r1, 80087da <_realloc_r+0x16>
 80087d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	4611      	mov	r1, r2
 80087d6:	f7ff bdad 	b.w	8008334 <_malloc_r>
 80087da:	b92a      	cbnz	r2, 80087e8 <_realloc_r+0x24>
 80087dc:	f7ff fd3e 	bl	800825c <_free_r>
 80087e0:	4625      	mov	r5, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	f000 fc6a 	bl	80090c0 <_malloc_usable_size_r>
 80087ec:	4284      	cmp	r4, r0
 80087ee:	4607      	mov	r7, r0
 80087f0:	d802      	bhi.n	80087f8 <_realloc_r+0x34>
 80087f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087f6:	d812      	bhi.n	800881e <_realloc_r+0x5a>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7ff fd9a 	bl	8008334 <_malloc_r>
 8008800:	4605      	mov	r5, r0
 8008802:	2800      	cmp	r0, #0
 8008804:	d0ed      	beq.n	80087e2 <_realloc_r+0x1e>
 8008806:	42bc      	cmp	r4, r7
 8008808:	4622      	mov	r2, r4
 800880a:	4631      	mov	r1, r6
 800880c:	bf28      	it	cs
 800880e:	463a      	movcs	r2, r7
 8008810:	f7ff f97c 	bl	8007b0c <memcpy>
 8008814:	4631      	mov	r1, r6
 8008816:	4640      	mov	r0, r8
 8008818:	f7ff fd20 	bl	800825c <_free_r>
 800881c:	e7e1      	b.n	80087e2 <_realloc_r+0x1e>
 800881e:	4635      	mov	r5, r6
 8008820:	e7df      	b.n	80087e2 <_realloc_r+0x1e>

08008822 <__sfputc_r>:
 8008822:	6893      	ldr	r3, [r2, #8]
 8008824:	3b01      	subs	r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	b410      	push	{r4}
 800882a:	6093      	str	r3, [r2, #8]
 800882c:	da08      	bge.n	8008840 <__sfputc_r+0x1e>
 800882e:	6994      	ldr	r4, [r2, #24]
 8008830:	42a3      	cmp	r3, r4
 8008832:	db01      	blt.n	8008838 <__sfputc_r+0x16>
 8008834:	290a      	cmp	r1, #10
 8008836:	d103      	bne.n	8008840 <__sfputc_r+0x1e>
 8008838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883c:	f000 b94a 	b.w	8008ad4 <__swbuf_r>
 8008840:	6813      	ldr	r3, [r2, #0]
 8008842:	1c58      	adds	r0, r3, #1
 8008844:	6010      	str	r0, [r2, #0]
 8008846:	7019      	strb	r1, [r3, #0]
 8008848:	4608      	mov	r0, r1
 800884a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800884e:	4770      	bx	lr

08008850 <__sfputs_r>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	4614      	mov	r4, r2
 8008858:	18d5      	adds	r5, r2, r3
 800885a:	42ac      	cmp	r4, r5
 800885c:	d101      	bne.n	8008862 <__sfputs_r+0x12>
 800885e:	2000      	movs	r0, #0
 8008860:	e007      	b.n	8008872 <__sfputs_r+0x22>
 8008862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008866:	463a      	mov	r2, r7
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff ffda 	bl	8008822 <__sfputc_r>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d1f3      	bne.n	800885a <__sfputs_r+0xa>
 8008872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008874 <_vfiprintf_r>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	460d      	mov	r5, r1
 800887a:	b09d      	sub	sp, #116	; 0x74
 800887c:	4614      	mov	r4, r2
 800887e:	4698      	mov	r8, r3
 8008880:	4606      	mov	r6, r0
 8008882:	b118      	cbz	r0, 800888c <_vfiprintf_r+0x18>
 8008884:	6983      	ldr	r3, [r0, #24]
 8008886:	b90b      	cbnz	r3, 800888c <_vfiprintf_r+0x18>
 8008888:	f000 fb14 	bl	8008eb4 <__sinit>
 800888c:	4b89      	ldr	r3, [pc, #548]	; (8008ab4 <_vfiprintf_r+0x240>)
 800888e:	429d      	cmp	r5, r3
 8008890:	d11b      	bne.n	80088ca <_vfiprintf_r+0x56>
 8008892:	6875      	ldr	r5, [r6, #4]
 8008894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008896:	07d9      	lsls	r1, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	059a      	lsls	r2, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 80088a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a2:	f000 fba5 	bl	8008ff0 <__retarget_lock_acquire_recursive>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	071b      	lsls	r3, r3, #28
 80088aa:	d501      	bpl.n	80088b0 <_vfiprintf_r+0x3c>
 80088ac:	692b      	ldr	r3, [r5, #16]
 80088ae:	b9eb      	cbnz	r3, 80088ec <_vfiprintf_r+0x78>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f96e 	bl	8008b94 <__swsetup_r>
 80088b8:	b1c0      	cbz	r0, 80088ec <_vfiprintf_r+0x78>
 80088ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088bc:	07dc      	lsls	r4, r3, #31
 80088be:	d50e      	bpl.n	80088de <_vfiprintf_r+0x6a>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	b01d      	add	sp, #116	; 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	4b7b      	ldr	r3, [pc, #492]	; (8008ab8 <_vfiprintf_r+0x244>)
 80088cc:	429d      	cmp	r5, r3
 80088ce:	d101      	bne.n	80088d4 <_vfiprintf_r+0x60>
 80088d0:	68b5      	ldr	r5, [r6, #8]
 80088d2:	e7df      	b.n	8008894 <_vfiprintf_r+0x20>
 80088d4:	4b79      	ldr	r3, [pc, #484]	; (8008abc <_vfiprintf_r+0x248>)
 80088d6:	429d      	cmp	r5, r3
 80088d8:	bf08      	it	eq
 80088da:	68f5      	ldreq	r5, [r6, #12]
 80088dc:	e7da      	b.n	8008894 <_vfiprintf_r+0x20>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	0598      	lsls	r0, r3, #22
 80088e2:	d4ed      	bmi.n	80088c0 <_vfiprintf_r+0x4c>
 80088e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e6:	f000 fb84 	bl	8008ff2 <__retarget_lock_release_recursive>
 80088ea:	e7e9      	b.n	80088c0 <_vfiprintf_r+0x4c>
 80088ec:	2300      	movs	r3, #0
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	2320      	movs	r3, #32
 80088f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fa:	2330      	movs	r3, #48	; 0x30
 80088fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ac0 <_vfiprintf_r+0x24c>
 8008900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008904:	f04f 0901 	mov.w	r9, #1
 8008908:	4623      	mov	r3, r4
 800890a:	469a      	mov	sl, r3
 800890c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008910:	b10a      	cbz	r2, 8008916 <_vfiprintf_r+0xa2>
 8008912:	2a25      	cmp	r2, #37	; 0x25
 8008914:	d1f9      	bne.n	800890a <_vfiprintf_r+0x96>
 8008916:	ebba 0b04 	subs.w	fp, sl, r4
 800891a:	d00b      	beq.n	8008934 <_vfiprintf_r+0xc0>
 800891c:	465b      	mov	r3, fp
 800891e:	4622      	mov	r2, r4
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff94 	bl	8008850 <__sfputs_r>
 8008928:	3001      	adds	r0, #1
 800892a:	f000 80aa 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008930:	445a      	add	r2, fp
 8008932:	9209      	str	r2, [sp, #36]	; 0x24
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80a2 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800893e:	2300      	movs	r3, #0
 8008940:	f04f 32ff 	mov.w	r2, #4294967295
 8008944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008948:	f10a 0a01 	add.w	sl, sl, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008954:	931a      	str	r3, [sp, #104]	; 0x68
 8008956:	4654      	mov	r4, sl
 8008958:	2205      	movs	r2, #5
 800895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895e:	4858      	ldr	r0, [pc, #352]	; (8008ac0 <_vfiprintf_r+0x24c>)
 8008960:	f7f7 fc66 	bl	8000230 <memchr>
 8008964:	9a04      	ldr	r2, [sp, #16]
 8008966:	b9d8      	cbnz	r0, 80089a0 <_vfiprintf_r+0x12c>
 8008968:	06d1      	lsls	r1, r2, #27
 800896a:	bf44      	itt	mi
 800896c:	2320      	movmi	r3, #32
 800896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008972:	0713      	lsls	r3, r2, #28
 8008974:	bf44      	itt	mi
 8008976:	232b      	movmi	r3, #43	; 0x2b
 8008978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897c:	f89a 3000 	ldrb.w	r3, [sl]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d015      	beq.n	80089b0 <_vfiprintf_r+0x13c>
 8008984:	9a07      	ldr	r2, [sp, #28]
 8008986:	4654      	mov	r4, sl
 8008988:	2000      	movs	r0, #0
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	4621      	mov	r1, r4
 8008990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008994:	3b30      	subs	r3, #48	; 0x30
 8008996:	2b09      	cmp	r3, #9
 8008998:	d94e      	bls.n	8008a38 <_vfiprintf_r+0x1c4>
 800899a:	b1b0      	cbz	r0, 80089ca <_vfiprintf_r+0x156>
 800899c:	9207      	str	r2, [sp, #28]
 800899e:	e014      	b.n	80089ca <_vfiprintf_r+0x156>
 80089a0:	eba0 0308 	sub.w	r3, r0, r8
 80089a4:	fa09 f303 	lsl.w	r3, r9, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	46a2      	mov	sl, r4
 80089ae:	e7d2      	b.n	8008956 <_vfiprintf_r+0xe2>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1d19      	adds	r1, r3, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	9103      	str	r1, [sp, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bfbb      	ittet	lt
 80089bc:	425b      	neglt	r3, r3
 80089be:	f042 0202 	orrlt.w	r2, r2, #2
 80089c2:	9307      	strge	r3, [sp, #28]
 80089c4:	9307      	strlt	r3, [sp, #28]
 80089c6:	bfb8      	it	lt
 80089c8:	9204      	strlt	r2, [sp, #16]
 80089ca:	7823      	ldrb	r3, [r4, #0]
 80089cc:	2b2e      	cmp	r3, #46	; 0x2e
 80089ce:	d10c      	bne.n	80089ea <_vfiprintf_r+0x176>
 80089d0:	7863      	ldrb	r3, [r4, #1]
 80089d2:	2b2a      	cmp	r3, #42	; 0x2a
 80089d4:	d135      	bne.n	8008a42 <_vfiprintf_r+0x1ce>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9203      	str	r2, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089e6:	3402      	adds	r4, #2
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ad0 <_vfiprintf_r+0x25c>
 80089ee:	7821      	ldrb	r1, [r4, #0]
 80089f0:	2203      	movs	r2, #3
 80089f2:	4650      	mov	r0, sl
 80089f4:	f7f7 fc1c 	bl	8000230 <memchr>
 80089f8:	b140      	cbz	r0, 8008a0c <_vfiprintf_r+0x198>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	eba0 000a 	sub.w	r0, r0, sl
 8008a00:	fa03 f000 	lsl.w	r0, r3, r0
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	4303      	orrs	r3, r0
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	482c      	ldr	r0, [pc, #176]	; (8008ac4 <_vfiprintf_r+0x250>)
 8008a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a16:	2206      	movs	r2, #6
 8008a18:	f7f7 fc0a 	bl	8000230 <memchr>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d03f      	beq.n	8008aa0 <_vfiprintf_r+0x22c>
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <_vfiprintf_r+0x254>)
 8008a22:	bb1b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x1f8>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	443b      	add	r3, r7
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	e767      	b.n	8008908 <_vfiprintf_r+0x94>
 8008a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	2001      	movs	r0, #1
 8008a40:	e7a5      	b.n	800898e <_vfiprintf_r+0x11a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	3401      	adds	r4, #1
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f04f 0c0a 	mov.w	ip, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a54:	3a30      	subs	r2, #48	; 0x30
 8008a56:	2a09      	cmp	r2, #9
 8008a58:	d903      	bls.n	8008a62 <_vfiprintf_r+0x1ee>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c5      	beq.n	80089ea <_vfiprintf_r+0x176>
 8008a5e:	9105      	str	r1, [sp, #20]
 8008a60:	e7c3      	b.n	80089ea <_vfiprintf_r+0x176>
 8008a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a66:	4604      	mov	r4, r0
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f0      	b.n	8008a4e <_vfiprintf_r+0x1da>
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <_vfiprintf_r+0x258>)
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7fd fdd6 	bl	8006628 <_printf_float>
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	1c78      	adds	r0, r7, #1
 8008a80:	d1d6      	bne.n	8008a30 <_vfiprintf_r+0x1bc>
 8008a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a84:	07d9      	lsls	r1, r3, #31
 8008a86:	d405      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a88:	89ab      	ldrh	r3, [r5, #12]
 8008a8a:	059a      	lsls	r2, r3, #22
 8008a8c:	d402      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a90:	f000 faaf 	bl	8008ff2 <__retarget_lock_release_recursive>
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	065b      	lsls	r3, r3, #25
 8008a98:	f53f af12 	bmi.w	80088c0 <_vfiprintf_r+0x4c>
 8008a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a9e:	e711      	b.n	80088c4 <_vfiprintf_r+0x50>
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <_vfiprintf_r+0x258>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7fe f860 	bl	8006b70 <_printf_i>
 8008ab0:	e7e4      	b.n	8008a7c <_vfiprintf_r+0x208>
 8008ab2:	bf00      	nop
 8008ab4:	08009794 	.word	0x08009794
 8008ab8:	080097b4 	.word	0x080097b4
 8008abc:	08009774 	.word	0x08009774
 8008ac0:	0800961c 	.word	0x0800961c
 8008ac4:	08009626 	.word	0x08009626
 8008ac8:	08006629 	.word	0x08006629
 8008acc:	08008851 	.word	0x08008851
 8008ad0:	08009622 	.word	0x08009622

08008ad4 <__swbuf_r>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	460e      	mov	r6, r1
 8008ad8:	4614      	mov	r4, r2
 8008ada:	4605      	mov	r5, r0
 8008adc:	b118      	cbz	r0, 8008ae6 <__swbuf_r+0x12>
 8008ade:	6983      	ldr	r3, [r0, #24]
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <__swbuf_r+0x12>
 8008ae2:	f000 f9e7 	bl	8008eb4 <__sinit>
 8008ae6:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <__swbuf_r+0x98>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	d12b      	bne.n	8008b44 <__swbuf_r+0x70>
 8008aec:	686c      	ldr	r4, [r5, #4]
 8008aee:	69a3      	ldr	r3, [r4, #24]
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	071a      	lsls	r2, r3, #28
 8008af6:	d52f      	bpl.n	8008b58 <__swbuf_r+0x84>
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b36b      	cbz	r3, 8008b58 <__swbuf_r+0x84>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	1ac0      	subs	r0, r0, r3
 8008b02:	6963      	ldr	r3, [r4, #20]
 8008b04:	b2f6      	uxtb	r6, r6
 8008b06:	4283      	cmp	r3, r0
 8008b08:	4637      	mov	r7, r6
 8008b0a:	dc04      	bgt.n	8008b16 <__swbuf_r+0x42>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f93c 	bl	8008d8c <_fflush_r>
 8008b14:	bb30      	cbnz	r0, 8008b64 <__swbuf_r+0x90>
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	60a3      	str	r3, [r4, #8]
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	701e      	strb	r6, [r3, #0]
 8008b24:	6963      	ldr	r3, [r4, #20]
 8008b26:	3001      	adds	r0, #1
 8008b28:	4283      	cmp	r3, r0
 8008b2a:	d004      	beq.n	8008b36 <__swbuf_r+0x62>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	07db      	lsls	r3, r3, #31
 8008b30:	d506      	bpl.n	8008b40 <__swbuf_r+0x6c>
 8008b32:	2e0a      	cmp	r6, #10
 8008b34:	d104      	bne.n	8008b40 <__swbuf_r+0x6c>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 f927 	bl	8008d8c <_fflush_r>
 8008b3e:	b988      	cbnz	r0, 8008b64 <__swbuf_r+0x90>
 8008b40:	4638      	mov	r0, r7
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b44:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <__swbuf_r+0x9c>)
 8008b46:	429c      	cmp	r4, r3
 8008b48:	d101      	bne.n	8008b4e <__swbuf_r+0x7a>
 8008b4a:	68ac      	ldr	r4, [r5, #8]
 8008b4c:	e7cf      	b.n	8008aee <__swbuf_r+0x1a>
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <__swbuf_r+0xa0>)
 8008b50:	429c      	cmp	r4, r3
 8008b52:	bf08      	it	eq
 8008b54:	68ec      	ldreq	r4, [r5, #12]
 8008b56:	e7ca      	b.n	8008aee <__swbuf_r+0x1a>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 f81a 	bl	8008b94 <__swsetup_r>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d0cb      	beq.n	8008afc <__swbuf_r+0x28>
 8008b64:	f04f 37ff 	mov.w	r7, #4294967295
 8008b68:	e7ea      	b.n	8008b40 <__swbuf_r+0x6c>
 8008b6a:	bf00      	nop
 8008b6c:	08009794 	.word	0x08009794
 8008b70:	080097b4 	.word	0x080097b4
 8008b74:	08009774 	.word	0x08009774

08008b78 <__ascii_wctomb>:
 8008b78:	b149      	cbz	r1, 8008b8e <__ascii_wctomb+0x16>
 8008b7a:	2aff      	cmp	r2, #255	; 0xff
 8008b7c:	bf85      	ittet	hi
 8008b7e:	238a      	movhi	r3, #138	; 0x8a
 8008b80:	6003      	strhi	r3, [r0, #0]
 8008b82:	700a      	strbls	r2, [r1, #0]
 8008b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b88:	bf98      	it	ls
 8008b8a:	2001      	movls	r0, #1
 8008b8c:	4770      	bx	lr
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4770      	bx	lr
	...

08008b94 <__swsetup_r>:
 8008b94:	4b32      	ldr	r3, [pc, #200]	; (8008c60 <__swsetup_r+0xcc>)
 8008b96:	b570      	push	{r4, r5, r6, lr}
 8008b98:	681d      	ldr	r5, [r3, #0]
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	b125      	cbz	r5, 8008baa <__swsetup_r+0x16>
 8008ba0:	69ab      	ldr	r3, [r5, #24]
 8008ba2:	b913      	cbnz	r3, 8008baa <__swsetup_r+0x16>
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 f985 	bl	8008eb4 <__sinit>
 8008baa:	4b2e      	ldr	r3, [pc, #184]	; (8008c64 <__swsetup_r+0xd0>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	d10f      	bne.n	8008bd0 <__swsetup_r+0x3c>
 8008bb0:	686c      	ldr	r4, [r5, #4]
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bb8:	0719      	lsls	r1, r3, #28
 8008bba:	d42c      	bmi.n	8008c16 <__swsetup_r+0x82>
 8008bbc:	06dd      	lsls	r5, r3, #27
 8008bbe:	d411      	bmi.n	8008be4 <__swsetup_r+0x50>
 8008bc0:	2309      	movs	r3, #9
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	e03e      	b.n	8008c4e <__swsetup_r+0xba>
 8008bd0:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <__swsetup_r+0xd4>)
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	d101      	bne.n	8008bda <__swsetup_r+0x46>
 8008bd6:	68ac      	ldr	r4, [r5, #8]
 8008bd8:	e7eb      	b.n	8008bb2 <__swsetup_r+0x1e>
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <__swsetup_r+0xd8>)
 8008bdc:	429c      	cmp	r4, r3
 8008bde:	bf08      	it	eq
 8008be0:	68ec      	ldreq	r4, [r5, #12]
 8008be2:	e7e6      	b.n	8008bb2 <__swsetup_r+0x1e>
 8008be4:	0758      	lsls	r0, r3, #29
 8008be6:	d512      	bpl.n	8008c0e <__swsetup_r+0x7a>
 8008be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bea:	b141      	cbz	r1, 8008bfe <__swsetup_r+0x6a>
 8008bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	d002      	beq.n	8008bfa <__swsetup_r+0x66>
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff fb31 	bl	800825c <_free_r>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	2300      	movs	r3, #0
 8008c08:	6063      	str	r3, [r4, #4]
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f043 0308 	orr.w	r3, r3, #8
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	b94b      	cbnz	r3, 8008c2e <__swsetup_r+0x9a>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c24:	d003      	beq.n	8008c2e <__swsetup_r+0x9a>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f000 fa09 	bl	8009040 <__smakebuf_r>
 8008c2e:	89a0      	ldrh	r0, [r4, #12]
 8008c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c34:	f010 0301 	ands.w	r3, r0, #1
 8008c38:	d00a      	beq.n	8008c50 <__swsetup_r+0xbc>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60a3      	str	r3, [r4, #8]
 8008c3e:	6963      	ldr	r3, [r4, #20]
 8008c40:	425b      	negs	r3, r3
 8008c42:	61a3      	str	r3, [r4, #24]
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	b943      	cbnz	r3, 8008c5a <__swsetup_r+0xc6>
 8008c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c4c:	d1ba      	bne.n	8008bc4 <__swsetup_r+0x30>
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	0781      	lsls	r1, r0, #30
 8008c52:	bf58      	it	pl
 8008c54:	6963      	ldrpl	r3, [r4, #20]
 8008c56:	60a3      	str	r3, [r4, #8]
 8008c58:	e7f4      	b.n	8008c44 <__swsetup_r+0xb0>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e7f7      	b.n	8008c4e <__swsetup_r+0xba>
 8008c5e:	bf00      	nop
 8008c60:	20000010 	.word	0x20000010
 8008c64:	08009794 	.word	0x08009794
 8008c68:	080097b4 	.word	0x080097b4
 8008c6c:	08009774 	.word	0x08009774

08008c70 <abort>:
 8008c70:	b508      	push	{r3, lr}
 8008c72:	2006      	movs	r0, #6
 8008c74:	f000 fa54 	bl	8009120 <raise>
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f7f8 ff85 	bl	8001b88 <_exit>
	...

08008c80 <__sflush_r>:
 8008c80:	898a      	ldrh	r2, [r1, #12]
 8008c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	4605      	mov	r5, r0
 8008c88:	0710      	lsls	r0, r2, #28
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	d458      	bmi.n	8008d40 <__sflush_r+0xc0>
 8008c8e:	684b      	ldr	r3, [r1, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc05      	bgt.n	8008ca0 <__sflush_r+0x20>
 8008c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc02      	bgt.n	8008ca0 <__sflush_r+0x20>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d0f9      	beq.n	8008c9a <__sflush_r+0x1a>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cac:	682f      	ldr	r7, [r5, #0]
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	d032      	beq.n	8008d18 <__sflush_r+0x98>
 8008cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	075a      	lsls	r2, r3, #29
 8008cb8:	d505      	bpl.n	8008cc6 <__sflush_r+0x46>
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	1ac0      	subs	r0, r0, r3
 8008cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cc0:	b10b      	cbz	r3, 8008cc6 <__sflush_r+0x46>
 8008cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cc4:	1ac0      	subs	r0, r0, r3
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ccc:	6a21      	ldr	r1, [r4, #32]
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b0      	blx	r6
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	d106      	bne.n	8008ce6 <__sflush_r+0x66>
 8008cd8:	6829      	ldr	r1, [r5, #0]
 8008cda:	291d      	cmp	r1, #29
 8008cdc:	d82c      	bhi.n	8008d38 <__sflush_r+0xb8>
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <__sflush_r+0x108>)
 8008ce0:	40ca      	lsrs	r2, r1
 8008ce2:	07d6      	lsls	r6, r2, #31
 8008ce4:	d528      	bpl.n	8008d38 <__sflush_r+0xb8>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6062      	str	r2, [r4, #4]
 8008cea:	04d9      	lsls	r1, r3, #19
 8008cec:	6922      	ldr	r2, [r4, #16]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	d504      	bpl.n	8008cfc <__sflush_r+0x7c>
 8008cf2:	1c42      	adds	r2, r0, #1
 8008cf4:	d101      	bne.n	8008cfa <__sflush_r+0x7a>
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	b903      	cbnz	r3, 8008cfc <__sflush_r+0x7c>
 8008cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8008cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfe:	602f      	str	r7, [r5, #0]
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d0ca      	beq.n	8008c9a <__sflush_r+0x1a>
 8008d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	d002      	beq.n	8008d12 <__sflush_r+0x92>
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f7ff faa5 	bl	800825c <_free_r>
 8008d12:	2000      	movs	r0, #0
 8008d14:	6360      	str	r0, [r4, #52]	; 0x34
 8008d16:	e7c1      	b.n	8008c9c <__sflush_r+0x1c>
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b0      	blx	r6
 8008d20:	1c41      	adds	r1, r0, #1
 8008d22:	d1c7      	bne.n	8008cb4 <__sflush_r+0x34>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0c4      	beq.n	8008cb4 <__sflush_r+0x34>
 8008d2a:	2b1d      	cmp	r3, #29
 8008d2c:	d001      	beq.n	8008d32 <__sflush_r+0xb2>
 8008d2e:	2b16      	cmp	r3, #22
 8008d30:	d101      	bne.n	8008d36 <__sflush_r+0xb6>
 8008d32:	602f      	str	r7, [r5, #0]
 8008d34:	e7b1      	b.n	8008c9a <__sflush_r+0x1a>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	e7ad      	b.n	8008c9c <__sflush_r+0x1c>
 8008d40:	690f      	ldr	r7, [r1, #16]
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	d0a9      	beq.n	8008c9a <__sflush_r+0x1a>
 8008d46:	0793      	lsls	r3, r2, #30
 8008d48:	680e      	ldr	r6, [r1, #0]
 8008d4a:	bf08      	it	eq
 8008d4c:	694b      	ldreq	r3, [r1, #20]
 8008d4e:	600f      	str	r7, [r1, #0]
 8008d50:	bf18      	it	ne
 8008d52:	2300      	movne	r3, #0
 8008d54:	eba6 0807 	sub.w	r8, r6, r7
 8008d58:	608b      	str	r3, [r1, #8]
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	dd9c      	ble.n	8008c9a <__sflush_r+0x1a>
 8008d60:	6a21      	ldr	r1, [r4, #32]
 8008d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d64:	4643      	mov	r3, r8
 8008d66:	463a      	mov	r2, r7
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b0      	blx	r6
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dc06      	bgt.n	8008d7e <__sflush_r+0xfe>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	e78e      	b.n	8008c9c <__sflush_r+0x1c>
 8008d7e:	4407      	add	r7, r0
 8008d80:	eba8 0800 	sub.w	r8, r8, r0
 8008d84:	e7e9      	b.n	8008d5a <__sflush_r+0xda>
 8008d86:	bf00      	nop
 8008d88:	20400001 	.word	0x20400001

08008d8c <_fflush_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	690b      	ldr	r3, [r1, #16]
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	b913      	cbnz	r3, 8008d9c <_fflush_r+0x10>
 8008d96:	2500      	movs	r5, #0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	b118      	cbz	r0, 8008da6 <_fflush_r+0x1a>
 8008d9e:	6983      	ldr	r3, [r0, #24]
 8008da0:	b90b      	cbnz	r3, 8008da6 <_fflush_r+0x1a>
 8008da2:	f000 f887 	bl	8008eb4 <__sinit>
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <_fflush_r+0x6c>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	d11b      	bne.n	8008de4 <_fflush_r+0x58>
 8008dac:	686c      	ldr	r4, [r5, #4]
 8008dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0ef      	beq.n	8008d96 <_fflush_r+0xa>
 8008db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db8:	07d0      	lsls	r0, r2, #31
 8008dba:	d404      	bmi.n	8008dc6 <_fflush_r+0x3a>
 8008dbc:	0599      	lsls	r1, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_fflush_r+0x3a>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f000 f915 	bl	8008ff0 <__retarget_lock_acquire_recursive>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7ff ff59 	bl	8008c80 <__sflush_r>
 8008dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd0:	07da      	lsls	r2, r3, #31
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	d4e0      	bmi.n	8008d98 <_fflush_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d4dd      	bmi.n	8008d98 <_fflush_r+0xc>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dde:	f000 f908 	bl	8008ff2 <__retarget_lock_release_recursive>
 8008de2:	e7d9      	b.n	8008d98 <_fflush_r+0xc>
 8008de4:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <_fflush_r+0x70>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d101      	bne.n	8008dee <_fflush_r+0x62>
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	e7df      	b.n	8008dae <_fflush_r+0x22>
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <_fflush_r+0x74>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	bf08      	it	eq
 8008df4:	68ec      	ldreq	r4, [r5, #12]
 8008df6:	e7da      	b.n	8008dae <_fflush_r+0x22>
 8008df8:	08009794 	.word	0x08009794
 8008dfc:	080097b4 	.word	0x080097b4
 8008e00:	08009774 	.word	0x08009774

08008e04 <std>:
 8008e04:	2300      	movs	r3, #0
 8008e06:	b510      	push	{r4, lr}
 8008e08:	4604      	mov	r4, r0
 8008e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e12:	6083      	str	r3, [r0, #8]
 8008e14:	8181      	strh	r1, [r0, #12]
 8008e16:	6643      	str	r3, [r0, #100]	; 0x64
 8008e18:	81c2      	strh	r2, [r0, #14]
 8008e1a:	6183      	str	r3, [r0, #24]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	2208      	movs	r2, #8
 8008e20:	305c      	adds	r0, #92	; 0x5c
 8008e22:	f7fd fb59 	bl	80064d8 <memset>
 8008e26:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <std+0x38>)
 8008e28:	6263      	str	r3, [r4, #36]	; 0x24
 8008e2a:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <std+0x3c>)
 8008e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e2e:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <std+0x40>)
 8008e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <std+0x44>)
 8008e34:	6224      	str	r4, [r4, #32]
 8008e36:	6323      	str	r3, [r4, #48]	; 0x30
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	bf00      	nop
 8008e3c:	08009159 	.word	0x08009159
 8008e40:	0800917b 	.word	0x0800917b
 8008e44:	080091b3 	.word	0x080091b3
 8008e48:	080091d7 	.word	0x080091d7

08008e4c <_cleanup_r>:
 8008e4c:	4901      	ldr	r1, [pc, #4]	; (8008e54 <_cleanup_r+0x8>)
 8008e4e:	f000 b8af 	b.w	8008fb0 <_fwalk_reent>
 8008e52:	bf00      	nop
 8008e54:	08008d8d 	.word	0x08008d8d

08008e58 <__sfmoreglue>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	2268      	movs	r2, #104	; 0x68
 8008e5c:	1e4d      	subs	r5, r1, #1
 8008e5e:	4355      	muls	r5, r2
 8008e60:	460e      	mov	r6, r1
 8008e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e66:	f7ff fa65 	bl	8008334 <_malloc_r>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	b140      	cbz	r0, 8008e80 <__sfmoreglue+0x28>
 8008e6e:	2100      	movs	r1, #0
 8008e70:	e9c0 1600 	strd	r1, r6, [r0]
 8008e74:	300c      	adds	r0, #12
 8008e76:	60a0      	str	r0, [r4, #8]
 8008e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e7c:	f7fd fb2c 	bl	80064d8 <memset>
 8008e80:	4620      	mov	r0, r4
 8008e82:	bd70      	pop	{r4, r5, r6, pc}

08008e84 <__sfp_lock_acquire>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__sfp_lock_acquire+0x8>)
 8008e86:	f000 b8b3 	b.w	8008ff0 <__retarget_lock_acquire_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	20000415 	.word	0x20000415

08008e90 <__sfp_lock_release>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__sfp_lock_release+0x8>)
 8008e92:	f000 b8ae 	b.w	8008ff2 <__retarget_lock_release_recursive>
 8008e96:	bf00      	nop
 8008e98:	20000415 	.word	0x20000415

08008e9c <__sinit_lock_acquire>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__sinit_lock_acquire+0x8>)
 8008e9e:	f000 b8a7 	b.w	8008ff0 <__retarget_lock_acquire_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	20000416 	.word	0x20000416

08008ea8 <__sinit_lock_release>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__sinit_lock_release+0x8>)
 8008eaa:	f000 b8a2 	b.w	8008ff2 <__retarget_lock_release_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20000416 	.word	0x20000416

08008eb4 <__sinit>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	f7ff fff0 	bl	8008e9c <__sinit_lock_acquire>
 8008ebc:	69a3      	ldr	r3, [r4, #24]
 8008ebe:	b11b      	cbz	r3, 8008ec8 <__sinit+0x14>
 8008ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec4:	f7ff bff0 	b.w	8008ea8 <__sinit_lock_release>
 8008ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <__sinit+0x68>)
 8008ed0:	4a13      	ldr	r2, [pc, #76]	; (8008f20 <__sinit+0x6c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	bf04      	itt	eq
 8008eda:	2301      	moveq	r3, #1
 8008edc:	61a3      	streq	r3, [r4, #24]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 f820 	bl	8008f24 <__sfp>
 8008ee4:	6060      	str	r0, [r4, #4]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 f81c 	bl	8008f24 <__sfp>
 8008eec:	60a0      	str	r0, [r4, #8]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 f818 	bl	8008f24 <__sfp>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	60e0      	str	r0, [r4, #12]
 8008ef8:	2104      	movs	r1, #4
 8008efa:	6860      	ldr	r0, [r4, #4]
 8008efc:	f7ff ff82 	bl	8008e04 <std>
 8008f00:	68a0      	ldr	r0, [r4, #8]
 8008f02:	2201      	movs	r2, #1
 8008f04:	2109      	movs	r1, #9
 8008f06:	f7ff ff7d 	bl	8008e04 <std>
 8008f0a:	68e0      	ldr	r0, [r4, #12]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	2112      	movs	r1, #18
 8008f10:	f7ff ff78 	bl	8008e04 <std>
 8008f14:	2301      	movs	r3, #1
 8008f16:	61a3      	str	r3, [r4, #24]
 8008f18:	e7d2      	b.n	8008ec0 <__sinit+0xc>
 8008f1a:	bf00      	nop
 8008f1c:	080093fc 	.word	0x080093fc
 8008f20:	08008e4d 	.word	0x08008e4d

08008f24 <__sfp>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	4607      	mov	r7, r0
 8008f28:	f7ff ffac 	bl	8008e84 <__sfp_lock_acquire>
 8008f2c:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <__sfp+0x84>)
 8008f2e:	681e      	ldr	r6, [r3, #0]
 8008f30:	69b3      	ldr	r3, [r6, #24]
 8008f32:	b913      	cbnz	r3, 8008f3a <__sfp+0x16>
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff ffbd 	bl	8008eb4 <__sinit>
 8008f3a:	3648      	adds	r6, #72	; 0x48
 8008f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	d503      	bpl.n	8008f4c <__sfp+0x28>
 8008f44:	6833      	ldr	r3, [r6, #0]
 8008f46:	b30b      	cbz	r3, 8008f8c <__sfp+0x68>
 8008f48:	6836      	ldr	r6, [r6, #0]
 8008f4a:	e7f7      	b.n	8008f3c <__sfp+0x18>
 8008f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f50:	b9d5      	cbnz	r5, 8008f88 <__sfp+0x64>
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <__sfp+0x88>)
 8008f54:	60e3      	str	r3, [r4, #12]
 8008f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f5c:	f000 f847 	bl	8008fee <__retarget_lock_init_recursive>
 8008f60:	f7ff ff96 	bl	8008e90 <__sfp_lock_release>
 8008f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f6c:	6025      	str	r5, [r4, #0]
 8008f6e:	61a5      	str	r5, [r4, #24]
 8008f70:	2208      	movs	r2, #8
 8008f72:	4629      	mov	r1, r5
 8008f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f78:	f7fd faae 	bl	80064d8 <memset>
 8008f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f84:	4620      	mov	r0, r4
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f88:	3468      	adds	r4, #104	; 0x68
 8008f8a:	e7d9      	b.n	8008f40 <__sfp+0x1c>
 8008f8c:	2104      	movs	r1, #4
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7ff ff62 	bl	8008e58 <__sfmoreglue>
 8008f94:	4604      	mov	r4, r0
 8008f96:	6030      	str	r0, [r6, #0]
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d1d5      	bne.n	8008f48 <__sfp+0x24>
 8008f9c:	f7ff ff78 	bl	8008e90 <__sfp_lock_release>
 8008fa0:	230c      	movs	r3, #12
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	e7ee      	b.n	8008f84 <__sfp+0x60>
 8008fa6:	bf00      	nop
 8008fa8:	080093fc 	.word	0x080093fc
 8008fac:	ffff0001 	.word	0xffff0001

08008fb0 <_fwalk_reent>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	4688      	mov	r8, r1
 8008fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fbc:	2700      	movs	r7, #0
 8008fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8008fc6:	d505      	bpl.n	8008fd4 <_fwalk_reent+0x24>
 8008fc8:	6824      	ldr	r4, [r4, #0]
 8008fca:	2c00      	cmp	r4, #0
 8008fcc:	d1f7      	bne.n	8008fbe <_fwalk_reent+0xe>
 8008fce:	4638      	mov	r0, r7
 8008fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd4:	89ab      	ldrh	r3, [r5, #12]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d907      	bls.n	8008fea <_fwalk_reent+0x3a>
 8008fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	d003      	beq.n	8008fea <_fwalk_reent+0x3a>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	47c0      	blx	r8
 8008fe8:	4307      	orrs	r7, r0
 8008fea:	3568      	adds	r5, #104	; 0x68
 8008fec:	e7e9      	b.n	8008fc2 <_fwalk_reent+0x12>

08008fee <__retarget_lock_init_recursive>:
 8008fee:	4770      	bx	lr

08008ff0 <__retarget_lock_acquire_recursive>:
 8008ff0:	4770      	bx	lr

08008ff2 <__retarget_lock_release_recursive>:
 8008ff2:	4770      	bx	lr

08008ff4 <__swhatbuf_r>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	460e      	mov	r6, r1
 8008ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	b096      	sub	sp, #88	; 0x58
 8009000:	4614      	mov	r4, r2
 8009002:	461d      	mov	r5, r3
 8009004:	da08      	bge.n	8009018 <__swhatbuf_r+0x24>
 8009006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	061a      	lsls	r2, r3, #24
 8009010:	d410      	bmi.n	8009034 <__swhatbuf_r+0x40>
 8009012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009016:	e00e      	b.n	8009036 <__swhatbuf_r+0x42>
 8009018:	466a      	mov	r2, sp
 800901a:	f000 f903 	bl	8009224 <_fstat_r>
 800901e:	2800      	cmp	r0, #0
 8009020:	dbf1      	blt.n	8009006 <__swhatbuf_r+0x12>
 8009022:	9a01      	ldr	r2, [sp, #4]
 8009024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800902c:	425a      	negs	r2, r3
 800902e:	415a      	adcs	r2, r3
 8009030:	602a      	str	r2, [r5, #0]
 8009032:	e7ee      	b.n	8009012 <__swhatbuf_r+0x1e>
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	2000      	movs	r0, #0
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	b016      	add	sp, #88	; 0x58
 800903c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009040 <__smakebuf_r>:
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009044:	079d      	lsls	r5, r3, #30
 8009046:	4606      	mov	r6, r0
 8009048:	460c      	mov	r4, r1
 800904a:	d507      	bpl.n	800905c <__smakebuf_r+0x1c>
 800904c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	6123      	str	r3, [r4, #16]
 8009054:	2301      	movs	r3, #1
 8009056:	6163      	str	r3, [r4, #20]
 8009058:	b002      	add	sp, #8
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	ab01      	add	r3, sp, #4
 800905e:	466a      	mov	r2, sp
 8009060:	f7ff ffc8 	bl	8008ff4 <__swhatbuf_r>
 8009064:	9900      	ldr	r1, [sp, #0]
 8009066:	4605      	mov	r5, r0
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff f963 	bl	8008334 <_malloc_r>
 800906e:	b948      	cbnz	r0, 8009084 <__smakebuf_r+0x44>
 8009070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009074:	059a      	lsls	r2, r3, #22
 8009076:	d4ef      	bmi.n	8009058 <__smakebuf_r+0x18>
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	e7e3      	b.n	800904c <__smakebuf_r+0xc>
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <__smakebuf_r+0x7c>)
 8009086:	62b3      	str	r3, [r6, #40]	; 0x28
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	6020      	str	r0, [r4, #0]
 800908c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	6163      	str	r3, [r4, #20]
 8009096:	9b01      	ldr	r3, [sp, #4]
 8009098:	6120      	str	r0, [r4, #16]
 800909a:	b15b      	cbz	r3, 80090b4 <__smakebuf_r+0x74>
 800909c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f8d1 	bl	8009248 <_isatty_r>
 80090a6:	b128      	cbz	r0, 80090b4 <__smakebuf_r+0x74>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	89a0      	ldrh	r0, [r4, #12]
 80090b6:	4305      	orrs	r5, r0
 80090b8:	81a5      	strh	r5, [r4, #12]
 80090ba:	e7cd      	b.n	8009058 <__smakebuf_r+0x18>
 80090bc:	08008e4d 	.word	0x08008e4d

080090c0 <_malloc_usable_size_r>:
 80090c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c4:	1f18      	subs	r0, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfbc      	itt	lt
 80090ca:	580b      	ldrlt	r3, [r1, r0]
 80090cc:	18c0      	addlt	r0, r0, r3
 80090ce:	4770      	bx	lr

080090d0 <_raise_r>:
 80090d0:	291f      	cmp	r1, #31
 80090d2:	b538      	push	{r3, r4, r5, lr}
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	d904      	bls.n	80090e4 <_raise_r+0x14>
 80090da:	2316      	movs	r3, #22
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090e6:	b112      	cbz	r2, 80090ee <_raise_r+0x1e>
 80090e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090ec:	b94b      	cbnz	r3, 8009102 <_raise_r+0x32>
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f830 	bl	8009154 <_getpid_r>
 80090f4:	462a      	mov	r2, r5
 80090f6:	4601      	mov	r1, r0
 80090f8:	4620      	mov	r0, r4
 80090fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090fe:	f000 b817 	b.w	8009130 <_kill_r>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d00a      	beq.n	800911c <_raise_r+0x4c>
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	d103      	bne.n	8009112 <_raise_r+0x42>
 800910a:	2316      	movs	r3, #22
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	2001      	movs	r0, #1
 8009110:	e7e7      	b.n	80090e2 <_raise_r+0x12>
 8009112:	2400      	movs	r4, #0
 8009114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009118:	4628      	mov	r0, r5
 800911a:	4798      	blx	r3
 800911c:	2000      	movs	r0, #0
 800911e:	e7e0      	b.n	80090e2 <_raise_r+0x12>

08009120 <raise>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <raise+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f7ff bfd3 	b.w	80090d0 <_raise_r>
 800912a:	bf00      	nop
 800912c:	20000010 	.word	0x20000010

08009130 <_kill_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d07      	ldr	r5, [pc, #28]	; (8009150 <_kill_r+0x20>)
 8009134:	2300      	movs	r3, #0
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f7f8 fd13 	bl	8001b68 <_kill>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	d102      	bne.n	800914c <_kill_r+0x1c>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	b103      	cbz	r3, 800914c <_kill_r+0x1c>
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	20000410 	.word	0x20000410

08009154 <_getpid_r>:
 8009154:	f7f8 bd00 	b.w	8001b58 <_getpid>

08009158 <__sread>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	f000 f894 	bl	800928c <_read_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	bfab      	itete	ge
 8009168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800916a:	89a3      	ldrhlt	r3, [r4, #12]
 800916c:	181b      	addge	r3, r3, r0
 800916e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009172:	bfac      	ite	ge
 8009174:	6563      	strge	r3, [r4, #84]	; 0x54
 8009176:	81a3      	strhlt	r3, [r4, #12]
 8009178:	bd10      	pop	{r4, pc}

0800917a <__swrite>:
 800917a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917e:	461f      	mov	r7, r3
 8009180:	898b      	ldrh	r3, [r1, #12]
 8009182:	05db      	lsls	r3, r3, #23
 8009184:	4605      	mov	r5, r0
 8009186:	460c      	mov	r4, r1
 8009188:	4616      	mov	r6, r2
 800918a:	d505      	bpl.n	8009198 <__swrite+0x1e>
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	2302      	movs	r3, #2
 8009192:	2200      	movs	r2, #0
 8009194:	f000 f868 	bl	8009268 <_lseek_r>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	4628      	mov	r0, r5
 80091aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	f000 b817 	b.w	80091e0 <_write_r>

080091b2 <__sseek>:
 80091b2:	b510      	push	{r4, lr}
 80091b4:	460c      	mov	r4, r1
 80091b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ba:	f000 f855 	bl	8009268 <_lseek_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	bf15      	itete	ne
 80091c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ce:	81a3      	strheq	r3, [r4, #12]
 80091d0:	bf18      	it	ne
 80091d2:	81a3      	strhne	r3, [r4, #12]
 80091d4:	bd10      	pop	{r4, pc}

080091d6 <__sclose>:
 80091d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091da:	f000 b813 	b.w	8009204 <_close_r>
	...

080091e0 <_write_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	; (8009200 <_write_r+0x20>)
 80091e4:	4604      	mov	r4, r0
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	602a      	str	r2, [r5, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f7f8 fcf1 	bl	8001bd6 <_write>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_write_r+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_write_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	20000410 	.word	0x20000410

08009204 <_close_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d06      	ldr	r5, [pc, #24]	; (8009220 <_close_r+0x1c>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7f8 fcfd 	bl	8001c0e <_close>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_close_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_close_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20000410 	.word	0x20000410

08009224 <_fstat_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d07      	ldr	r5, [pc, #28]	; (8009244 <_fstat_r+0x20>)
 8009228:	2300      	movs	r3, #0
 800922a:	4604      	mov	r4, r0
 800922c:	4608      	mov	r0, r1
 800922e:	4611      	mov	r1, r2
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	f7f8 fcf8 	bl	8001c26 <_fstat>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d102      	bne.n	8009240 <_fstat_r+0x1c>
 800923a:	682b      	ldr	r3, [r5, #0]
 800923c:	b103      	cbz	r3, 8009240 <_fstat_r+0x1c>
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	bd38      	pop	{r3, r4, r5, pc}
 8009242:	bf00      	nop
 8009244:	20000410 	.word	0x20000410

08009248 <_isatty_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	; (8009264 <_isatty_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f7f8 fcf7 	bl	8001c46 <_isatty>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_isatty_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_isatty_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000410 	.word	0x20000410

08009268 <_lseek_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	; (8009288 <_lseek_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f7f8 fcf0 	bl	8001c5c <_lseek>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_lseek_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_lseek_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000410 	.word	0x20000410

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	; (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f8 fc7e 	bl	8001b9c <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000410 	.word	0x20000410

080092b0 <_init>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr

080092bc <_fini>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr
